import Arithmetization.ISigmaZero.Exponential.PPow2
import Mathlib.Algebra.Order.Ring.Basic

noncomputable section

namespace LO.Arith

variable {V : Type*} [ORingStruc V]

open FirstOrder FirstOrder.Arith

section ISigma‚ÇÄ

variable [V ‚äß‚Çò* ùêàùö∫‚ÇÄ]

def ext (u z : V) : V := z / u % u

lemma ext_graph (a b c : V) : a = ext b c ‚Üî ‚àÉ x ‚â§ c, x = c / b ‚àß a = x % b := by
  simp [ext]; constructor
  ¬∑ rintro rfl; exact ‚ü®c / b, by simp, rfl, by rfl‚ü©
  ¬∑ rintro ‚ü®_, _, rfl, rfl‚ü©; simp

def _root_.LO.FirstOrder.Arith.extDef : ùö∫‚ÇÄ.Semisentence 3 :=
  .mkSigma ‚Äúa b c. ‚àÉ x <‚Å∫ c, !divDef x c b ‚àß !remDef a x b‚Äù (by simp)

lemma ext_defined : ùö∫‚ÇÄ-Function‚ÇÇ (Œª a b : V ‚Ü¶ ext a b) via extDef := by
  intro v; simp [Matrix.vecHead, Matrix.vecTail, extDef,
    ext_graph, Semiformula.eval_substs, div_defined.df.iff, rem_defined.df.iff, le_iff_lt_succ]

instance ext_definable : ùö∫‚ÇÄ-Function‚ÇÇ (ext : V ‚Üí V ‚Üí V) := ext_defined.to_definable

@[simp] lemma ext_le_add (u z : V) : ext u z ‚â§ z :=
  le_trans (mod_le (z / u) u) (by simp [add_comm])

instance : Bounded‚ÇÇ (ext : V ‚Üí V ‚Üí V) := ‚ü®#1, by intro v; simp‚ü©

@[simp] lemma ext_lt {u} (z : V) (pos : 0 < u) : ext u z < u := by simp [ext, pos]

lemma ext_add_of_dvd_sq_right {u z‚ÇÅ z‚ÇÇ : V} (pos : 0 < u) (h : u^2 ‚à£ z‚ÇÇ) : ext u (z‚ÇÅ + z‚ÇÇ) = ext u z‚ÇÅ := by
  simp [ext]
  have : ‚àÉ z', z‚ÇÇ = z' * u * u := by rcases h with ‚ü®u', rfl‚ü©; exact ‚ü®u', by simp [mul_comm _ u', mul_assoc]; simp [sq]‚ü©
  rcases this with ‚ü®z‚ÇÇ, rfl‚ü©
  simp [div_add_mul_self, pos]

lemma ext_add_of_dvd_sq_left {u z‚ÇÅ z‚ÇÇ : V} (pos : 0 < u) (h : u^2 ‚à£ z‚ÇÅ) : ext u (z‚ÇÅ + z‚ÇÇ) = ext u z‚ÇÇ := by
  rw [add_comm]; exact ext_add_of_dvd_sq_right pos h

lemma ext_rem {i j z : V} (ppi : PPow2 i) (ppj : PPow2 j) (hij : i < j) : ext i (z % j) = ext i z := by
  have := div_add_mod z j
  have : i^2 ‚à£ j := ppi.pow2.sq.dvd_of_le ppj.pow2 (PPow2.sq_le_of_lt ppi ppj hij)
  calc
    ext i (z % j) = ext i (j * (z / j) + (z % j)) := by symm; exact ext_add_of_dvd_sq_left ppi.pos (Dvd.dvd.mul_right this (z / j))
    _               = ext i z                          := by simp [div_add_mod]

def Exponential.Seq‚ÇÄ (X Y : V) : Prop := ext 4 X = 1 ‚àß ext 4 Y = 2

def Exponential.Seq‚Çõ.Even (X Y u : V) : Prop := ext (u^2) X = 2 * ext u X ‚àß ext (u^2) Y = (ext u Y)^2

def Exponential.Seq‚Çõ.Odd (X Y u : V) : Prop := ext (u^2) X = 2 * ext u X + 1 ‚àß ext (u^2) Y = 2 * (ext u Y)^2

def Exponential.Seq‚Çõ (y X Y : V) : Prop := ‚àÄ u ‚â§ y, u ‚â† 2 ‚Üí PPow2 u ‚Üí Seq‚Çõ.Even X Y u ‚à® Seq‚Çõ.Odd X Y u

def Exponential.Seq‚Çò (x y X Y : V) : Prop := ‚àÉ u ‚â§ y^2, u ‚â† 2 ‚àß PPow2 u ‚àß ext u X = x ‚àß ext u Y = y

def Exponential (x y : V) : Prop := (x = 0 ‚àß y = 1) ‚à® ‚àÉ X ‚â§ y^4, ‚àÉ Y ‚â§ y^4, Exponential.Seq‚ÇÄ X Y ‚àß Exponential.Seq‚Çõ y X Y ‚àß Exponential.Seq‚Çò x y X Y

lemma Exponential.Seq‚Çõ.iff (y X Y : V) :
  Exponential.Seq‚Çõ y X Y ‚Üî
  ‚àÄ u ‚â§ y, u ‚â† 2 ‚Üí PPow2 u ‚Üí
    ((‚àÉ ext_u_X ‚â§ X, ext_u_X = ext u X ‚àß 2 * ext_u_X = ext (u^2) X)     ‚àß (‚àÉ ext_u_Y ‚â§ Y, ext_u_Y = ext u Y ‚àß ext_u_Y^2 = ext (u^2) Y)) ‚à®
    ((‚àÉ ext_u_X ‚â§ X, ext_u_X = ext u X ‚àß 2 * ext_u_X + 1 = ext (u^2) X) ‚àß (‚àÉ ext_u_Y ‚â§ Y, ext_u_Y = ext u Y ‚àß 2 * ext_u_Y^2 = ext (u^2) Y)) :=
  ‚ü®by intro H u hu ne2 ppu
      rcases H u hu ne2 ppu with (H | H)
      ¬∑ exact Or.inl ‚ü®‚ü®ext u X, by simp [H.1]‚ü©, ‚ü®ext u Y, by simp [H.2]‚ü©‚ü©
      ¬∑ exact Or.inr ‚ü®‚ü®ext u X, by simp [H.1]‚ü©, ‚ü®ext u Y, by simp [H.2]‚ü©‚ü©,
   by intro H u hu ne2 ppu
      rcases H u hu ne2 ppu with (‚ü®‚ü®_, _, rfl, hx‚ü©, ‚ü®_, _, rfl, hy‚ü©‚ü© | ‚ü®‚ü®_, _, rfl, hx‚ü©, ‚ü®_, _, rfl, hy‚ü©‚ü©)
      ¬∑ exact Or.inl ‚ü®by simp [hx, hy], by simp [hx, hy]‚ü©
      ¬∑ exact Or.inr ‚ü®by simp [hx, hy], by simp [hx, hy]‚ü©‚ü©

def Exponential.Seq‚Çõ.def : ùö∫‚ÇÄ.Semisentence 3 := .mkSigma
  ‚Äú y X Y.
    ‚àÄ u <‚Å∫ y, u ‚â† 2 ‚Üí !ppow2Def u ‚Üí
      ( (‚àÉ ext_u_X <‚Å∫ X, !extDef ext_u_X u X ‚àß !extDef (2 * ext_u_X) u¬≤ X) ‚àß
        (‚àÉ ext_u_Y <‚Å∫ Y, !extDef ext_u_Y u Y ‚àß !extDef ext_u_Y¬≤ u¬≤ Y)  ) ‚à®
      ( (‚àÉ ext_u_X <‚Å∫ X, !extDef ext_u_X u X ‚àß !extDef (2 * ext_u_X + 1) u¬≤ X) ‚àß
        (‚àÉ ext_u_Y <‚Å∫ Y, !extDef ext_u_Y u Y ‚àß !extDef (2 * ext_u_Y¬≤) u¬≤ Y) ) ‚Äù (by simp)

lemma Exponential.Seq‚Çõ.defined : ùö∫‚ÇÄ-Relation‚ÇÉ (Exponential.Seq‚Çõ : V ‚Üí V ‚Üí V ‚Üí Prop) via Exponential.Seq‚Çõ.def := by
  intro v; simp [Exponential.Seq‚Çõ.iff, Exponential.Seq‚Çõ.def, ppow2_defined.df.iff,
    ext_defined.df.iff, ‚Üêle_iff_lt_succ, sq, numeral_eq_natCast]

lemma Exponential.graph_iff (x y : V) :
    Exponential x y ‚Üî
    (x = 0 ‚àß y = 1) ‚à® ‚àÉ X ‚â§ y^4, ‚àÉ Y ‚â§ y^4,
      (1 = ext 4 X ‚àß 2 = ext 4 Y) ‚àß
      Exponential.Seq‚Çõ y X Y ‚àß
      (‚àÉ u ‚â§ y^2, u ‚â† 2 ‚àß PPow2 u ‚àß x = ext u X ‚àß y = ext u Y) :=
  ‚ü®by rintro (H | ‚ü®X, bX, Y, bY, H‚ÇÄ, H‚Çõ, ‚ü®u, hu, ne2, ppu, hX, hY‚ü©‚ü©)
      ¬∑ exact Or.inl H
      ¬∑ exact Or.inr ‚ü®X, bX, Y, bY, ‚ü®H‚ÇÄ.1.symm, H‚ÇÄ.2.symm‚ü©, H‚Çõ, ‚ü®u, hu, ne2, ppu, hX.symm, hY.symm‚ü©‚ü©,
   by rintro (H | ‚ü®X, bX, Y, bY, H‚ÇÄ, H‚Çõ, ‚ü®u, hu, ne2, ppu, hX, hY‚ü©‚ü©)
      ¬∑ exact Or.inl H
      ¬∑ exact Or.inr ‚ü®X, bX, Y, bY, ‚ü®H‚ÇÄ.1.symm, H‚ÇÄ.2.symm‚ü©, H‚Çõ, ‚ü®u, hu, ne2, ppu, hX.symm, hY.symm‚ü©‚ü©‚ü©

def _root_.LO.FirstOrder.Arith.exponentialDef : ùö∫‚ÇÄ.Semisentence 2 := .mkSigma
  ‚Äúx y.
    (x = 0 ‚àß y = 1) ‚à® ‚àÉ X <‚Å∫ y‚Å¥, ‚àÉ Y <‚Å∫ y‚Å¥,
      (!extDef 1 4 X ‚àß !extDef 2 4 Y) ‚àß
      !Exponential.Seq‚Çõ.def y X Y ‚àß
      ‚àÉ u <‚Å∫ y¬≤, u ‚â† 2 ‚àß !ppow2Def u ‚àß !extDef x u X ‚àß !extDef y u Y‚Äù (by simp)

lemma Exponential.defined : ùö∫‚ÇÄ-Relation (Exponential : V ‚Üí V ‚Üí Prop) via exponentialDef := by
  intro v; simp [Exponential.graph_iff, exponentialDef, ppow2_defined.df.iff, ext_defined.df.iff,
    Exponential.Seq‚Çõ.defined.df.iff, ‚Üêle_iff_lt_succ, pow_four, sq, numeral_eq_natCast]

@[simp] lemma exponential_defined_iff (v) :
    Semiformula.Evalbm V v exponentialDef.val ‚Üî Exponential (v 0) (v 1) := Exponential.defined.df.iff v

instance exponential_definable : ùö∫‚ÇÄ-Relation (Exponential : V ‚Üí V ‚Üí Prop) := Exponential.defined.to_definable

@[simp] instance exponential_definable' (Œì) : Œì-Relation (Exponential : V ‚Üí V ‚Üí Prop) := exponential_definable.of_zero

namespace Exponential

def seqX‚ÇÄ : V := 4

def seqY‚ÇÄ : V := 2 * 4

lemma one_lt_four : (1 : V) < 4 := by
  rw [‚Üêthree_add_one_eq_four]
  exact lt_add_of_pos_left 1 three_pos

lemma two_lt_three : (2 : V) < 3 := by rw [‚Üêtwo_add_one_eq_three]; exact lt_add_one 2

lemma three_lt_four : (3 : V) < 4 := by rw [‚Üêthree_add_one_eq_four]; exact lt_add_one 3

lemma two_lt_four : (2 : V) < 4 := lt_trans two_lt_three three_lt_four

lemma seq‚ÇÄ_zero_two : Seq‚ÇÄ (seqX‚ÇÄ : V) (seqY‚ÇÄ : V) := by simp [seqX‚ÇÄ, seqY‚ÇÄ, Seq‚ÇÄ, ext, one_lt_four, two_lt_four]

lemma Seq‚ÇÄ.rem {X Y i : V} (h : Seq‚ÇÄ X Y) (ppi : PPow2 i) (hi : 4 < i) :
    Seq‚ÇÄ (X % i) (Y % i) := by
  rw [Seq‚ÇÄ, ext_rem, ext_rem] <;> try simp [ppi, hi]
  exact h

lemma Seq‚Çõ.rem {y y' X Y i : V} (h : Seq‚Çõ y X Y) (ppi : PPow2 i) (hi : y'^2 < i) (hy : y' ‚â§ y) :
    Seq‚Çõ y' (X % i) (Y % i) := by
  intro j hj ne2 ppj
  have : j^2 < i := lt_of_le_of_lt (sq_le_sq.mpr hj) hi
  have : j < i := lt_of_le_of_lt (le_trans hj $ by simp) hi
  rcases h j (le_trans hj hy) ne2 ppj with (H | H)
  ¬∑ left; simpa [Seq‚Çõ.Even, ext_rem, ppj, ppj.sq, ppi, *] using H
  ¬∑ right; simpa [Seq‚Çõ.Odd, ext_rem, ppj, ppj.sq, ppi, *] using H

lemma seq‚Çõ_one_zero_two : Seq‚Çõ (1 : V) (seqX‚ÇÄ : V) (seqY‚ÇÄ : V) := by
  intro u leu; rcases le_one_iff_eq_zero_or_one.mp leu with (rfl | rfl) <;> simp

def append (i X z : V) : V := X % i + z * i

lemma append_lt (i X : V) {z} (hz : z < i) : append i X z < i^2 := calc
  append i X z = (X % i) + z * i := rfl
  _            < (1 + z) * i       := by simp [add_mul]; exact mod_lt _ (pos_of_gt hz)
  _            ‚â§ i^2               := by simp [sq, add_comm]; exact mul_le_mul_of_nonneg_right (lt_iff_succ_le.mp hz) (by simp)

lemma ext_append_last (i X : V) {z} (hz : z < i) :
    ext i (append i X z) = z := by
  simp [ext, append, div_add_mul_self, show 0 < i from pos_of_gt hz, hz]

lemma ext_append_of_lt {i j : V} (hi : PPow2 i) (hj : PPow2 j) (hij : i < j) (X z : V) :
    ext i (append j X z) = ext i X := by
  have : i^2 ‚à£ j := Pow2.dvd_of_le hi.pow2.sq hj.pow2 (PPow2.sq_le_of_lt hi hj hij)
  calc
    ext i (append j X z) = ext i ((X % j) + z * j)       := rfl
    _                    = ext i (X % j)                 := ext_add_of_dvd_sq_right hi.pos (Dvd.dvd.mul_left this z)
    _                    = ext i (j * (X / j) + (X % j)) := by rw [add_comm]; refine Eq.symm <| ext_add_of_dvd_sq_right hi.pos (Dvd.dvd.mul_right this _)
    _                    = ext i X                         := by simp [div_add_mod]

lemma Seq‚ÇÄ.append {X Y i x y : V} (H : Seq‚ÇÄ X Y) (ppi : PPow2 i) (hi : 4 < i) :
    Seq‚ÇÄ (append i X x) (append i Y y) := by
  rw [Seq‚ÇÄ, ext_append_of_lt, ext_append_of_lt] <;> try simp [ppi, hi]
  exact H

lemma Seq‚Çõ.append {z x y X Y i : V} (h : Seq‚Çõ z X Y) (ppi : PPow2 i) (hz : z < i) :
    Seq‚Çõ z (append (i^2) X x) (append (i^2) Y y) := by
  intro j hj ne2 ppj
  have : j < i^2 := lt_of_lt_of_le (lt_of_le_of_lt hj hz) (by simp)
  have : j^2 < i^2 := sq_lt_sq.mpr (lt_of_le_of_lt hj hz)
  rcases h j hj ne2 ppj with (H | H) <;> simp [Even, Odd]
  ¬∑ left; rw [ext_append_of_lt, ext_append_of_lt, ext_append_of_lt, ext_append_of_lt] <;> try simp [ppi.sq, ppj.sq, lt_of_le_of_lt hj hz, *]
    exact H
  ¬∑ right; rw [ext_append_of_lt, ext_append_of_lt, ext_append_of_lt, ext_append_of_lt] <;> try simp [ppi.sq, ppj.sq, lt_of_le_of_lt hj hz, *]
    exact H

@[simp] lemma exponential_zero_one : Exponential (0 : V) 1 := Or.inl (by simp)

@[simp] lemma exponential_one_two : Exponential (1 : V) 2 :=
  Or.inr ‚ü®
    4, by simp [pow_four_eq_sq_sq, two_pow_two_eq_four],
    2 * 4, by simp [pow_four_eq_sq_sq, two_pow_two_eq_four, sq (4 : V)]; exact le_of_lt two_lt_four,
    by simp [Seq‚ÇÄ, ext, one_lt_four, two_lt_four],
    by simp [Seq‚Çõ]; intro i hi ne2 ppi; exact False.elim <| not_le.mpr (ppi.two_lt ne2) hi,
    ‚ü®4, by simp [two_pow_two_eq_four], by simp, by simp [ext, one_lt_four, two_lt_four]‚ü©‚ü©

lemma pow2_ext_of_seq‚ÇÄ_of_seq‚Çõ {y X Y : V} (h‚ÇÄ : Exponential.Seq‚ÇÄ X Y) (h‚Çõ : Exponential.Seq‚Çõ y X Y)
    {i} (ne2 : i ‚â† 2) (hi : i ‚â§ y^2) (ppi : PPow2 i) : Pow2 (ext i Y) := by
  induction i using order_induction_sigma0
  ¬∑ definability
  case ind i IH =>
    by_cases ei : i = 4
    ¬∑ rcases ei with rfl; simp [h‚ÇÄ.2]
    ¬∑ have ppsq : Pow2 (ext (‚àöi) Y) :=
        IH (‚àöi) (sqrt_lt_self_of_one_lt ppi.one_lt) (ppi.sqrt_ne_two ne2 ei) (le_trans (by simp) hi) (ppi.sqrt ne2)
      rcases show Seq‚Çõ.Even X Y (‚àöi) ‚à® Seq‚Çõ.Odd X Y (‚àöi) from
        h‚Çõ (‚àöi) (sqrt_le_of_le_sq $ hi) (ppi.sqrt_ne_two ne2 ei) (ppi.sqrt ne2) with (heven | hodd)
      ¬∑ have : ext i Y = (ext (‚àöi) Y)^2 := by simpa [ppi.sq_sqrt_eq ne2] using heven.2
        simp [this, ppsq]
      ¬∑ have : ext i Y = 2*(ext (‚àöi) Y)^2 := by simpa [ppi.sq_sqrt_eq ne2] using hodd.2
        simp [this, ppsq]

lemma range_pow2 {x y : V} (h : Exponential x y) : Pow2 y := by
  rcases h with (‚ü®rfl, rfl‚ü© | ‚ü®X, bX, Y, bY, H‚ÇÄ, H‚Çõ, ‚ü®u, hu, ne2, ppu, rfl, rfl‚ü©‚ü©)
  ¬∑ simp
  ¬∑ exact pow2_ext_of_seq‚ÇÄ_of_seq‚Çõ H‚ÇÄ H‚Çõ ne2 hu ppu

lemma le_sq_ext_of_seq‚ÇÄ_of_seq‚Çõ {y X Y : V} (h‚ÇÄ : Exponential.Seq‚ÇÄ X Y) (h‚Çõ : Exponential.Seq‚Çõ y X Y)
    {i} (ne2 : i ‚â† 2) (hi : i ‚â§ y^2) (ppi : PPow2 i) : i ‚â§ (ext i Y)^2 := by
  induction i using order_induction_sigma0
  ¬∑ definability
  case ind i IH =>
    by_cases ei : i = 4
    ¬∑ rcases ei with rfl; simp [h‚ÇÄ.2, two_pow_two_eq_four]
    ¬∑ have IH : ‚àöi ‚â§ (ext (‚àöi) Y)^2 :=
        IH (‚àöi) (sqrt_lt_self_of_one_lt ppi.one_lt) (ppi.sqrt_ne_two ne2 ei) (le_trans (by simp) hi) (ppi.sqrt ne2)
      rcases show Seq‚Çõ.Even X Y (‚àöi) ‚à® Seq‚Çõ.Odd X Y (‚àöi) from
        h‚Çõ (‚àöi) (sqrt_le_of_le_sq $ hi) (ppi.sqrt_ne_two ne2 ei) (ppi.sqrt ne2) with (heven | hodd)
      ¬∑ have : ext i Y = (ext (‚àöi) Y)^2 := by simpa [ppi.sq_sqrt_eq ne2] using heven.2
        have : ‚àöi ‚â§ ext i Y := by simpa [this] using IH
        simpa [ppi.sq_sqrt_eq ne2] using sq_le_sq.mpr this
      ¬∑ have : ext i Y = 2*(ext (‚àöi) Y)^2 := by simpa [ppi.sq_sqrt_eq ne2] using hodd.2
        have : 2 * ‚àöi ‚â§ ext i Y := by simpa [this] using mul_le_mul_left (a := 2) IH
        have : ‚àöi ‚â§ ext i Y := le_trans (le_mul_of_pos_left $ by simp) this
        simpa [ppi.sq_sqrt_eq ne2] using sq_le_sq.mpr this

example {a b c : ‚Ñï} : a * (b * c) = b * (a * c) := by exact Nat.mul_left_comm a b c

lemma two_mul_ext_le_of_seq‚ÇÄ_of_seq‚Çõ {y X Y : V} (h‚ÇÄ : Exponential.Seq‚ÇÄ X Y) (h‚Çõ : Exponential.Seq‚Çõ y X Y)
    {i} (ne2 : i ‚â† 2) (hi : i ‚â§ y^2) (ppi : PPow2 i) : 2 * ext i Y ‚â§ i := by
  induction i using order_induction_sigma0
  ¬∑ definability
  case ind i IH =>
    by_cases ei : i = 4
    ¬∑ rcases ei with rfl; simp [h‚ÇÄ.2, two_mul_two_eq_four]
    ¬∑ have IH : 2 * ext (‚àöi) Y ‚â§ ‚àöi :=
        IH (‚àöi) (sqrt_lt_self_of_one_lt ppi.one_lt) (ppi.sqrt_ne_two ne2 ei) (le_trans (by simp) hi) (ppi.sqrt ne2)
      rcases show Seq‚Çõ.Even X Y (‚àöi) ‚à® Seq‚Çõ.Odd X Y (‚àöi) from
        h‚Çõ (‚àöi) (sqrt_le_of_le_sq $ hi) (ppi.sqrt_ne_two ne2 ei) (ppi.sqrt ne2) with (heven | hodd)
      ¬∑ have : ext i Y = (ext (‚àöi) Y)^2 := by simpa [ppi.sq_sqrt_eq ne2] using heven.2
        calc
          2 * ext i Y ‚â§ 2 * (2 * ext i Y)  := le_mul_of_pos_left (by simp)
          _           = (2 * ext (‚àöi) Y)^2 := by simp [this, sq, mul_left_comm, mul_assoc]
          _           ‚â§ (‚àöi)^2             := sq_le_sq.mpr IH
          _           = i                  := ppi.sq_sqrt_eq ne2
      ¬∑ have : ext i Y = 2*(ext (‚àöi) Y)^2 := by simpa [ppi.sq_sqrt_eq ne2] using hodd.2
        calc
          2 * ext i Y = (2 * ext (‚àöi) Y)^2 := by simp [this, sq, mul_left_comm, mul_assoc]
          _           ‚â§ (‚àöi)^2             := sq_le_sq.mpr IH
          _           = i                  := ppi.sq_sqrt_eq ne2

lemma exponential_exists_sq_of_exponential_even {x y : V} : Exponential (2 * x) y ‚Üí ‚àÉ y', y = y'^2 ‚àß Exponential x y' := by
  rintro (‚ü®hx, rfl‚ü© | ‚ü®X, _, Y, _, hseq‚ÇÄ, hseq‚Çõ, i, hi, ne2, ppi, hXx, hYy‚ü©)
  ¬∑ exact ‚ü®1, by simp [show x = 0 from by simpa using hx]‚ü©
  by_cases ne4 : i = 4
  ¬∑ rcases ne4 with rfl
    have ex : 1 = 2 * x := by simpa [hseq‚ÇÄ.1] using hXx
    have : (2 : V) ‚à£ 1 := by rw [ex]; simp
    have : ¬¨(2 : V) ‚à£ 1 := not_dvd_of_lt (by simp) one_lt_two
    contradiction
  have : Seq‚Çõ.Even X Y (‚àöi) ‚à® Seq‚Çõ.Odd X Y (‚àöi) :=
    hseq‚Çõ (‚àöi) (sqrt_le_of_le_sq hi) (ppi.sqrt_ne_two ne2 ne4) (ppi.sqrt ne2)
  rcases this with (‚ü®hXi, hYi‚ü© | ‚ü®hXi, _‚ü©)
  ¬∑ have hXx : x = ext (‚àöi) X := by simpa [ppi.sq_sqrt_eq ne2, hXx] using hXi
    have hYy : y = (ext (‚àöi) Y)^2 := by simpa [ppi.sq_sqrt_eq ne2, hYy] using hYi
    let X' := X % i
    let Y' := Y % i
    have bX' : X' ‚â§ (ext (‚àöi) Y)^4 := by simp [pow_four_eq_sq_sq, ‚ÜêhYy]; exact le_trans (le_of_lt $ by simp [X', ppi.pos]) hi
    have bY' : Y' ‚â§ (ext (‚àöi) Y)^4 := by simp [pow_four_eq_sq_sq, ‚ÜêhYy]; exact le_trans (le_of_lt $ by simp [Y', ppi.pos]) hi
    have hseq‚Çõ' : Seq‚Çõ (ext (‚àöi) Y) X' Y' :=
      hseq‚Çõ.rem ppi (sq_lt_of_lt_sqrt $ ext_lt Y (ppi.sqrt ne2).pos) (by simp [hYy])
    have hseq‚Çò' : Seq‚Çò x (ext (‚àöi) Y) X' Y' :=
      ‚ü®‚àöi, sqrt_le_of_le_sq $ by simp [‚ÜêhYy, hi], ppi.sqrt_ne_two ne2 ne4, ppi.sqrt ne2,
       by have : ‚àöi < i := sqrt_lt_self_of_one_lt ppi.one_lt
          simp [X', Y', this, ext_rem, ppi, ppi.sqrt ne2, hXx]‚ü©
    have : Exponential x (ext (‚àöi) Y) :=
      Or.inr ‚ü®X', bX', Y', bY', hseq‚ÇÄ.rem ppi (ppi.four_lt ne2 ne4), hseq‚Çõ', hseq‚Çò'‚ü©
    exact ‚ü®ext (‚àöi) Y, hYy, this‚ü©
  ¬∑ have : 2 ‚à£ ext i X := by simp [hXx]
    have : ¬¨2 ‚à£ ext i X := by
      simp [show ext i X = 2 * ext (‚àöi) X + 1 from by simpa [ppi.sq_sqrt_eq ne2] using hXi,
        ‚Üêmod_eq_zero_iff_dvd, one_lt_two]
    contradiction

lemma bit_zero {x y : V} : Exponential x y ‚Üí Exponential (2 * x) (y ^ 2) := by
  rintro (‚ü®hx, rfl‚ü© | ‚ü®X, _, Y, _, hseq‚ÇÄ, hseq‚Çõ, i, hi, ne2, ppi, hXx, hYy‚ü©)
  ¬∑ rcases hx with rfl; simp
  have hxsqi : 2 * x < i ^ 2 := lt_of_lt_of_le (by simp [‚ÜêhXx, ppi.pos]) (two_mul_le_sq ppi.two_le)
  have hysqi : y ^ 2 < i ^ 2 := sq_lt_sq.mpr $ by simp [‚ÜêhYy, ppi.pos]
  have hiisq : i < i^2 := lt_square_of_lt ppi.one_lt
  let X' := append (i^2) X (2 * x)
  let Y' := append (i^2) Y (y ^ 2)
  have bX' : X' ‚â§ (y^2)^4 := by
    have : X' < i^4 := by simpa [pow_four_eq_sq_sq] using append_lt (i^2) X hxsqi
    exact le_trans (le_of_lt this) (pow_le_pow_left' hi 4)
  have bY' : Y' ‚â§ (y^2)^4 := by
    have : Y' < i^4 := by simpa [pow_four_eq_sq_sq] using append_lt (i^2) Y hysqi
    exact le_trans (le_of_lt this) (pow_le_pow_left' hi 4)
  have hseq‚ÇÄ' : Seq‚ÇÄ X' Y' := hseq‚ÇÄ.append ppi.sq (ppi.sq.four_lt ppi.sq_ne_two (ppi.sq_ne_four ne2))
  have hseq‚Çõ' : Seq‚Çõ (y ^ 2) X' Y' := by
    intro j hj jne2 ppj
    by_cases hjy : j ‚â§ y
    ¬∑ have : Seq‚Çõ y X' Y' := hseq‚Çõ.append ppi (by simp [‚ÜêhYy, ppi.pos])
      exact this j hjy jne2 ppj
    ¬∑ have : i = j := by
        have : Pow2 y := by simpa [hYy] using pow2_ext_of_seq‚ÇÄ_of_seq‚Çõ hseq‚ÇÄ hseq‚Çõ ne2 hi ppi
        exact PPow2.sq_uniq this ppi ppj
          ‚ü®by simp [‚ÜêhYy, ppi.pos], hi‚ü© ‚ü®by simpa using hjy, hj‚ü©
      rcases this with rfl
      left; simp [Seq‚Çõ.Even] at*
      rw [ext_append_last, ext_append_last, ext_append_of_lt , ext_append_of_lt] <;>
        simp [ppi, ppi.sq, hxsqi, hysqi, hiisq, hXx, hYy]
  have hseq‚Çò' : Seq‚Çò (2 * x) (y ^ 2) X' Y' :=
    ‚ü®i ^ 2, sq_le_sq.mpr hi, ppi.sq_ne_two, ppi.sq,
     by simp at *; rw [ext_append_last, ext_append_last] <;> try simp [hxsqi, hysqi]‚ü©
  exact Or.inr <| ‚ü®X', bX', Y', bY', hseq‚ÇÄ', hseq‚Çõ', hseq‚Çò'‚ü©

lemma exponential_even {x y : V} : Exponential (2 * x) y ‚Üî ‚àÉ y', y = y'^2 ‚àß Exponential x y' :=
  ‚ü®exponential_exists_sq_of_exponential_even, by rintro ‚ü®y, rfl, h‚ü©; exact bit_zero h‚ü©

lemma exponential_even_sq {x y : V} : Exponential (2 * x) (y ^ 2) ‚Üî Exponential x y :=
  ‚ü®by intro h
      rcases exponential_exists_sq_of_exponential_even h with ‚ü®y', e, h‚ü©
      simpa [show y = y' from by simpa using e] using h,
   bit_zero‚ü©

lemma exponential_exists_sq_of_exponential_odd {x y : V} : Exponential (2 * x + 1) y ‚Üí ‚àÉ y', y = 2 * y'^2 ‚àß Exponential x y' := by
  rintro (‚ü®hx, rfl‚ü© | ‚ü®X, _, Y, _, hseq‚ÇÄ, hseq‚Çõ, i, hi, ne2, ppi, hXx, hYy‚ü©)
  ¬∑ simp at hx
  by_cases ne4 : i = 4
  ¬∑ rcases ne4 with rfl
    have ex : x = 0 := by simpa [hseq‚ÇÄ.1] using hXx
    have ey : y = 2 := by simpa [hseq‚ÇÄ.2] using Eq.symm hYy
    exact ‚ü®1, by simp [ex, ey]‚ü©
  have : Seq‚Çõ.Even X Y (‚àöi) ‚à® Seq‚Çõ.Odd X Y (‚àöi) :=
    hseq‚Çõ (‚àöi) (sqrt_le_of_le_sq hi) (ppi.sqrt_ne_two ne2 ne4) (ppi.sqrt ne2)
  rcases this with (‚ü®hXi, _‚ü© | ‚ü®hXi, hYi‚ü©)
  ¬∑ have hXx : 2 * x + 1 = 2 * ext (‚àöi) X := by simpa [ppi.sq_sqrt_eq ne2, hXx] using hXi
    have : 2 ‚à£ 2 * x + 1 := by rw [hXx]; simp
    have : ¬¨2 ‚à£ 2 * x + 1 := by simp [‚Üêmod_eq_zero_iff_dvd, one_lt_two]
    contradiction
  ¬∑ have hXx : x = ext (‚àöi) X := by simpa [ppi.sq_sqrt_eq ne2, hXx] using hXi
    have hYy : y = 2 * (ext (‚àöi) Y)^2 := by simpa [ppi.sq_sqrt_eq ne2, hYy] using hYi
    let X' := X % i
    let Y' := Y % i
    have bsqi : ‚àöi ‚â§ (ext (‚àöi) Y)^2 := le_sq_ext_of_seq‚ÇÄ_of_seq‚Çõ hseq‚ÇÄ hseq‚Çõ (ppi.sqrt_ne_two ne2 ne4) (le_trans (by simp) hi) (ppi.sqrt ne2)
    have bi : i ‚â§ ext (‚àöi) Y^4 := by simpa [pow_four_eq_sq_sq, ppi.sq_sqrt_eq ne2] using sq_le_sq.mpr bsqi
    have bX' : X' ‚â§ (ext (‚àöi) Y)^4 := le_trans (le_of_lt $ by simp [X', ppi.pos]) bi
    have bY' : Y' ‚â§ (ext (‚àöi) Y)^4 := le_trans (le_of_lt $ by simp [Y', ppi.pos]) bi
    have hseq‚Çõ' : Seq‚Çõ (ext (‚àöi) Y) X' Y' :=
      hseq‚Çõ.rem ppi (sq_lt_of_lt_sqrt $ ext_lt Y (ppi.sqrt ne2).pos) (le_trans (le_sq _)
        (by simp [hYy]))
    have hseq‚Çò' : Seq‚Çò x (ext (‚àöi) Y) X' Y' :=
      ‚ü®‚àöi, bsqi, ppi.sqrt_ne_two ne2 ne4, ppi.sqrt ne2,
       by have : ‚àöi < i := sqrt_lt_self_of_one_lt ppi.one_lt
          simp [X', Y', this, ext_rem, ppi, ppi.sqrt ne2, hXx]‚ü©
    have : Exponential x (ext (‚àöi) Y) :=
      Or.inr ‚ü®X', bX', Y', bY', hseq‚ÇÄ.rem ppi (ppi.four_lt ne2 ne4), hseq‚Çõ', hseq‚Çò'‚ü©
    exact ‚ü®ext (‚àöi) Y, hYy, this‚ü©

lemma bit_one {x y : V} : Exponential x y ‚Üí Exponential (2 * x + 1) (2 * y ^ 2) := by
  rintro (‚ü®hx, rfl‚ü© | ‚ü®X, _, Y, _, hseq‚ÇÄ, hseq‚Çõ, i, hi, ne2, ppi, hXx, hYy‚ü©)
  ¬∑ rcases hx with rfl; simp
  have hxsqi : 2 * x + 1 < i ^ 2 := calc
    2 * x + 1 < 2 * i + 1 := by simp [‚ÜêhXx, ppi.pos]
    _         ‚â§ i ^ 2     := lt_iff_succ_le.mp (two_mul_lt_sq $ ppi.two_lt ne2)
  have hysqi : 2 * y ^ 2 < i ^ 2 := by
    have : 2 * ext i Y ‚â§ i := two_mul_ext_le_of_seq‚ÇÄ_of_seq‚Çõ hseq‚ÇÄ hseq‚Çõ ne2 hi ppi
    suffices 2 * (2 * y ^ 2) < 2 * i ^ 2 from lt_of_mul_lt_mul_left this
    calc
      2 * (2 * y ^ 2) = (2 * y)^2 := by simp [sq, mul_assoc, mul_left_comm y 2]
      _               ‚â§ i^2       := sq_le_sq.mpr (by simpa [hYy] using this)
      _               < 2 * i^2   := lt_mul_of_one_lt_left ppi.sq.pos one_lt_two
  have hiisq : i < i^2 := lt_square_of_lt ppi.one_lt
  let X' := append (i^2) X (2 * x + 1)
  let Y' := append (i^2) Y (2 * (y^2))
  have bX' : X' ‚â§ (2 * y ^ 2)^4 := by
    have : X' < i^4 := by simpa [pow_four_eq_sq_sq] using append_lt (i^2) X hxsqi
    exact le_trans (le_of_lt this) (pow_le_pow_left' (le_trans hi $ by simp) 4)
  have bY' : Y' ‚â§ (2 * y ^ 2)^4 := by
    have : Y' < i^4 := by simpa [pow_four_eq_sq_sq] using append_lt (i^2) Y hysqi
    exact le_trans (le_of_lt this) (pow_le_pow_left' (le_trans hi $ by simp) 4)
  have hseq‚ÇÄ' : Seq‚ÇÄ X' Y' := hseq‚ÇÄ.append ppi.sq (ppi.sq.four_lt ppi.sq_ne_two (ppi.sq_ne_four ne2))
  have hseq‚Çõ' : Seq‚Çõ (2 * y ^ 2) X' Y' := by
    intro j hj jne2 ppj
    by_cases hjy : j ‚â§ y
    ¬∑ have : Seq‚Çõ y X' Y' := hseq‚Çõ.append ppi (by simp [‚ÜêhYy, ppi.pos])
      exact this j hjy jne2 ppj
    ¬∑ have : i = j := by
        have : Pow2 y := by simpa [hYy] using pow2_ext_of_seq‚ÇÄ_of_seq‚Çõ hseq‚ÇÄ hseq‚Çõ ne2 hi ppi
        exact PPow2.two_mul_sq_uniq this ppi ppj
          ‚ü®by simp [‚ÜêhYy, ppi.pos], le_trans hi (by simp)‚ü© ‚ü®by simpa using hjy, hj‚ü©
      rcases this with rfl
      right; simp [Seq‚Çõ.Odd]
      rw [ext_append_last, ext_append_last, ext_append_of_lt , ext_append_of_lt] <;>
        simp [ppi, ppi.sq, hxsqi, hysqi, hiisq, hXx, hYy]
  have hseq‚Çò' : Seq‚Çò (2 * x + 1) (2 * y ^ 2) X' Y' :=
    ‚ü®i ^ 2, sq_le_sq.mpr (le_trans hi $ by simp), ppi.sq_ne_two, ppi.sq,
     by simp [X', Y']; rw [ext_append_last, ext_append_last] <;> try simp [hxsqi, hysqi]‚ü©
  exact Or.inr <| ‚ü®X', bX', Y', bY', hseq‚ÇÄ', hseq‚Çõ', hseq‚Çò'‚ü©

lemma exponential_odd {x y : V} : Exponential (2 * x + 1) y ‚Üî ‚àÉ y', y = 2 * y' ^ 2 ‚àß Exponential x y' :=
  ‚ü®exponential_exists_sq_of_exponential_odd, by rintro ‚ü®y, rfl, h‚ü©; exact bit_one h‚ü©

lemma exponential_odd_two_mul_sq {x y : V} : Exponential (2 * x + 1) (2 * y ^ 2) ‚Üî Exponential x y :=
  ‚ü®by intro h
      rcases exponential_exists_sq_of_exponential_odd h with ‚ü®y', e, h‚ü©
      simpa [show y = y' from by simpa using e] using h,
   bit_one‚ü©

lemma two_le_ext_of_seq‚ÇÄ_of_seq‚Çõ {y X Y : V} (h‚ÇÄ : Exponential.Seq‚ÇÄ X Y) (h‚Çõ : Exponential.Seq‚Çõ y X Y)
    {i} (ne2 : i ‚â† 2) (hi : i ‚â§ y^2) (ppi : PPow2 i) : 2 ‚â§ ext i Y := by
  induction i using order_induction_sigma0
  ¬∑ definability
  case ind i IH =>
    by_cases ei : i = 4
    ¬∑ rcases ei with rfl; simp [h‚ÇÄ.2]
    ¬∑ have IH : 2 ‚â§ ext (‚àöi) Y :=
        IH (‚àöi) (sqrt_lt_self_of_one_lt ppi.one_lt) (ppi.sqrt_ne_two ne2 ei) (le_trans (by simp) hi) (ppi.sqrt ne2)
      rcases show Seq‚Çõ.Even X Y (‚àöi) ‚à® Seq‚Çõ.Odd X Y (‚àöi) from
        h‚Çõ (‚àöi) (sqrt_le_of_le_sq $ hi) (ppi.sqrt_ne_two ne2 ei) (ppi.sqrt ne2) with (heven | hodd)
      ¬∑ calc
          2 ‚â§ ext (‚àöi) Y     := IH
          _ ‚â§ (ext (‚àöi) Y)^2 := by simp
          _ = ext i Y        := by simpa [ppi.sq_sqrt_eq ne2] using Eq.symm heven.2
      ¬∑ calc
          2 ‚â§ ext (‚àöi) Y         := IH
          _ ‚â§ (ext (‚àöi) Y)^2     := by simp
          _ ‚â§ 2 * (ext (‚àöi) Y)^2 := by simp
          _ = ext i Y            := by simpa [ppi.sq_sqrt_eq ne2] using Eq.symm hodd.2

lemma ext_le_ext_of_seq‚ÇÄ_of_seq‚Çõ {y X Y : V} (h‚ÇÄ : Exponential.Seq‚ÇÄ X Y) (h‚Çõ : Exponential.Seq‚Çõ y X Y)
    {i} (ne2 : i ‚â† 2) (hi : i ‚â§ y^2) (ppi : PPow2 i) : ext i X < ext i Y := by
  induction i using order_induction_sigma0
  ¬∑ definability
  case ind i IH =>
    by_cases ne4 : i = 4
    ¬∑ rcases ne4 with rfl; simp [h‚ÇÄ.1, h‚ÇÄ.2, one_lt_two]
    ¬∑ have IH : ext (‚àöi) X < ext (‚àöi) Y :=
      IH (‚àöi) (sqrt_lt_self_of_one_lt ppi.one_lt) (ppi.sqrt_ne_two ne2 ne4) (le_trans (by simp) hi) (ppi.sqrt ne2)
      rcases show Seq‚Çõ.Even X Y (‚àöi) ‚à® Seq‚Çõ.Odd X Y (‚àöi) from
        h‚Çõ (‚àöi) (sqrt_le_of_le_sq $ hi) (ppi.sqrt_ne_two ne2 ne4) (ppi.sqrt ne2) with (heven | hodd)
      ¬∑ calc
          ext i X = 2 * ext (‚àöi) X := by simpa [ppi.sq_sqrt_eq ne2] using heven.1
          _       < 2 * ext (‚àöi) Y := by simpa using IH
          _       ‚â§ ext (‚àöi) Y^2   := two_mul_le_sq (two_le_ext_of_seq‚ÇÄ_of_seq‚Çõ h‚ÇÄ h‚Çõ (ppi.sqrt_ne_two ne2 ne4) (le_trans (by simp) hi) (ppi.sqrt ne2))
          _       = ext i Y        := by simpa [ppi.sq_sqrt_eq ne2] using Eq.symm heven.2
      ¬∑ calc
          ext i X = 2 * ext (‚àöi) X + 1 := by simpa [ppi.sq_sqrt_eq ne2] using hodd.1
          _       < 2 * ext (‚àöi) Y + 1 := by simpa using IH
          _       ‚â§ 2 * ext (‚àöi) Y^2   := lt_iff_succ_le.mp
            (by simp [sq]; exact lt_mul_self (lt_iff_succ_le.mpr $ by
                  simp [one_add_one_eq_two]; exact (two_le_ext_of_seq‚ÇÄ_of_seq‚Çõ h‚ÇÄ h‚Çõ (ppi.sqrt_ne_two ne2 ne4) (le_trans (by simp) hi) (ppi.sqrt ne2))))
          _       = ext i Y            := by simpa [ppi.sq_sqrt_eq ne2] using Eq.symm hodd.2

lemma range_pos {x y : V} (h : Exponential x y) : 0 < y := by
  rcases h with (‚ü®rfl, rfl‚ü© | ‚ü®X, bX, Y, bY, H‚ÇÄ, H‚Çõ, ‚ü®u, hu, ne2, ppu, rfl, rfl‚ü©‚ü©)
  ¬∑ simp
  ¬∑ have : 2 ‚â§ ext u Y := two_le_ext_of_seq‚ÇÄ_of_seq‚Çõ H‚ÇÄ H‚Çõ ne2 hu ppu
    exact lt_of_lt_of_le (by simp) this

lemma lt {x y : V} (h : Exponential x y) : x < y := by
  rcases h with (‚ü®rfl, rfl‚ü© | ‚ü®X, bX, Y, bY, H‚ÇÄ, H‚Çõ, ‚ü®u, hu, ne2, ppu, rfl, rfl‚ü©‚ü©)
  ¬∑ simp
  ¬∑ exact ext_le_ext_of_seq‚ÇÄ_of_seq‚Çõ H‚ÇÄ H‚Çõ ne2 hu ppu

lemma not_exponential_of_le {x y : V} (h : x ‚â§ y) : ¬¨Exponential y x := by
  intro hxy; exact not_le.mpr (lt hxy) h

@[simp] lemma one_not_even (a : V) : 1 ‚â† 2 * a := by
  intro h
  have : (2 : V) ‚à£ 1 := by rw [h]; simp
  have : ¬¨(2 : V) ‚à£ 1 := not_dvd_of_lt (by simp) one_lt_two
  contradiction

@[simp] lemma exponential_two_four : Exponential (2 : V) 4 := by
  simpa [two_pow_two_eq_four] using (show Exponential (1 : V) 2 from by simp).bit_zero

lemma exponential_succ {x y : V} : Exponential (x + 1) y ‚Üî ‚àÉ z, y = 2 * z ‚àß Exponential x z := by
  suffices x < y ‚Üí (Exponential (x + 1) y ‚Üî ‚àÉ z ‚â§ y, y = 2 * z ‚àß Exponential x z) by
    by_cases hxy : x < y
    ¬∑ simp [this hxy]
      exact ‚ü®by rintro ‚ü®z, _, rfl, hz‚ü©; exact ‚ü®z, rfl, hz‚ü©,
             by rintro ‚ü®z, rfl, hz‚ü©; exact ‚ü®z, by simpa using hz‚ü©‚ü©
    ¬∑ simp [not_exponential_of_le (show y ‚â§ x + 1 from le_add_right (by simpa using hxy))]
      rintro z rfl
      exact not_exponential_of_le (le_trans le_two_mul_left $  by simpa using hxy)
  ¬∑ revert x
    induction y using order_induction_sigma0
    ¬∑ definability
    case ind y IH =>
      intro x hxy
      rcases even_or_odd x with ‚ü®x, (rfl | rfl)‚ü©
      ¬∑ constructor
        ¬∑ intro H
          rcases exponential_odd.mp H with ‚ü®y, rfl, H'‚ü©
          exact ‚ü®y^2, by simp, rfl, H'.bit_zero‚ü©
        ¬∑ rintro ‚ü®y, hy, rfl, H‚ü©
          rcases exponential_even.mp H with ‚ü®y, rfl, H'‚ü©
          exact H'.bit_one
      ¬∑ constructor
        ¬∑ intro H
          have : Exponential (2 * (x + 1)) y := by simpa [mul_add, add_assoc, one_add_one_eq_two] using H
          rcases exponential_even.mp this with ‚ü®y, rfl, H'‚ü©
          have : 1 < y := by
            simpa using (show 1 < y^2 from lt_of_le_of_lt (by simp) hxy)
          have : Exponential (x + 1) y ‚Üî ‚àÉ z ‚â§ y, y = 2 * z ‚àß Exponential x z :=
            IH y (lt_square_of_lt $ this) (lt_trans (by simp) H'.lt)
          rcases this.mp H' with ‚ü®y, _, rfl, H''‚ü©
          exact ‚ü®2 * y ^ 2, by simp [sq, mul_assoc, mul_left_comm y 2],
            by simp [sq, mul_assoc, mul_left_comm y 2], H''.bit_one‚ü©
        ¬∑ rintro ‚ü®y, _, rfl, H‚ü©
          rcases exponential_odd.mp H with ‚ü®y, rfl, H'‚ü©
          by_cases ne1 : y = 1
          ¬∑ rcases ne1 with rfl
            rcases (show x = 0 from by simpa using H'.lt)
            simp [one_add_one_eq_two, two_mul_two_eq_four]
          have : y < y^2 := lt_square_of_lt $ one_lt_iff_two_le.mpr $ H'.range_pow2.two_le ne1
          have : Exponential (x + 1) (2 * y) ‚Üî ‚àÉ z ‚â§ 2 * y, 2 * y = 2 * z ‚àß Exponential x z :=
            IH (2 * y) (by simp; exact lt_of_lt_of_le this le_two_mul_left)
              (lt_of_lt_of_le H'.lt $ by simp)
          have : Exponential (x + 1) (2 * y) := this.mpr ‚ü®y, by simp, rfl, H'‚ü©
          simpa [sq, mul_add, add_assoc, mul_assoc, one_add_one_eq_two, mul_left_comm y 2] using this.bit_zero

lemma exponential_succ_mul_two {x y : V} : Exponential (x + 1) (2 * y) ‚Üî Exponential x y :=
  ‚ü®by intro h; rcases exponential_succ.mp h with ‚ü®y', e, h‚ü©; simpa [show y = y' from by simpa using e] using h,
   by intro h; exact exponential_succ.mpr ‚ü®y, rfl, h‚ü©‚ü©

alias ‚ü®of_succ_two_mul, succ‚ü© := exponential_succ_mul_two

lemma one_le_ext_of_seq‚ÇÄ_of_seq‚Çõ {y X Y : V} (h‚ÇÄ : Exponential.Seq‚ÇÄ X Y) (h‚Çõ : Exponential.Seq‚Çõ y X Y)
    {i} (ne2 : i ‚â† 2) (hi : i ‚â§ y^2) (ppi : PPow2 i) : 1 ‚â§ ext i X := by
  induction i using order_induction_sigma0
  ¬∑ definability
  case ind i IH =>
    by_cases ne4 : i = 4
    ¬∑ rcases ne4 with rfl; simp [h‚ÇÄ.1, h‚ÇÄ.2, one_lt_two]
    ¬∑ have IH : 1 ‚â§ ext (‚àöi) X :=
      IH (‚àöi) (sqrt_lt_self_of_one_lt ppi.one_lt) (ppi.sqrt_ne_two ne2 ne4) (le_trans (by simp) hi) (ppi.sqrt ne2)
      rcases show Seq‚Çõ.Even X Y (‚àöi) ‚à® Seq‚Çõ.Odd X Y (‚àöi) from
        h‚Çõ (‚àöi) (sqrt_le_of_le_sq $ hi) (ppi.sqrt_ne_two ne2 ne4) (ppi.sqrt ne2) with (heven | hodd)
      ¬∑ have : ext i X = 2 * ext (‚àöi) X := by simpa [ppi.sq_sqrt_eq ne2] using heven.1
        exact le_trans IH (by simp [this])
      ¬∑ have : ext i X = 2 * ext (‚àöi) X + 1 := by simpa [ppi.sq_sqrt_eq ne2] using hodd.1
        simp [this]

lemma zero_uniq {y : V} (h : Exponential 0 y) : y = 1 := by
  rcases h with (‚ü®_, rfl‚ü© | ‚ü®X, _, Y, _, H‚ÇÄ, H‚Çõ, ‚ü®u, hu, ne2, ppu, hX, _‚ü©‚ü©)
  ¬∑ rfl
  ¬∑ have : 1 ‚â§ ext u X  := one_le_ext_of_seq‚ÇÄ_of_seq‚Çõ H‚ÇÄ H‚Çõ ne2 hu ppu
    simp [hX] at this

@[simp] lemma zero_uniq_iff {y : V} : Exponential 0 y ‚Üî y = 1 :=
  ‚ü®zero_uniq, by rintro rfl; simp‚ü©

lemma succ_lt_s {y : V} (h : Exponential (x + 1) y) : 2 ‚â§ y := by
  rcases h with (‚ü®h, rfl‚ü© | ‚ü®X, _, Y, _, H‚ÇÄ, H‚Çõ, ‚ü®u, hu, ne2, ppu, _, hY‚ü©‚ü©)
  ¬∑ simp at h
  ¬∑ simpa [hY] using two_le_ext_of_seq‚ÇÄ_of_seq‚Çõ H‚ÇÄ H‚Çõ ne2 hu ppu

protected lemma uniq {x y‚ÇÅ y‚ÇÇ : V} : Exponential x y‚ÇÅ ‚Üí Exponential x y‚ÇÇ ‚Üí y‚ÇÅ = y‚ÇÇ := by
  intro h‚ÇÅ h‚ÇÇ
  wlog h : y‚ÇÅ ‚â§ y‚ÇÇ
  ¬∑ exact Eq.symm <| this h‚ÇÇ h‚ÇÅ (show y‚ÇÇ ‚â§ y‚ÇÅ from le_of_not_ge h)
  revert x h y‚ÇÅ
  suffices ‚àÄ x < y‚ÇÇ, ‚àÄ y‚ÇÅ ‚â§ y‚ÇÇ, Exponential x y‚ÇÅ ‚Üí Exponential x y‚ÇÇ ‚Üí y‚ÇÅ = y‚ÇÇ by
    intro x y‚ÇÅ h‚ÇÅ h‚ÇÇ hy; exact this x h‚ÇÇ.lt y‚ÇÅ hy h‚ÇÅ h‚ÇÇ
  induction y‚ÇÇ using order_induction_sigma0
  ¬∑ definability
  case ind y‚ÇÇ IH =>
    intro x _ y‚ÇÅ h h‚ÇÅ h‚ÇÇ
    rcases zero_or_succ x with (rfl | ‚ü®x, rfl‚ü©)
    ¬∑ simp [h‚ÇÅ.zero_uniq, h‚ÇÇ.zero_uniq]
    ¬∑ rcases exponential_succ.mp h‚ÇÅ with ‚ü®y‚ÇÅ, rfl, h‚ÇÅ'‚ü©
      rcases exponential_succ.mp h‚ÇÇ with ‚ü®y‚ÇÇ, rfl, h‚ÇÇ'‚ü©
      have : y‚ÇÅ = y‚ÇÇ := IH y‚ÇÇ (lt_mul_of_pos_of_one_lt_left h‚ÇÇ'.range_pos one_lt_two)
        x h‚ÇÇ'.lt y‚ÇÅ (by simpa using h) h‚ÇÅ' h‚ÇÇ'
      simp [this]

protected lemma inj {x‚ÇÅ x‚ÇÇ y : V} : Exponential x‚ÇÅ y ‚Üí Exponential x‚ÇÇ y ‚Üí x‚ÇÅ = x‚ÇÇ := by
  intro h‚ÇÅ h‚ÇÇ
  revert x‚ÇÅ x‚ÇÇ h‚ÇÅ h‚ÇÇ
  suffices ‚àÄ x‚ÇÅ < y, ‚àÄ x‚ÇÇ < y, Exponential x‚ÇÅ y ‚Üí Exponential x‚ÇÇ y ‚Üí x‚ÇÅ = x‚ÇÇ by
    intro x‚ÇÅ x‚ÇÇ h‚ÇÅ h‚ÇÇ; exact this x‚ÇÅ h‚ÇÅ.lt x‚ÇÇ h‚ÇÇ.lt h‚ÇÅ h‚ÇÇ
  induction y using order_induction_sigma0
  ¬∑ definability
  case ind y IH =>
    intro x‚ÇÅ _ x‚ÇÇ _ h‚ÇÅ h‚ÇÇ
    rcases zero_or_succ x‚ÇÅ with (rfl | ‚ü®x‚ÇÅ, rfl‚ü©) <;> rcases zero_or_succ x‚ÇÇ with (rfl | ‚ü®x‚ÇÇ, rfl‚ü©)
    ¬∑ rfl
    ¬∑ rcases h‚ÇÅ.zero_uniq
      rcases exponential_succ.mp h‚ÇÇ with ‚ü®z, hz‚ü©
      simp at hz
    ¬∑ rcases h‚ÇÇ.zero_uniq
      rcases exponential_succ.mp h‚ÇÅ with ‚ü®z, hz‚ü©
      simp at hz
    ¬∑ rcases exponential_succ.mp h‚ÇÅ with ‚ü®y, rfl, hy‚ÇÅ‚ü©
      have hy‚ÇÇ : Exponential x‚ÇÇ y := h‚ÇÇ.of_succ_two_mul
      have : x‚ÇÅ = x‚ÇÇ :=
        IH y (lt_mul_of_pos_of_one_lt_left hy‚ÇÅ.range_pos one_lt_two)
          x‚ÇÅ hy‚ÇÅ.lt x‚ÇÇ hy‚ÇÇ.lt hy‚ÇÅ hy‚ÇÇ
      simp [this]

lemma exponential_elim {x y : V} : Exponential x y ‚Üî (x = 0 ‚àß y = 1) ‚à® ‚àÉ x', ‚àÉ y', x = x' + 1 ‚àß y = 2 * y' ‚àß Exponential x' y' :=
  ‚ü®by intro h
      rcases zero_or_succ x with (rfl | ‚ü®x', rfl‚ü©)
      ¬∑ simp [h.zero_uniq]
      ¬∑ right; rcases exponential_succ.mp h with ‚ü®y', rfl, H‚ü©
        exact ‚ü®x', y', rfl, rfl, H‚ü©,
   by rintro (‚ü®rfl, rfl‚ü© | ‚ü®x, y, rfl, rfl, h‚ü©)
      ¬∑ simp
      ¬∑ exact h.succ‚ü©

lemma monotone {x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ : V} : Exponential x‚ÇÅ y‚ÇÅ ‚Üí Exponential x‚ÇÇ y‚ÇÇ ‚Üí x‚ÇÅ < x‚ÇÇ ‚Üí y‚ÇÅ < y‚ÇÇ := by
  suffices ‚àÄ x‚ÇÅ < y‚ÇÅ, ‚àÄ y‚ÇÇ ‚â§ y‚ÇÅ, ‚àÄ x‚ÇÇ < y‚ÇÇ, Exponential x‚ÇÅ y‚ÇÅ ‚Üí Exponential x‚ÇÇ y‚ÇÇ ‚Üí x‚ÇÇ ‚â§ x‚ÇÅ by
    intro h‚ÇÅ h‚ÇÇ; contrapose; simp
    intro hy
    exact this x‚ÇÅ h‚ÇÅ.lt y‚ÇÇ hy x‚ÇÇ h‚ÇÇ.lt h‚ÇÅ h‚ÇÇ
  induction y‚ÇÅ using order_induction_sigma0
  ¬∑ definability
  case ind y‚ÇÅ IH =>
    intro x‚ÇÅ _ y‚ÇÇ hy x‚ÇÇ _ h‚ÇÅ h‚ÇÇ
    rcases zero_or_succ x‚ÇÅ with (rfl | ‚ü®x‚ÇÅ, rfl‚ü©) <;> rcases zero_or_succ x‚ÇÇ with (rfl | ‚ü®x‚ÇÇ, rfl‚ü©)
    ¬∑ simp
    ¬∑ rcases show y‚ÇÅ = 1 from h‚ÇÅ.zero_uniq
      rcases le_one_iff_eq_zero_or_one.mp hy with (rfl | rfl)
      ¬∑ have := h‚ÇÇ.range_pos; simp at this
      ¬∑ exact False.elim <| not_lt.mpr h‚ÇÇ.succ_lt_s one_lt_two
    ¬∑ simp
    ¬∑ rcases exponential_succ.mp h‚ÇÅ with ‚ü®y‚ÇÅ, rfl, h‚ÇÅ'‚ü©
      rcases exponential_succ.mp h‚ÇÇ with ‚ü®y‚ÇÇ, rfl, h‚ÇÇ'‚ü©
      have : x‚ÇÇ ‚â§ x‚ÇÅ := IH y‚ÇÅ (lt_mul_of_pos_of_one_lt_left h‚ÇÅ'.range_pos one_lt_two)
        x‚ÇÅ h‚ÇÅ'.lt y‚ÇÇ (le_of_mul_le_mul_left hy (by simp)) x‚ÇÇ h‚ÇÇ'.lt h‚ÇÅ' h‚ÇÇ'
      simpa using this

lemma monotone_le {x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ : V} (h‚ÇÅ : Exponential x‚ÇÅ y‚ÇÅ) (h‚ÇÇ : Exponential x‚ÇÇ y‚ÇÇ) : x‚ÇÅ ‚â§ x‚ÇÇ ‚Üí y‚ÇÅ ‚â§ y‚ÇÇ := by
  rintro (rfl | h)
  ¬∑ exact (h‚ÇÅ.uniq h‚ÇÇ).le
  ¬∑ exact le_of_lt (monotone h‚ÇÅ h‚ÇÇ h)

lemma monotone_iff {x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ : V} (h‚ÇÅ : Exponential x‚ÇÅ y‚ÇÅ) (h‚ÇÇ : Exponential x‚ÇÇ y‚ÇÇ) : x‚ÇÅ < x‚ÇÇ ‚Üî y‚ÇÅ < y‚ÇÇ := by
  constructor
  ¬∑ exact monotone h‚ÇÅ h‚ÇÇ
  ¬∑ contrapose; simp; exact monotone_le h‚ÇÇ h‚ÇÅ

lemma monotone_le_iff {x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ : V} (h‚ÇÅ : Exponential x‚ÇÅ y‚ÇÅ) (h‚ÇÇ : Exponential x‚ÇÇ y‚ÇÇ) : x‚ÇÅ ‚â§ x‚ÇÇ ‚Üî y‚ÇÅ ‚â§ y‚ÇÇ := by
  constructor
  ¬∑ exact monotone_le h‚ÇÅ h‚ÇÇ
  ¬∑ contrapose; simp; exact monotone h‚ÇÇ h‚ÇÅ

lemma add_mul {x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ : V} (h‚ÇÅ : Exponential x‚ÇÅ y‚ÇÅ) (h‚ÇÇ : Exponential x‚ÇÇ y‚ÇÇ) : Exponential (x‚ÇÅ + x‚ÇÇ) (y‚ÇÅ * y‚ÇÇ) := by
  wlog hy : y‚ÇÅ ‚â• y‚ÇÇ
  ¬∑ simpa [add_comm, mul_comm] using this h‚ÇÇ h‚ÇÅ (le_of_not_ge hy)
  revert y‚ÇÇ
  suffices ‚àÄ y‚ÇÇ ‚â§ y‚ÇÅ, Exponential x‚ÇÇ y‚ÇÇ ‚Üí Exponential (x‚ÇÅ + x‚ÇÇ) (y‚ÇÅ * y‚ÇÇ) by
    intro y‚ÇÇ h‚ÇÇ hy; exact this y‚ÇÇ hy h‚ÇÇ
  induction x‚ÇÇ using induction_sigma0
  ¬∑ definability
  case zero =>
    intro y‚ÇÇ _ h‚ÇÇ
    simpa [show y‚ÇÇ = 1 from h‚ÇÇ.zero_uniq] using h‚ÇÅ
  case succ x‚ÇÇ IH =>
    intro y‚ÇÇ hy h‚ÇÇ
    rcases exponential_succ.mp h‚ÇÇ with ‚ü®y‚ÇÇ, rfl, H‚ÇÇ‚ü©
    have : Exponential (x‚ÇÅ + x‚ÇÇ) (y‚ÇÅ * y‚ÇÇ) := IH y‚ÇÇ (le_trans (by simp) hy) H‚ÇÇ
    simpa [‚Üêadd_assoc, mul_left_comm y‚ÇÅ 2 y‚ÇÇ] using this.succ

end Exponential

end ISigma‚ÇÄ

section ISigma‚ÇÅ

variable [V ‚äß‚Çò* ùêàùö∫‚ÇÅ]

namespace Exponential

lemma range_exists (x : V) : ‚àÉ y, Exponential x y := by
  induction x using induction_sigma1
  ¬∑ definability
  case zero => exact ‚ü®1, by simp‚ü©
  case succ x IH =>
    rcases IH with ‚ü®y, IH‚ü©
    exact ‚ü®2 * y, IH.succ‚ü©

lemma range_exists_unique (x : V) : ‚àÉ! y, Exponential x y := by
  rcases range_exists x with ‚ü®y, h‚ü©
  exact ExistsUnique.intro y h (by intro y' h'; exact h'.uniq h)

end Exponential

instance : Exp V := ‚ü®fun a ‚Ü¶ Classical.choose! (Exponential.range_exists_unique a)‚ü©

section exponential

lemma exponential_exp (a : V) : Exponential a (exp a) := Classical.choose!_spec (Exponential.range_exists_unique a)

lemma exponential_graph {a b : V} : a = exp b ‚Üî Exponential b a := Classical.choose!_eq_iff _

def _root_.LO.FirstOrder.Arith.expDef : ùö∫‚ÇÄ.Semisentence 2 := .mkSigma ‚Äúx y. !exponentialDef.val y x‚Äù (by simp)

lemma exp_defined_deltaZero : ùö∫‚ÇÄ-Function‚ÇÅ (Exp.exp : V ‚Üí V) via expDef := by
  intro v; simp [expDef, exponential_graph]

@[simp] lemma exp_defined_iff (v) :
    Semiformula.Evalbm V v expDef.val ‚Üî v 0 = Exp.exp (v 1) := exp_defined_deltaZero.df.iff v

instance exp_definable_deltaZero : ùö∫‚ÇÄ-Function‚ÇÅ (Exp.exp : V ‚Üí V) := exp_defined_deltaZero.to_definable

lemma exp_of_exponential {a b : V} (h : Exponential a b) : exp a = b :=
  Eq.symm <| exponential_graph.mpr h

lemma exp_inj : Function.Injective (Exp.exp : V ‚Üí V) := Œª a _ H ‚Ü¶
  (exponential_exp a).inj (exponential_graph.mp H)

@[simp] lemma exp_zero : exp (0 : V) = 1 := exp_of_exponential (by simp)

@[simp] lemma exp_one : exp (1 : V) = 2 := exp_of_exponential (by simp)

lemma exp_succ (a : V) : exp (a + 1) = 2 * exp a :=
  exp_of_exponential <| Exponential.exponential_succ_mul_two.mpr <| exponential_exp a

lemma exp_even (a : V) : exp (2 * a) = (exp a)^2 :=
  exp_of_exponential <| Exponential.exponential_even_sq.mpr <| exponential_exp a

@[simp] lemma lt_exp (a : V) : a < exp a := (exponential_exp a).lt

@[simp] lemma exp_pos (a : V) : 0 < exp a := (exponential_exp a).range_pos

@[simp] lemma one_le_exp (a : V) : 1 ‚â§ exp a := pos_iff_one_le.mp (by simp)

@[simp] lemma exp_pow2 (a : V) : Pow2 (exp a) := (exponential_exp a).range_pow2

@[simp] lemma exp_monotone {a b : V} : exp a < exp b ‚Üî a < b :=
  Iff.symm <| Exponential.monotone_iff (exponential_exp a) (exponential_exp b)

@[simp] lemma exp_monotone_le {a b : V} : exp a ‚â§ exp b ‚Üî a ‚â§ b :=
  Iff.symm <| Exponential.monotone_le_iff (exponential_exp a) (exponential_exp b)

lemma nat_cast_exp (n : ‚Ñï) : (exp n : ‚Ñï) = exp (n : V) := by
  induction' n with n ih
  ¬∑ simp
  ¬∑ simp [exp_succ, ih]

end exponential

end ISigma‚ÇÅ

end LO.Arith

end
