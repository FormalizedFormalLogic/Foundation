import Arithmetization.ISigmaOne.HFS

noncomputable section

namespace LO.Arith

open FirstOrder FirstOrder.Arith

section

variable {V : Type*} [ORingStruc V]

variable (V)

structure _root_.LO.FirstOrder.Arith.LDef where
  func : ùö∫‚ÇÄ.Semisentence 2
  rel : ùö∫‚ÇÄ.Semisentence 2

protected structure Language where
  Func (arity : V) : V ‚Üí Prop
  Rel (arity : V) : V ‚Üí Prop

variable {V}

namespace Language

protected class Defined (L : Arith.Language V) (pL : outParam LDef) where
  func : ùö∫‚ÇÄ-Relation L.Func via pL.func
  rel : ùö∫‚ÇÄ-Relation L.Rel via pL.rel

variable {L : Arith.Language V} {pL : LDef} [L.Defined pL]

@[simp] lemma Defined.eval_func (v) :
    Semiformula.Evalbm V v pL.func.val ‚Üî L.Func (v 0) (v 1) := Defined.func.df.iff v

@[simp] lemma Defined.eval_rel_iff (v) :
    Semiformula.Evalbm V v pL.rel.val ‚Üî L.Rel (v 0) (v 1) := Defined.rel.df.iff v

instance Defined.func_definable : ùö∫‚ÇÄ-Relation L.Func := Defined.func.to_definable

instance Defined.rel_definable : ùö∫‚ÇÄ-Relation L.Rel := Defined.rel.to_definable

@[simp, definability] instance Defined.func_definable' (‚Ñå) : ‚Ñå-Relation L.Func :=
  HierarchySymbol.Boldface.of_zero Defined.func_definable

@[simp, definability] instance Defined.rel_definable' (‚Ñå) : ‚Ñå-Relation L.Rel :=
  HierarchySymbol.Boldface.of_zero Defined.rel_definable

end Language

end

section

variable {L‚ÇÄ : Language} [L‚ÇÄ.ORing]

variable {L : Language} [(k : ‚Ñï) ‚Üí Encodable (L.Func k)] [(k : ‚Ñï) ‚Üí Encodable (L.Rel k)]

instance (k) : Semiterm.Operator.GoedelNumber L‚ÇÄ (L.Func k) := ‚ü®fun f ‚Ü¶ Semiterm.Operator.numeral L‚ÇÄ (Encodable.encode f)‚ü©

instance (k) : Semiterm.Operator.GoedelNumber L‚ÇÄ (L.Rel k) := ‚ü®fun r ‚Ü¶ Semiterm.Operator.numeral L‚ÇÄ (Encodable.encode r)‚ü©

variable (L)

class DefinableLanguage extends Arith.LDef where
  func_iff {k c : ‚Ñï} :
    c ‚àà Set.range (Encodable.encode : L.Func k ‚Üí ‚Ñï) ‚Üî ‚Ñï ‚äß/![k, c] func.val
  rel_iff {k c : ‚Ñï} :
    c ‚àà Set.range (Encodable.encode : L.Rel k ‚Üí ‚Ñï) ‚Üî ‚Ñï ‚äß/![k, c] rel.val

def _root_.LO.FirstOrder.Language.lDef [d : DefinableLanguage L] : LDef := d.toLDef

variable {L}

variable [DefinableLanguage L]

variable {V : Type*} [ORingStruc V]

variable (L V)

def _root_.LO.FirstOrder.Language.codeIn : Arith.Language V where
  Func := fun x y ‚Ü¶ V ‚äß/![x, y] L.lDef.func.val
  Rel := fun x y ‚Ü¶ V ‚äß/![x, y] L.lDef.rel.val

lemma _root_.LO.FirstOrder.Language.codeIn_func_def : (L.codeIn V).Func = fun x y ‚Ü¶ V ‚äß/![x, y] L.lDef.func.val := rfl

variable {L V}

variable [V ‚äß‚Çò* ùêèùêÄ‚Åª]

instance : (L.codeIn V).Defined L.lDef where
  func := by intro v; simp [Language.codeIn, ‚ÜêMatrix.fun_eq_vec‚ÇÇ]
  rel := by intro v; simp [Language.codeIn, ‚ÜêMatrix.fun_eq_vec‚ÇÇ]

instance : GoedelQuote (L.Func k) V := ‚ü®fun f ‚Ü¶ ‚Üë(Encodable.encode f)‚ü©

instance : GoedelQuote (L.Rel k) V := ‚ü®fun R ‚Ü¶ ‚Üë(Encodable.encode R)‚ü©

omit [(k : ‚Ñï) ‚Üí Encodable (L.Rel k)] [DefinableLanguage L] in
lemma quote_func_def (f : L.Func k) : (‚åúf‚åù : V) = ‚Üë(Encodable.encode f) := rfl

omit [(k : ‚Ñï) ‚Üí Encodable (L.Func k)] [DefinableLanguage L] in
lemma quote_rel_def (R : L.Rel k) : (‚åúR‚åù : V) = ‚Üë(Encodable.encode R) := rfl

lemma codeIn_func_quote_iff {k x : ‚Ñï} : (L.codeIn V).Func k x ‚Üî ‚àÉ f : L.Func k, Encodable.encode f = x :=
  have : V ‚äß/![k, x] L.lDef.func.val ‚Üî ‚Ñï ‚äß/![k, x] L.lDef.func.val := by
    simpa using models_iff_of_Sigma0 (V := V) (œÉ := L.lDef.func.val) (by simp) (e := ![k, x])
  Iff.trans this <| Iff.trans (DefinableLanguage.func_iff.symm) <| (by simp)

lemma codeIn_rel_quote_iff {k x : ‚Ñï} : (L.codeIn V).Rel k x ‚Üî ‚àÉ R : L.Rel k, Encodable.encode R = x :=
  have : V ‚äß/![k, x] L.lDef.rel.val ‚Üî ‚Ñï ‚äß/![k, x] L.lDef.rel.val := by
    simpa using models_iff_of_Sigma0 (V := V) (œÉ := L.lDef.rel.val) (by simp) (e := ![k, x])
  Iff.trans this <| Iff.trans (DefinableLanguage.rel_iff.symm) <| (by simp [quote_rel_def])

@[simp] lemma codeIn_func_quote {k : ‚Ñï} (f : L.Func k) : (L.codeIn V).Func k ‚åúf‚åù :=
  (codeIn_func_quote_iff (V := V)).mpr ‚ü®f, rfl‚ü©

@[simp] lemma codeIn_rel_quote {k : ‚Ñï} (r : L.Rel k) : (L.codeIn V).Rel k ‚åúr‚åù :=
  (codeIn_rel_quote_iff (V := V)).mpr ‚ü®r, rfl‚ü©

omit [(k : ‚Ñï) ‚Üí Encodable (L.Rel k)] [DefinableLanguage L] in
@[simp] lemma quote_func_inj (f‚ÇÅ f‚ÇÇ : L.Func k) : (‚åúf‚ÇÅ‚åù : V) = (‚åúf‚ÇÇ‚åù : V) ‚Üî f‚ÇÅ = f‚ÇÇ := by
  simp [quote_func_def]

omit [(k : ‚Ñï) ‚Üí Encodable (L.Func k)] [DefinableLanguage L] in
@[simp] lemma quote_rel_inj (R‚ÇÅ R‚ÇÇ : L.Rel k) : (‚åúR‚ÇÅ‚åù : V) = (‚åúR‚ÇÇ‚åù : V) ‚Üî R‚ÇÅ = R‚ÇÇ := by
  simp [quote_rel_def]

omit [(k : ‚Ñï) ‚Üí Encodable (L.Rel k)] [DefinableLanguage L] in
@[simp] lemma coe_quote_func_nat (f : L.Func k) : ((‚åúf‚åù : ‚Ñï) : V) = (‚åúf‚åù : V) := by
  simp [quote_func_def]

omit [(k : ‚Ñï) ‚Üí Encodable (L.Func k)] [DefinableLanguage L] in
@[simp] lemma coe_quote_rel_nat (R : L.Rel k) : ((‚åúR‚åù : ‚Ñï) : V) = (‚åúR‚åù : V) := by
  simp [quote_rel_def]

end

/-- TODO: move to Basic/Syntax/Language.lean-/
lemma _root_.LO.FirstOrder.Language.ORing.of_mem_range_encode_func {k f : ‚Ñï} :
    f ‚àà Set.range (Encodable.encode : FirstOrder.Language.Func ‚Ñí‚Çí·µ£ k ‚Üí ‚Ñï) ‚Üî
    (k = 0 ‚àß f = 0) ‚à® (k = 0 ‚àß f = 1) ‚à® (k = 2 ‚àß f = 0) ‚à® (k = 2 ‚àß f = 1) := by
  constructor
  ¬∑ rintro ‚ü®f, rfl‚ü©
    match k, f with
    | 0, Language.ORing.Func.zero => simp; rfl
    | 0, Language.ORing.Func.one => simp; rfl
    | 2, Language.ORing.Func.add => simp; rfl
    | 2, Language.ORing.Func.mul => simp; rfl
  ¬∑ rintro (‚ü®rfl, rfl‚ü© | ‚ü®rfl, rfl‚ü© | ‚ü®rfl, rfl‚ü© | ‚ü®rfl, rfl‚ü©)
    ¬∑ exact ‚ü®Language.ORing.Func.zero, rfl‚ü©
    ¬∑ exact ‚ü®Language.ORing.Func.one, rfl‚ü©
    ¬∑ exact ‚ü®Language.ORing.Func.add, rfl‚ü©
    ¬∑ exact ‚ü®Language.ORing.Func.mul, rfl‚ü©

/-- TODO: move to Basic/Syntax/Language.lean-/
lemma _root_.LO.FirstOrder.Language.ORing.of_mem_range_encode_rel {k r : ‚Ñï} :
    r ‚àà Set.range (Encodable.encode : FirstOrder.Language.Rel ‚Ñí‚Çí·µ£ k ‚Üí ‚Ñï) ‚Üî
    (k = 2 ‚àß r = 0) ‚à® (k = 2 ‚àß r = 1) := by
  constructor
  ¬∑ rintro ‚ü®r, rfl‚ü©
    match k, r with
    | 2, Language.ORing.Rel.eq => simp; rfl
    | 2, Language.ORing.Rel.lt => simp; rfl
  ¬∑ rintro (‚ü®rfl, rfl‚ü© | ‚ü®rfl, rfl‚ü©)
    ¬∑ exact ‚ü®Language.ORing.Rel.eq, rfl‚ü©
    ¬∑ exact ‚ü®Language.ORing.Rel.lt, rfl‚ü©

instance : DefinableLanguage ‚Ñí‚Çí·µ£ where
  func := .mkSigma ‚Äúk f. (k = 0 ‚àß f = 0) ‚à® (k = 0 ‚àß f = 1) ‚à® (k = 2 ‚àß f = 0) ‚à® (k = 2 ‚àß f = 1)‚Äù (by simp)
  rel  := .mkSigma ‚Äúk r. (k = 2 ‚àß r = 0) ‚à® (k = 2 ‚àß r = 1)‚Äù (by simp)
  func_iff {k c} := by
    simpa [models_iff] using Language.ORing.of_mem_range_encode_func
  rel_iff {k c} := by
    simpa [models_iff] using Language.ORing.of_mem_range_encode_rel

namespace Formalized

variable {V : Type*} [ORingStruc V] [V ‚äß‚Çò* ùêàùö∫‚ÇÅ]

abbrev LOR : Arith.Language V := Language.codeIn ‚Ñí‚Çí·µ£ V

abbrev LOR.code : LDef := Language.lDef ‚Ñí‚Çí·µ£

notation "‚åú‚Ñí‚Çí·µ£‚åù" => LOR

notation "‚åú‚Ñí‚Çí·µ£‚åù[" V "]" => LOR (V := V)

notation "p‚åú‚Ñí‚Çí·µ£‚åù" => LOR.code

variable (V)

instance LOR.defined : (‚åú‚Ñí‚Çí·µ£‚åù : Arith.Language V).Defined (Language.lDef ‚Ñí‚Çí·µ£) := inferInstance

variable {V}

def zeroIndex : ‚Ñï := Encodable.encode (Language.Zero.zero : (‚Ñí‚Çí·µ£ : FirstOrder.Language).Func 0)

def oneIndex : ‚Ñï := Encodable.encode (Language.One.one : (‚Ñí‚Çí·µ£ : FirstOrder.Language).Func 0)

def addIndex : ‚Ñï := Encodable.encode (Language.Add.add : (‚Ñí‚Çí·µ£ : FirstOrder.Language).Func 2)

def mulIndex : ‚Ñï := Encodable.encode (Language.Mul.mul : (‚Ñí‚Çí·µ£ : FirstOrder.Language).Func 2)

def eqIndex : ‚Ñï := Encodable.encode (Language.Eq.eq : (‚Ñí‚Çí·µ£ : FirstOrder.Language).Rel 2)

def ltIndex : ‚Ñï := Encodable.encode (Language.LT.lt : (‚Ñí‚Çí·µ£ : FirstOrder.Language).Rel 2)

@[simp] lemma LOR_func_zeroIndex : ‚åú‚Ñí‚Çí·µ£‚åù.Func 0 (zeroIndex : V) := by
  simpa using codeIn_func_quote (V := V) (L := ‚Ñí‚Çí·µ£) Language.Zero.zero

@[simp] lemma LOR_func_oneIndex : ‚åú‚Ñí‚Çí·µ£‚åù.Func 0 (oneIndex : V) := by
  simpa using codeIn_func_quote (V := V) (L := ‚Ñí‚Çí·µ£) Language.One.one

@[simp] lemma LOR_func_addIndex : ‚åú‚Ñí‚Çí·µ£‚åù.Func 2 (addIndex : V) := by
  simpa using codeIn_func_quote (V := V) (L := ‚Ñí‚Çí·µ£) Language.Add.add

@[simp] lemma LOR_func_mulIndex : ‚åú‚Ñí‚Çí·µ£‚åù.Func 2 (mulIndex : V) := by
  simpa using codeIn_func_quote (V := V) (L := ‚Ñí‚Çí·µ£) Language.Mul.mul

@[simp] lemma LOR_rel_eqIndex : ‚åú‚Ñí‚Çí·µ£‚åù.Rel 2 (eqIndex : V) := by
  simpa using codeIn_rel_quote (V := V) (L := ‚Ñí‚Çí·µ£) Language.Eq.eq

@[simp] lemma LOR_rel_ltIndex : ‚åú‚Ñí‚Çí·µ£‚åù.Rel 2 (ltIndex : V) := by
  simpa using codeIn_rel_quote (V := V) (L := ‚Ñí‚Çí·µ£) Language.LT.lt

lemma lDef.func_def : (‚Ñí‚Çí·µ£).lDef.func = .mkSigma ‚Äúk f. (k = 0 ‚àß f = 0) ‚à® (k = 0 ‚àß f = 1) ‚à® (k = 2 ‚àß f = 0) ‚à® (k = 2 ‚àß f = 1)‚Äù (by simp) := rfl

lemma coe_zeroIndex_eq : (zeroIndex : V) = 0 := rfl

lemma coe_oneIndex_eq : (oneIndex : V) = 1 := by simp [oneIndex]; rfl

lemma coe_addIndex_eq : (addIndex : V) = 0 := rfl

lemma coe_mulIndex_eq : (mulIndex : V) = 1 := by simp [mulIndex]; rfl

lemma func_iff {k f : V} : ‚åú‚Ñí‚Çí·µ£‚åù.Func k f ‚Üî (k = 0 ‚àß f = zeroIndex) ‚à® (k = 0 ‚àß f = oneIndex) ‚à® (k = 2 ‚àß f = addIndex) ‚à® (k = 2 ‚àß f = mulIndex) := by
  simp [FirstOrder.Language.codeIn_func_def, lDef.func_def,
    coe_zeroIndex_eq, coe_oneIndex_eq, coe_addIndex_eq, coe_mulIndex_eq]

end Formalized

end LO.Arith

end
