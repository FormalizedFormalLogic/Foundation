import Incompleteness.Arith.First
import Incompleteness.Arith.Second
import Incompleteness.DC.Basic

noncomputable section

open LO.FirstOrder.DerivabilityCondition

namespace LO.FirstOrder.Arith

open LO.Arith LO.Arith.Formalized

variable (T : Theory ‚Ñí‚Çí·µ£) [ùêàùö∫‚ÇÅ ‚âº T]

variable (U : Theory ‚Ñí‚Çí·µ£) [U.Delta1Definable] [‚Ñï ‚äß‚Çò* U] [ùêë‚ÇÄ ‚âº U]

instance : Diagonalization T where
  fixpoint := fixpoint
  diag Œ∏ := diagonal Œ∏

abbrev _root_.LO.FirstOrder.Theory.standardDP : ProvabilityPredicate T U where
  prov := U.provable‚Çê
  spec := provable‚Çê_D1

instance : (Theory.standardDP T U).HBL2 := ‚ü®provable‚Çê_D2‚ü©
instance : (Theory.standardDP T U).HBL3 := ‚ü®provable‚Çê_D3‚ü©
instance : (Theory.standardDP T U).HBL := ‚ü®‚ü©
instance : (Theory.standardDP T U).GoedelSound := ‚ü®fun h ‚Ü¶ by simpa using provable‚Çê_sound h‚ü©

end LO.FirstOrder.Arith

end
