import Foundation.FirstOrder.Arith.CobhamR0
import Foundation.Vorspiel.Arith
import Mathlib.Computability.Primrec

namespace Part

lemma unit_dom_iff (x : Part Unit) : x.Dom ‚Üî () ‚àà x := by simp [dom_iff_mem, show ‚àÄ x : Unit, x = () by intro x; rfl]

end Part

namespace Mathlib.List.Vector

variable {Œ± : Type*}

lemma cons_get (a : Œ±) (v : List.Vector Œ± k) : (a ::·µ• v).get = a :> v.get := by
  ext i; cases i using Fin.cases <;> simp

end Mathlib.List.Vector

open Encodable Denumerable

namespace Nat.Partrec

open Part _root_.Primrec

lemma projection {f : ‚Ñï ‚Üí. ‚Ñï} (hf : Nat.Partrec f) (unif : ‚àÄ {m n‚ÇÅ n‚ÇÇ a‚ÇÅ a‚ÇÇ : ‚Ñï}, a‚ÇÅ ‚àà f (m.pair n‚ÇÅ) ‚Üí a‚ÇÇ ‚àà f (m.pair n‚ÇÇ) ‚Üí a‚ÇÅ = a‚ÇÇ) :
    ‚àÉ g : ‚Ñï ‚Üí. ‚Ñï, Nat.Partrec g ‚àß (‚àÄ a m, a ‚àà g m ‚Üî ‚àÉ z, a ‚àà f (m.pair z)) := by
  obtain ‚ü®cf, rfl‚ü© := Code.exists_code.1 hf
  let F : ‚Ñï ‚Üí ‚Ñï ‚Üí Option ‚Ñï := fun m n ‚Ü¶ Nat.rec .none (fun x ih ‚Ü¶ ih.casesOn (cf.evaln n (m.pair x)) .some) n
  have : Primrec‚ÇÇ F := .to‚ÇÇ <| Primrec.nat_rec' Primrec.snd (.const Option.none)
      (Primrec.option_casesOn (Primrec.snd.comp .snd)
        (Code.evaln_prim.comp <| _root_.Primrec.pair (_root_.Primrec.pair (snd.comp .fst) (.const cf)) (Primrec‚ÇÇ.natPair.comp (fst.comp fst) (fst.comp snd)))
        (Primrec.option_some.comp snd).to‚ÇÇ).to‚ÇÇ
  have hF : ‚àÄ {m n a}, a ‚àà F m n ‚Üî ‚àÉ x < n, a ‚àà cf.evaln n (m.pair x) := by
    suffices ‚àÄ m n s a : ‚Ñï,
      Nat.rec Option.none (fun x ih ‚Ü¶ ih.casesOn (cf.evaln s (m.pair x)) Option.some) n = Option.some a ‚Üî
      ‚àÉ x < n, cf.evaln s (m.pair x) = .some a from fun m n a ‚Ü¶ this m n n a
    intro m n s a
    induction n generalizing a
    case zero => simp
    case succ n ih =>
        cases hC : @Nat.rec (fun _ ‚Ü¶ Option ‚Ñï) Option.none (fun x ih ‚Ü¶ ih.rec (cf.evaln s (m.pair x)) Option.some) n <;> simp [hC]
        ¬∑ constructor
          ¬∑ intro h; exact ‚ü®n, by simp, h‚ü©
          ¬∑ rintro ‚ü®x, hx, Hx‚ü©
            rcases eq_or_lt_of_le (le_of_lt_succ hx) with (rfl | hx)
            ¬∑ exact Hx
            ¬∑ exfalso; simpa using ((ih _).mpr ‚ü®x, hx, Hx‚ü©).symm.trans hC
        ¬∑ constructor
          ¬∑ rintro rfl;
            rcases (ih _).mp hC with ‚ü®x, hx, Hx‚ü©
            exact ‚ü®x, lt_trans hx (by simp), Hx‚ü©
          ¬∑ rintro ‚ü®x, _, Hx‚ü©
            rcases (ih _).mp hC with ‚ü®y, _, Hy‚ü©
            exact unif (Nat.Partrec.Code.evaln_sound Hy) (Nat.Partrec.Code.evaln_sound Hx)
  have mono : ‚àÄ {a m n‚ÇÅ n‚ÇÇ : ‚Ñï}, n‚ÇÅ ‚â§ n‚ÇÇ ‚Üí a ‚àà F m n‚ÇÅ ‚Üí a ‚àà F m n‚ÇÇ := by
    intro a m n‚ÇÅ n‚ÇÇ hn h‚ÇÅ
    rcases hF.mp h‚ÇÅ with ‚ü®x, hx, H‚ü©
    apply hF.mpr ‚ü®x, lt_of_lt_of_le hx hn, Code.evaln_mono hn H‚ü©
  have : Partrec (fun m ‚Ü¶ rfindOpt (F m)) := Partrec.nat_iff.1 <| Partrec.rfindOpt <| this.to_comp
  exact ‚ü®_, this, by
    intro a m
    rw [Nat.rfindOpt_mono mono]
    constructor
    ¬∑ rintro ‚ü®n, H‚ü©
      obtain ‚ü®x, _, H‚ü© := hF.mp H
      exact ‚ü®x, Code.evaln_sound H‚ü©
    ¬∑ rintro ‚ü®x, H‚ü©
      obtain ‚ü®s, Hs‚ü© := Code.evaln_complete.mp H
      exact ‚ü®max s x + 1, (@hF m (max s x + 1) a).mpr
        ‚ü®x, by simp [Nat.lt_succ],
          Code.evaln_mono (le_trans (Nat.le_max_left s x) (le_add_right (max s x) 1)) Hs‚ü©‚ü©‚ü©

end Nat.Partrec

namespace Partrec

variable {Œ± Œ≤ Œ≥ : Type*} [Primcodable Œ±] [Primcodable Œ≤] [Primcodable Œ≥]

lemma projection {f : Œ± ‚Üí Œ≤ ‚Üí. Œ≥} (hf : Partrec‚ÇÇ f) (unif : ‚àÄ {a b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ}, c‚ÇÅ ‚àà f a b‚ÇÅ ‚Üí c‚ÇÇ ‚àà f a b‚ÇÇ ‚Üí c‚ÇÅ = c‚ÇÇ) :
    ‚àÉ g : Œ± ‚Üí. Œ≥, Partrec g ‚àß (‚àÄ c a, c ‚àà g a ‚Üî ‚àÉ b, c ‚àà f a b) := by
  have := Nat.Partrec.projection (Partrec.bind_decode‚ÇÇ_iff.mp hf)
    (by intro m n‚ÇÅ n‚ÇÇ c‚ÇÅ c‚ÇÇ; simp only [Part.mem_bind_iff, Part.mem_of_Option,
          Option.mem_def, decode‚ÇÇ_eq_some, Part.mem_map_iff, Prod.exists, encode_prod_val,
          Nat.pair_eq_pair, forall_exists_index, and_imp]
        rintro a b‚ÇÅ rfl rfl c‚ÇÅ h‚ÇÅ rfl a b‚ÇÇ e rfl c‚ÇÇ h‚ÇÇ rfl
        rcases Encodable.encode_inj.mp e
        rw [unif h‚ÇÅ h‚ÇÇ])
  rcases this with ‚ü®g, hg, H‚ü©
  let g' : Œ± ‚Üí. Œ≥ := fun a ‚Ü¶ (g (encode a)).bind fun n ‚Ü¶ decode (Œ± := Œ≥) n
  refine ‚ü®g', ((nat_iff.2 hg).comp Computable.encode).bind (Computable.decode.of_Option.comp Computable.snd).to‚ÇÇ, ?_‚ü©
  have H : ‚àÄ {c a : ‚Ñï}, c ‚àà g a ‚Üî ‚àÉ a' b, encode a' = a ‚àß ‚àÉ c' ‚àà f a' b, encode c' = c := by
    simp [Encodable.decode‚ÇÇ_eq_some] at H
    intro c a; constructor
    ¬∑ intro h; rcases (H c a).mp h with ‚ü®b, a, b, ‚ü®rfl, rfl‚ü©, ‚ü®c, H, rfl‚ü©‚ü©
      exact ‚ü®a, b, rfl, c, H, rfl‚ü©
    ¬∑ rintro ‚ü®a, b, rfl, c, hc, rfl‚ü©
      exact (H _ _).mpr ‚ü®encode b, a, b, ‚ü®rfl, rfl‚ü©, c, hc, rfl‚ü©
  intro c a
  constructor
  ¬∑ simp [g']
    intro c' h hc
    rcases H.mp h with ‚ü®a, b, ae, c, habc, rfl‚ü©;
    rcases by simpa using hc
    rcases Encodable.encode_inj.mp ae
    exact ‚ü®b, habc‚ü©
  ¬∑ simp [g']
    rintro b habc
    exact ‚ü®encode c, H.mpr ‚ü®a, b, rfl, c, habc, rfl‚ü©, by simp‚ü©

end Partrec

namespace REPred

variable {Œ± Œ≤ : Type*} [Primcodable Œ±] [Primcodable Œ≤] {p q : Œ± ‚Üí Prop}

@[simp] protected lemma const (p : Prop) : REPred fun _ : Œ± ‚Ü¶ p := by
  by_cases h : p <;> simp [h]
  ¬∑ simpa using Partrec.some.dom_re
  ¬∑ simpa using (Partrec.none (Œ± := Œ±) (œÉ := Œ±)).dom_re

lemma iff : REPred p ‚Üî ‚àÉ f : Œ± ‚Üí. Unit, Partrec f ‚àß p = fun x ‚Ü¶ (f x).Dom :=
  ‚ü®fun h ‚Ü¶ ‚ü®_, h, by ext x; simp [Part.assert]‚ü©, by rintro ‚ü®f, hf, rfl‚ü©; exact hf.dom_re‚ü©

lemma iff' : REPred p ‚Üî ‚àÉ f : Œ± ‚Üí. Unit, Partrec f ‚àß ‚àÄ x, p x ‚Üî (f x).Dom :=
  ‚ü®fun h ‚Ü¶ ‚ü®_, h, by intro x; simp [Part.assert]‚ü©, by rintro ‚ü®f, hf, H‚ü©; exact hf.dom_re.of_eq (by simp [H])‚ü©

lemma and (hp : REPred p) (hq : REPred q) : REPred fun x ‚Ü¶ p x ‚àß q x := by
  rcases REPred.iff.mp hp with ‚ü®f, hf, rfl‚ü©
  rcases REPred.iff.mp hq with ‚ü®g, hg, rfl‚ü©
  let h : Œ± ‚Üí. Unit := fun x ‚Ü¶ (f x).bind fun _ ‚Ü¶ (g x).map fun _ ‚Ü¶ ()
  have : Partrec h := Partrec.bind hf <| Partrec.to‚ÇÇ <| Partrec.map (hg.comp Computable.fst) (Computable.const ()).to‚ÇÇ
  exact REPred.iff.mpr ‚ü®_, this, by funext x; simp [h]‚ü©

lemma or (hp : REPred p) (hq : REPred q) : REPred fun x ‚Ü¶ p x ‚à® q x := by
  rcases REPred.iff.mp hp with ‚ü®f, hf, rfl‚ü©
  rcases REPred.iff.mp hq with ‚ü®g, hg, rfl‚ü©
  rcases hf.merge hg (by intro a x; simp) with ‚ü®k, hk, h‚ü©
  exact REPred.iff.mpr ‚ü®k, hk, by funext x; simp [Part.unit_dom_iff, h]‚ü©

lemma projection {p : Œ± √ó Œ≤ ‚Üí Prop} (hp : REPred p) : REPred fun x ‚Ü¶ ‚àÉ y, p (x, y) := by
  rcases REPred.iff.mp hp with ‚ü®f, hf, rfl‚ü©
  have : Partrec‚ÇÇ fun a b ‚Ü¶ f (a, b) := hf.comp <| Computable.pair .fst .snd
  obtain ‚ü®g, hg, Hg‚ü© := Partrec.projection this (by simp)
  exact REPred.iff.mpr ‚ü®g, hg, by funext x; simp [Part.unit_dom_iff, Hg]‚ü©

protected lemma comp {f : Œ± ‚Üí Œ≤} (hf : Computable f) {p : Œ≤ ‚Üí Prop} (hp : REPred p) : REPred fun x ‚Ü¶ p (f x) := by
  rcases REPred.iff.mp hp with ‚ü®p, pp, rfl‚ü©
  exact REPred.iff'.mpr ‚ü®_, pp.comp hf, by intro x; simp‚ü©

end REPred

namespace LO.FirstOrder.Arith

open Mathlib Encodable Semiterm.Operator.GoedelNumber

section

lemma term_primrec {k f} : (t : Semiterm ‚Ñí‚Çí·µ£ Œæ k) ‚Üí Primrec (fun v : List.Vector ‚Ñï k ‚Ü¶ t.valm ‚Ñï v.get f)
  | #x                                 => by simpa using Primrec.vector_get.comp .id (.const _)
  | &x                                 => by simpa using Primrec.const _
  | Semiterm.func Language.Zero.zero _ => by simpa using Primrec.const 0
  | Semiterm.func Language.One.one _   => by simpa using Primrec.const 1
  | Semiterm.func Language.Add.add v   => by
    simpa [Semiterm.val_func] using Primrec.nat_add.comp (term_primrec (v 0)) (term_primrec (v 1))
  | Semiterm.func Language.Mul.mul v   => by
    simpa [Semiterm.val_func] using Primrec.nat_mul.comp (term_primrec (v 0)) (term_primrec (v 1))

lemma sigma1_re (Œµ : Œæ ‚Üí ‚Ñï) {k} {œÜ : Semiformula ‚Ñí‚Çí·µ£ Œæ k} (hp : Hierarchy ùö∫ 1 œÜ) :
    REPred fun v : List.Vector ‚Ñï k ‚Ü¶ Semiformula.Evalm ‚Ñï v.get Œµ œÜ := by
  apply sigma‚ÇÅ_induction' hp
  case hVerum => simp
  case hFalsum => simp
  case hEQ =>
    intro n t‚ÇÅ t‚ÇÇ
    refine ComputablePred.to_re <| ComputablePred.computable_iff.mpr
      <| ‚ü®fun v : List.Vector ‚Ñï n ‚Ü¶ decide (t‚ÇÅ.valm ‚Ñï v.get Œµ = t‚ÇÇ.valm ‚Ñï v.get Œµ), ?_, ?_‚ü©
    ¬∑ apply Primrec.to_comp <| Primrec.eq.comp (term_primrec t‚ÇÅ) (term_primrec t‚ÇÇ)
    ¬∑ simp
  case hNEQ =>
    intro n t‚ÇÅ t‚ÇÇ
    refine ComputablePred.to_re <| ComputablePred.computable_iff.mpr
      <| ‚ü®fun v : List.Vector ‚Ñï n ‚Ü¶ !decide (t‚ÇÅ.valm ‚Ñï v.get Œµ = t‚ÇÇ.valm ‚Ñï v.get Œµ), ?_, ?_‚ü©
    ¬∑ apply Primrec.to_comp <| Primrec.not.comp <| Primrec.eq.comp (term_primrec t‚ÇÅ) (term_primrec t‚ÇÇ)
    ¬∑ simp
  case hLT =>
    intro n t‚ÇÅ t‚ÇÇ
    refine ComputablePred.to_re <| ComputablePred.computable_iff.mpr
      <| ‚ü®fun v : List.Vector ‚Ñï n ‚Ü¶ decide (t‚ÇÅ.valm ‚Ñï v.get Œµ < t‚ÇÇ.valm ‚Ñï v.get Œµ), ?_, ?_‚ü©
    ¬∑ apply Primrec.to_comp <| Primrec.nat_lt.comp (term_primrec t‚ÇÅ) (term_primrec t‚ÇÇ)
    ¬∑ simp
  case hNLT =>
    intro n t‚ÇÅ t‚ÇÇ
    refine ComputablePred.to_re <| ComputablePred.computable_iff.mpr
      <| ‚ü®fun v : List.Vector ‚Ñï n ‚Ü¶ !decide (t‚ÇÅ.valm ‚Ñï v.get Œµ < t‚ÇÇ.valm ‚Ñï v.get Œµ), ?_, ?_‚ü©
    ¬∑ apply Primrec.to_comp <| Primrec.not.comp <| Primrec.nat_lt.comp (term_primrec t‚ÇÅ) (term_primrec t‚ÇÇ)
    ¬∑ simp
  case hAnd =>
    intro n œÜ œà _ _ ihp ihq
    exact REPred.of_eq (ihp.and ihq) fun v ‚Ü¶ by simp
  case hOr =>
    intro n œÜ œà _ _ ihp ihq
    exact REPred.of_eq (ihp.or ihq) fun v ‚Ü¶ by simp
  case hBall =>
    intro n t œÜ _ ih
    rcases REPred.iff'.mp ih with ‚ü®f, hf, H‚ü©
    let g : List.Vector ‚Ñï n ‚Üí. Unit := fun v ‚Ü¶
      Nat.rec (.some ()) (fun x ih ‚Ü¶ ih.bind fun _ ‚Ü¶ f (x ::·µ• v)) (t.valm ‚Ñï v.get Œµ)
    have : Partrec g :=
      Partrec.nat_rec (term_primrec t).to_comp (Computable.const ())
        (Partrec.to‚ÇÇ <| hf.comp (Primrec.to_comp <| Primrec.vector_cons.comp (Primrec.fst.comp .snd) .fst))
    refine REPred.iff.mpr ‚ü®_, this, ?_‚ü©
    funext v; simp [g]
    suffices ‚àÄ k : ‚Ñï, (‚àÄ x < k, Semiformula.Evalm ‚Ñï (x :> v.get) Œµ œÜ) ‚Üî
      Part.Dom (Nat.rec (.some ()) (fun x ih ‚Ü¶ ih.bind fun _ ‚Ü¶ f (x ::·µ• v)) k) from this _
    intro k; induction k
    case zero => simp
    case succ k ih =>
      simp [‚Üêih]
      constructor
      ¬∑ intro h
        exact ‚ü®fun x hx ‚Ü¶ h x (lt_trans hx (by simp)),
          (H (k ::·µ• v)).mp (by simpa [List.Vector.cons_get] using h k (by simp))‚ü©
      ¬∑ rintro ‚ü®hs, hd‚ü© x hx
        rcases lt_or_eq_of_le (Nat.le_of_lt_succ hx) with (hx | rfl)
        ¬∑ exact hs x hx
        ¬∑ simpa [List.Vector.cons_get] using (H (x ::·µ• v)).mpr hd
  case hEx =>
    intro n œÜ _ ih
    rcases REPred.iff'.mp ih with ‚ü®f, _, _‚ü©
    have : REPred fun vx : List.Vector ‚Ñï n √ó ‚Ñï ‚Ü¶ Semiformula.Evalm ‚Ñï (vx.2 :> vx.1.get) Œµ œÜ := by
      simpa [List.Vector.cons_get] using ih.comp (Primrec.to_comp <| Primrec.vector_cons.comp .snd .fst)
    simpa using this.projection

end

open Nat.ArithPart‚ÇÅ

def codeAux : {k : ‚Ñï} ‚Üí Nat.ArithPart‚ÇÅ.Code k ‚Üí Formula ‚Ñí‚Çí·µ£ (Fin (k + 1))
  | _, Code.zero _    => ‚Äú&0 = 0‚Äù
  | _, Code.one _     => ‚Äú&0 = 1‚Äù
  | _, Code.add i j   => ‚Äú&0 = &i.succ + &j.succ‚Äù
  | _, Code.mul i j   => ‚Äú&0 = &i.succ * &j.succ‚Äù
  | _, Code.equal i j => ‚Äú(&i.succ = &j.succ ‚àß &0 = 1) ‚à® (&i.succ ‚â† &j.succ ‚àß &0 = 0)‚Äù
  | _, Code.lt i j    => ‚Äú(&i.succ < &j.succ ‚àß &0 = 1) ‚à® (&i.succ <Ã∏ &j.succ ‚àß &0 = 0)‚Äù
  | _, Code.proj i    => ‚Äú&0 = !!&i.succ‚Äù
  | k, @Code.comp _ n c d  =>
    exClosure ((Rew.bind (L := ‚Ñí‚Çí·µ£) (Œæ‚ÇÅ := Fin (n + 1)) ![] (&0 :> (#¬∑)) ‚ñπ (codeAux c)) ‚ãè
      Matrix.conj fun i ‚Ü¶ Rew.bind (L := ‚Ñí‚Çí·µ£) (Œæ‚ÇÅ := Fin (k + 1)) ![] (#i :> (&¬∑.succ)) ‚ñπ codeAux (d i))
  | k, Code.rfind c   =>
    (Rew.bind (L := ‚Ñí‚Çí·µ£) (Œæ‚ÇÅ := Fin (k + 1 + 1)) ![] (‚Äò0‚Äô :> &0 :> (&¬∑.succ)) ‚ñπ codeAux c) ‚ãè
    (‚àÄ[‚Äúz. z < &0‚Äù] ‚àÉ' ‚Äúz. z ‚â† 0‚Äù ‚ãè ((Rew.bind (L := ‚Ñí‚Çí·µ£) (Œæ‚ÇÅ := Fin (k + 1 + 1)) ![] (#0 :> #1 :> (&¬∑.succ)) ‚ñπ codeAux c)))

def code (c : Code k) : Semisentence ‚Ñí‚Çí·µ£ (k + 1) := (Rew.bind (L := ‚Ñí‚Çí·µ£) (Œæ‚ÇÅ := Fin (k + 1)) ![] (#0 :> (#¬∑.succ))) ‚ñπ (codeAux c)

/-
section model

open LO.Arith

variable {M : Type*} [ORingStruc M] [M ‚äß‚Çò* ùêë‚ÇÄ]

private lemma codeAux_uniq {k} {c : Code k} {v : Fin k ‚Üí M} {z z' : M} :
    Semiformula.Evalfm M (z :> v) (codeAux c) ‚Üí Semiformula.Evalfm M (z' :> v) (codeAux c) ‚Üí z = z' := by
  induction c generalizing z z' <;> simp [code, codeAux]
  case zero => rintro rfl rfl; rfl
  case one  => rintro rfl rfl; rfl
  case add  => rintro rfl rfl; rfl
  case mul  => rintro rfl rfl; rfl
  case proj => rintro rfl rfl; rfl
  case equal i j =>
    by_cases hv : v i = v j <;> simp [hv]
    ¬∑ rintro rfl rfl; rfl
    ¬∑ rintro rfl rfl; rfl
  case lt i j =>
    by_cases hv : v i < v j <;> simp [hv, -not_lt, ‚Üênot_lt]
    ¬∑ rintro rfl rfl; rfl
    ¬∑ rintro rfl rfl; rfl
  case comp m n c d ihc ihd =>
    simp [Semiformula.eval_rew, Function.comp_def, Matrix.empty_eq, Matrix.comp_vecCons']
    intro w‚ÇÅ hc‚ÇÅ hd‚ÇÅ w‚ÇÇ hc‚ÇÇ hd‚ÇÇ;
    have : w‚ÇÅ = w‚ÇÇ := funext fun i => ihd i (hd‚ÇÅ i) (hd‚ÇÇ i)
    rcases this with rfl
    exact ihc hc‚ÇÅ hc‚ÇÇ
  case rfind c ih =>
    simp [Semiformula.eval_rew, Function.comp_def, Matrix.empty_eq, Matrix.comp_vecCons']
    intro h‚ÇÅ hm‚ÇÅ h‚ÇÇ hm‚ÇÇ
    by_contra hz
    wlog h : z < z' with Hz
    case inr =>
      have : z' < z := lt_of_le_of_ne (not_lt.mp h) (Ne.symm hz)
      exact Hz (k := k) c ih h‚ÇÇ hm‚ÇÇ h‚ÇÅ hm‚ÇÅ (Ne.symm hz) this
    have : ‚àÉ x, x ‚â† 0 ‚àß (Semiformula.Evalfm M (x :> z :> fun i => v i)) (codeAux c) := hm‚ÇÇ z h
    rcases this with ‚ü®x, xz, hx‚ü©
    exact xz (ih hx h‚ÇÅ)

lemma code_uniq {k} {c : Code k} {v : Fin k ‚Üí M} {z z' : M} :
    Semiformula.Evalbm M (z :> v) (code c) ‚Üí Semiformula.Evalbm M (z' :> v) (code c) ‚Üí z = z' := by
  simp [code, Semiformula.eval_rew, Matrix.empty_eq, Function.comp_def, Matrix.comp_vecCons']
  exact codeAux_uniq

end model
-/

private lemma codeAux_sigma_one {k} (c : Nat.ArithPart‚ÇÅ.Code k) : Hierarchy ùö∫ 1 (codeAux c) := by
  induction c <;> simp [codeAux, Matrix.fun_eq_vec‚ÇÇ]
  case comp c d ihc ihg =>
    exact Hierarchy.exClosure (by simp [ihc, ihg])
  case rfind k c ih => simp [ih]

@[simp] lemma code_sigma_one {k} (c : Nat.ArithPart‚ÇÅ.Code k) : Hierarchy ùö∫ 1 (code c) :=
  Hierarchy.rew _ (codeAux_sigma_one c)

@[simp] lemma natCast_nat (n : ‚Ñï) : Nat.cast n = n := by rfl

private lemma models_codeAux {c : Code k} {f : List.Vector ‚Ñï k ‚Üí. ‚Ñï} (hc : c.eval f) (y : ‚Ñï) (v : Fin k ‚Üí ‚Ñï) :
    Semiformula.Evalfm ‚Ñï (y :> v) (codeAux c) ‚Üî f (List.Vector.ofFn v) = Part.some y := by
  induction hc generalizing y <;> simp [code, codeAux, models_iff]
  case zero =>
    have : (0 : Part ‚Ñï) = Part.some 0 := rfl
    simp [this, eq_comm]
  case one =>
    have : (1 : Part ‚Ñï) = Part.some 1 := rfl
    simp [this, eq_comm]
  case equal i j =>
    by_cases hv : v i = v j <;> simp [hv, Nat.isEqNat, eq_comm]
  case lt i j =>
    by_cases hv : v i < v j <;> simp [hv, Nat.isLtNat, eq_comm]
    ¬∑ simp [Nat.not_lt.mp hv]
  case add => simp [eq_comm]
  case mul => simp [eq_comm]
  case proj => simp [eq_comm]
  case comp c d f g _ _ ihf ihg =>
    simp [Semiformula.eval_rew, Function.comp_def, Matrix.empty_eq, Matrix.comp_vecCons']
    constructor
    ¬∑ rintro ‚ü®e, hf, hg‚ü©
      have hf : f (List.Vector.ofFn e) = Part.some y := (ihf _ _).mp hf
      have hg : ‚àÄ i, g i (List.Vector.ofFn v) = Part.some (e i) := fun i => (ihg i _ _).mp (hg i)
      simp [hg, hf]
    ¬∑ intro h
      have : ‚àÉ w, (‚àÄ i, List.Vector.get w i ‚àà g i (List.Vector.ofFn v)) ‚àß y ‚àà f w := by
        simpa using Part.eq_some_iff.mp h
      rcases this with ‚ü®w, hw, hy‚ü©
      exact ‚ü®w.get, (ihf y w.get).mpr (by simpa[Part.eq_some_iff] using hy),
        fun i => (ihg i (w.get i) v).mpr (by simpa[Part.eq_some_iff] using hw i)‚ü©
  case rfind c f _ ihf =>
    simp [Semiformula.eval_rew, Function.comp_def, Matrix.empty_eq, Matrix.comp_vecCons', ihf, List.Vector.ofFn_vecCons]
    constructor
    ¬∑ rintro ‚ü®hy, h‚ü©; simp [Part.eq_some_iff]
      exact ‚ü®by simpa using hy, by intro z hz; exact Nat.ne_zero_of_lt (h z hz)‚ü©
    ¬∑ intro h; simpa [pos_iff_ne_zero] using Nat.mem_rfind.mp (Part.eq_some_iff.mp h)

lemma models_code {c : Code k} {f : List.Vector ‚Ñï k ‚Üí. ‚Ñï} (hc : c.eval f) (y : ‚Ñï) (v : Fin k ‚Üí ‚Ñï) :
    Semiformula.Evalbm ‚Ñï (y :> v) (code c) ‚Üî y ‚àà f (List.Vector.ofFn v) := by
  simpa[code, models_iff, Semiformula.eval_rew, Matrix.empty_eq, Function.comp_def,
    Matrix.comp_vecCons', ‚ÜêPart.eq_some_iff] using models_codeAux hc y v

noncomputable def codeOfPartrec' {k} (f : List.Vector ‚Ñï k ‚Üí. ‚Ñï) : Semisentence ‚Ñí‚Çí·µ£ (k + 1) :=
  code <| Classical.epsilon (fun c ‚Ü¶ ‚àÄ y v, Semiformula.Evalbm ‚Ñï (y :> v) (code c) ‚Üî y ‚àà f (List.Vector.ofFn v))

lemma codeOfPartrec'_spec {k} {f : List.Vector ‚Ñï k ‚Üí. ‚Ñï} (hf : Nat.Partrec' f) {y : ‚Ñï} {v : Fin k ‚Üí ‚Ñï} :
    ‚Ñï ‚äß/(y :> v) (codeOfPartrec' f) ‚Üî y ‚àà f (List.Vector.ofFn v) := by
  have : ‚àÉ c, ‚àÄ y v, Semiformula.Evalbm ‚Ñï (y :> v) (code c) ‚Üî y ‚àà f (List.Vector.ofFn v) := by
    rcases Nat.ArithPart‚ÇÅ.exists_code (of_partrec hf) with ‚ü®c, hc‚ü©
    exact ‚ü®c, models_code hc‚ü©
  exact Classical.epsilon_spec this y v

open Classical

noncomputable def codeOfREPred (p : ‚Ñï ‚Üí Prop) : Semisentence ‚Ñí‚Çí·µ£ 1 :=
  let f : ‚Ñï ‚Üí. Unit := fun a ‚Ü¶ Part.assert (p a) fun _ ‚Ü¶ Part.some ()
  (codeOfPartrec' (fun v ‚Ü¶ (f (v.get 0)).map fun _ ‚Ü¶ 0))/[‚Äò0‚Äô, #0]

lemma codeOfREPred_spec {p : ‚Ñï ‚Üí Prop} (hp : REPred p) {x : ‚Ñï} :
    ‚Ñï ‚äß/![x] (codeOfREPred p) ‚Üî p x := by
  let f : ‚Ñï ‚Üí. Unit := fun a ‚Ü¶ Part.assert (p a) fun _ ‚Ü¶ Part.some ()
  suffices ‚Ñï ‚äß/![x] ((codeOfPartrec' fun v ‚Ü¶ Part.map (fun _ ‚Ü¶ 0) (f (v.get 0)))/[‚Äò0‚Äô, #0]) ‚Üî p x from this
  have : Partrec fun v : List.Vector ‚Ñï 1 ‚Ü¶ (f (v.get 0)).map fun _ ‚Ü¶ 0 := by
    refine Partrec.map (Partrec.comp hp (Primrec.to_comp <| Primrec.vector_get.comp .id (.const 0))) (Computable.const 0).to‚ÇÇ
  simp [Semiformula.eval_substs, Matrix.comp_vecCons', Matrix.constant_eq_singleton]
  apply (codeOfPartrec'_spec (Nat.Partrec'.of_part this) (v := ![x]) (y := 0)).trans (by simp [f])

variable {T : Theory ‚Ñí‚Çí·µ£} [ùêë‚ÇÄ ‚™Ø T] [Sigma1Sound T]

lemma re_complete {p : ‚Ñï ‚Üí Prop} (hp : REPred p) {x : ‚Ñï} :
    p x ‚Üî T ‚ä¢! ‚Üë((codeOfREPred p)/[‚Äò‚Üëx‚Äô] : Sentence ‚Ñí‚Çí·µ£) := Iff.trans
  (by simpa [models‚ÇÄ_iff, Semiformula.eval_substs, Matrix.constant_eq_singleton] using (codeOfREPred_spec hp (x := x)).symm)
  (sigma_one_completeness_iff (by simp [codeOfREPred, codeOfPartrec']))

end Arith

end FirstOrder

end LO
