import Foundation.FirstOrder.R0.Basic
import Foundation.Vorspiel.Arithmetic
import Mathlib.Computability.Primrec

open Encodable Denumerable

namespace LO.FirstOrder.Arithmetic

open Mathlib Encodable Semiterm.Operator.G√∂delNumber

section

lemma term_primrec {k f} : (t : Semiterm ‚Ñí‚Çí·µ£ Œæ k) ‚Üí Primrec (fun v : List.Vector ‚Ñï k ‚Ü¶ t.valm ‚Ñï v.get f)
  | #x                                 => by simpa using Primrec.vector_get.comp .id (.const _)
  | &x                                 => by simpa using Primrec.const _
  | Semiterm.func Language.Zero.zero _ => by simpa using Primrec.const 0
  | Semiterm.func Language.One.one _   => by simpa using Primrec.const 1
  | Semiterm.func Language.Add.add v   => by
    simpa [Semiterm.val_func] using Primrec.nat_add.comp (term_primrec (v 0)) (term_primrec (v 1))
  | Semiterm.func Language.Mul.mul v   => by
    simpa [Semiterm.val_func] using Primrec.nat_mul.comp (term_primrec (v 0)) (term_primrec (v 1))

lemma sigma1_re (Œµ : Œæ ‚Üí ‚Ñï) {k} {œÜ : Semiformula ‚Ñí‚Çí·µ£ Œæ k} (hp : Hierarchy ùö∫ 1 œÜ) :
    REPred fun v : List.Vector ‚Ñï k ‚Ü¶ Semiformula.Evalm ‚Ñï v.get Œµ œÜ := by
  apply sigma‚ÇÅ_induction' hp
  case hVerum => simp
  case hFalsum => simp
  case hEQ =>
    intro n t‚ÇÅ t‚ÇÇ
    refine ComputablePred.to_re <| ComputablePred.computable_iff.mpr
      <| ‚ü®fun v : List.Vector ‚Ñï n ‚Ü¶ decide (t‚ÇÅ.valm ‚Ñï v.get Œµ = t‚ÇÇ.valm ‚Ñï v.get Œµ), ?_, ?_‚ü©
    ¬∑ apply Primrec.to_comp (Primrec.eq.comp (term_primrec t‚ÇÅ) (term_primrec t‚ÇÇ)).decide
    ¬∑ simp
  case hNEQ =>
    intro n t‚ÇÅ t‚ÇÇ
    refine ComputablePred.to_re <| ComputablePred.computable_iff.mpr
      <| ‚ü®fun v : List.Vector ‚Ñï n ‚Ü¶ !decide (t‚ÇÅ.valm ‚Ñï v.get Œµ = t‚ÇÇ.valm ‚Ñï v.get Œµ), ?_, ?_‚ü©
    ¬∑ apply Primrec.to_comp <| Primrec.not.comp (Primrec.eq.comp (term_primrec t‚ÇÅ) (term_primrec t‚ÇÇ)).decide
    ¬∑ simp
  case hLT =>
    intro n t‚ÇÅ t‚ÇÇ
    refine ComputablePred.to_re <| ComputablePred.computable_iff.mpr
      <| ‚ü®fun v : List.Vector ‚Ñï n ‚Ü¶ decide (t‚ÇÅ.valm ‚Ñï v.get Œµ < t‚ÇÇ.valm ‚Ñï v.get Œµ), ?_, ?_‚ü©
    ¬∑ apply Primrec.to_comp (Primrec.nat_lt.comp (term_primrec t‚ÇÅ) (term_primrec t‚ÇÇ)).decide
    ¬∑ simp
  case hNLT =>
    intro n t‚ÇÅ t‚ÇÇ
    refine ComputablePred.to_re <| ComputablePred.computable_iff.mpr
      <| ‚ü®fun v : List.Vector ‚Ñï n ‚Ü¶ !decide (t‚ÇÅ.valm ‚Ñï v.get Œµ < t‚ÇÇ.valm ‚Ñï v.get Œµ), ?_, ?_‚ü©
    ¬∑ apply Primrec.to_comp <| Primrec.not.comp (Primrec.nat_lt.comp (term_primrec t‚ÇÅ) (term_primrec t‚ÇÇ)).decide
    ¬∑ simp
  case hAnd =>
    intro n œÜ œà _ _ ihp ihq
    exact REPred.of_eq (ihp.and ihq) fun v ‚Ü¶ by simp
  case hOr =>
    intro n œÜ œà _ _ ihp ihq
    exact REPred.of_eq (ihp.or ihq) fun v ‚Ü¶ by simp
  case hBall =>
    intro n t œÜ _ ih
    rcases REPred.iff'.mp ih with ‚ü®f, hf, H‚ü©
    let g : List.Vector ‚Ñï n ‚Üí. Unit := fun v ‚Ü¶
      Nat.rec (.some ()) (fun x ih ‚Ü¶ ih.bind fun _ ‚Ü¶ f (x ::·µ• v)) (t.valm ‚Ñï v.get Œµ)
    have : Partrec g :=
      Partrec.nat_rec (term_primrec t).to_comp (Computable.const ())
        (Partrec.to‚ÇÇ <| hf.comp (Primrec.to_comp <| Primrec.vector_cons.comp (Primrec.fst.comp .snd) .fst))
    refine REPred.iff.mpr ‚ü®_, this, ?_‚ü©
    funext v
    suffices ‚àÄ k : ‚Ñï, (‚àÄ x < k, Semiformula.Evalm ‚Ñï (x :> v.get) Œµ œÜ) ‚Üî
      Part.Dom (Nat.rec (.some ()) (fun x ih ‚Ü¶ ih.bind fun _ ‚Ü¶ f (x ::·µ• v)) k) by simpa [g] using this _
    intro k; induction k
    case zero => simp
    case succ k ih =>
      suffices
        (‚àÄ x < k + 1, (Semiformula.Evalm ‚Ñï (x :> v.get) Œµ) œÜ)
        ‚Üî (‚àÄ x < k, (Semiformula.Evalm ‚Ñï (x :> v.get) Œµ) œÜ) ‚àß (f (k ::·µ• v)).Dom by simpa [‚Üêih]
      constructor
      ¬∑ intro h
        exact ‚ü®fun x hx ‚Ü¶ h x (lt_trans hx (by simp)),
          (H (k ::·µ• v)).mp (by simpa [List.Vector.cons_get] using h k (by simp))‚ü©
      ¬∑ rintro ‚ü®hs, hd‚ü© x hx
        rcases lt_or_eq_of_le (Nat.le_of_lt_succ hx) with (hx | rfl)
        ¬∑ exact hs x hx
        ¬∑ simpa [List.Vector.cons_get] using (H (x ::·µ• v)).mpr hd
  case hEx =>
    intro n œÜ _ ih
    rcases REPred.iff'.mp ih with ‚ü®f, _, _‚ü©
    have : REPred fun vx : List.Vector ‚Ñï n √ó ‚Ñï ‚Ü¶ Semiformula.Evalm ‚Ñï (vx.2 :> vx.1.get) Œµ œÜ := by
      simpa [List.Vector.cons_get] using ih.comp (Primrec.to_comp <| Primrec.vector_cons.comp .snd .fst)
    simpa using this.projection

end

open Nat.ArithPart‚ÇÅ

def codeAux {k : ‚Ñï} : Nat.ArithPart‚ÇÅ.Code k ‚Üí Formula ‚Ñí‚Çí·µ£ (Fin (k + 1))
  |        Code.zero _ => ‚Äú&0 = 0‚Äù
  |         Code.one _ => ‚Äú&0 = 1‚Äù
  |       Code.add i j => ‚Äú&0 = &i.succ + &j.succ‚Äù
  |       Code.mul i j => ‚Äú&0 = &i.succ * &j.succ‚Äù
  |     Code.equal i j => ‚Äú(&i.succ = &j.succ ‚àß &0 = 1) ‚à® (&i.succ ‚â† &j.succ ‚àß &0 = 0)‚Äù
  |        Code.lt i j => ‚Äú(&i.succ < &j.succ ‚àß &0 = 1) ‚à® (&i.succ <Ã∏ &j.succ ‚àß &0 = 0)‚Äù
  |        Code.proj i => ‚Äú&0 = !!&i.succ‚Äù
  | @Code.comp _ n c d =>
    exClosure ((Rew.bind (L := ‚Ñí‚Çí·µ£) (Œæ‚ÇÅ := Fin (n + 1)) ![] (&0 :> (#¬∑)) ‚ñπ (codeAux c)) ‚ãè
      Matrix.conj fun i ‚Ü¶ Rew.bind (L := ‚Ñí‚Çí·µ£) (Œæ‚ÇÅ := Fin (k + 1)) ![] (#i :> (&¬∑.succ)) ‚ñπ codeAux (d i))
  |       Code.rfind c =>
    (Rew.bind (L := ‚Ñí‚Çí·µ£) (Œæ‚ÇÅ := Fin (k + 1 + 1)) ![] (‚Äò0‚Äô :> &0 :> (&¬∑.succ)) ‚ñπ codeAux c) ‚ãè
    (‚àÄ[‚Äúz. z < &0‚Äù] ‚àÉ' ‚Äúz. z ‚â† 0‚Äù ‚ãè ((Rew.bind (L := ‚Ñí‚Çí·µ£) (Œæ‚ÇÅ := Fin (k + 1 + 1)) ![] (#0 :> #1 :> (&¬∑.succ)) ‚ñπ codeAux c)))

def code (c : Code k) : Semisentence ‚Ñí‚Çí·µ£ (k + 1) := (Rew.bind (L := ‚Ñí‚Çí·µ£) (Œæ‚ÇÅ := Fin (k + 1)) ![] (#0 :> (#¬∑.succ))) ‚ñπ (codeAux c)

/-
section model

open LO.Arithmetic

variable {M : Type*} [ORingStruc M] [M ‚äß‚Çò* ùó•‚ÇÄ]

private lemma codeAux_uniq {k} {c : Code k} {v : Fin k ‚Üí M} {z z' : M} :
    Semiformula.Evalfm M (z :> v) (codeAux c) ‚Üí Semiformula.Evalfm M (z' :> v) (codeAux c) ‚Üí z = z' := by
  induction c generalizing z z' <;> simp [code, codeAux]
  case zero => rintro rfl rfl; rfl
  case one  => rintro rfl rfl; rfl
  case add  => rintro rfl rfl; rfl
  case mul  => rintro rfl rfl; rfl
  case proj => rintro rfl rfl; rfl
  case equal i j =>
    by_cases hv : v i = v j <;> simp [hv]
    ¬∑ rintro rfl rfl; rfl
    ¬∑ rintro rfl rfl; rfl
  case lt i j =>
    by_cases hv : v i < v j <;> simp [hv, -not_lt, ‚Üênot_lt]
    ¬∑ rintro rfl rfl; rfl
    ¬∑ rintro rfl rfl; rfl
  case comp m n c d ihc ihd =>
    simp [Semiformula.eval_rew, Function.comp_def, Matrix.empty_eq, Matrix.comp_vecCons']
    intro w‚ÇÅ hc‚ÇÅ hd‚ÇÅ w‚ÇÇ hc‚ÇÇ hd‚ÇÇ;
    have : w‚ÇÅ = w‚ÇÇ := funext fun i => ihd i (hd‚ÇÅ i) (hd‚ÇÇ i)
    rcases this with rfl
    exact ihc hc‚ÇÅ hc‚ÇÇ
  case rfind c ih =>
    simp [Semiformula.eval_rew, Function.comp_def, Matrix.empty_eq, Matrix.comp_vecCons']
    intro h‚ÇÅ hm‚ÇÅ h‚ÇÇ hm‚ÇÇ
    by_contra hz
    wlog h : z < z' with Hz
    case inr =>
      have : z' < z := lt_of_le_of_ne (not_lt.mp h) (Ne.symm hz)
      exact Hz (k := k) c ih h‚ÇÇ hm‚ÇÇ h‚ÇÅ hm‚ÇÅ (Ne.symm hz) this
    have : ‚àÉ x, x ‚â† 0 ‚àß (Semiformula.Evalfm M (x :> z :> fun i => v i)) (codeAux c) := hm‚ÇÇ z h
    rcases this with ‚ü®x, xz, hx‚ü©
    exact xz (ih hx h‚ÇÅ)

lemma code_uniq {k} {c : Code k} {v : Fin k ‚Üí M} {z z' : M} :
    Semiformula.Evalbm M (z :> v) (code c) ‚Üí Semiformula.Evalbm M (z' :> v) (code c) ‚Üí z = z' := by
  simp [code, Semiformula.eval_rew, Matrix.empty_eq, Function.comp_def, Matrix.comp_vecCons']
  exact codeAux_uniq

end model
-/

private lemma codeAux_sigma_one {k} (c : Nat.ArithPart‚ÇÅ.Code k) : Hierarchy ùö∫ 1 (codeAux c) := by
  induction c
  case zero => simp [codeAux]
  case one => simp [codeAux]
  case add => simp [codeAux]
  case mul => simp [codeAux]
  case lt => simp [codeAux, Matrix.fun_eq_vec_two]
  case equal => simp [codeAux, Matrix.fun_eq_vec_two]
  case proj => simp [codeAux]
  case comp c d ihc ihg =>
    exact Hierarchy.exClosure (by simp [ihc, ihg])
  case rfind k c ih => simp [codeAux, Matrix.fun_eq_vec_two]; simp [ih]

@[simp] lemma code_sigma_one {k} (c : Nat.ArithPart‚ÇÅ.Code k) : Hierarchy ùö∫ 1 (code c) :=
  Hierarchy.rew _ (codeAux_sigma_one c)

@[simp] lemma natCast_nat (n : ‚Ñï) : Nat.cast n = n := by rfl

private lemma models_codeAux {c : Code k} {f : List.Vector ‚Ñï k ‚Üí. ‚Ñï} (hc : c.eval f) (y : ‚Ñï) (v : Fin k ‚Üí ‚Ñï) :
    Semiformula.Evalfm ‚Ñï (y :> v) (codeAux c) ‚Üî f (List.Vector.ofFn v) = Part.some y := by
  induction hc generalizing y
  case zero =>
    have : (0 : Part ‚Ñï) = Part.some 0 := rfl
    simp [codeAux, this, eq_comm]
  case one =>
    have : (1 : Part ‚Ñï) = Part.some 1 := rfl
    simp [codeAux, this, eq_comm]
  case equal i j =>
    by_cases hv : v i = v j <;> simp [codeAux, hv, Nat.isEqNat, eq_comm]
  case lt i j =>
    simp [codeAux]
    by_cases hv : v i < v j <;> simp [hv, Nat.isLtNat, eq_comm, Nat.not_lt.mp]
  case add => simp [codeAux, eq_comm]
  case mul => simp [codeAux, eq_comm]
  case proj => simp [codeAux, eq_comm]
  case comp m n c d f g _ _ ihf ihg =>
    suffices
      (‚àÉ e' : Fin n ‚Üí ‚Ñï, (Semiformula.Evalfm ‚Ñï (y :> e')) (codeAux c) ‚àß
        ‚àÄ i, (Semiformula.Evalfm ‚Ñï (e' i :> v)) (codeAux (d i)))
      ‚Üî (List.Vector.mOfFn (g ¬∑ (List.Vector.ofFn v))).bind f = Part.some y by
        simp [codeAux]
        simpa [Semiformula.eval_rew, Function.comp_def, Matrix.empty_eq, Matrix.comp_vecCons']
    constructor
    ¬∑ rintro ‚ü®e, hf, hg‚ü©
      have hf : f (List.Vector.ofFn e) = Part.some y := (ihf _ _).mp hf
      have hg : ‚àÄ i, g i (List.Vector.ofFn v) = Part.some (e i) := fun i => (ihg i _ _).mp (hg i)
      simp [hg, hf]
    ¬∑ intro h
      have : ‚àÉ w, (‚àÄ i, List.Vector.get w i ‚àà g i (List.Vector.ofFn v)) ‚àß y ‚àà f w := by
        simpa using Part.eq_some_iff.mp h
      rcases this with ‚ü®w, hw, hy‚ü©
      exact ‚ü®w.get, (ihf y w.get).mpr (by simpa [Part.eq_some_iff] using hy),
        fun i ‚Ü¶ (ihg i (w.get i) v).mpr (by simpa [Part.eq_some_iff] using hw i)‚ü©
  case rfind c f _ ihf =>
    suffices
      (f (y ::·µ• List.Vector.ofFn v) = 0 ‚àß ‚àÄ x < y, 0 < f (x ::·µ• List.Vector.ofFn v))
      ‚Üî (Nat.rfind fun n ‚Ü¶ Part.some (decide (f (n ::·µ• List.Vector.ofFn v) = 0))) = Part.some y by
      simp [codeAux]
      simpa [Semiformula.eval_rew, Function.comp_def, Matrix.empty_eq, Matrix.comp_vecCons', ihf, List.Vector.ofFn_vecCons]
    constructor
    ¬∑ rintro ‚ü®hy, h‚ü©
      simpa [Part.eq_some_iff] using ‚ü®by simpa using hy, by intro z hz; exact Nat.ne_zero_of_lt (h z hz)‚ü©
    ¬∑ intro h; simpa [pos_iff_ne_zero] using Nat.mem_rfind.mp (Part.eq_some_iff.mp h)

lemma models_code {c : Code k} {f : List.Vector ‚Ñï k ‚Üí. ‚Ñï} (hc : c.eval f) (y : ‚Ñï) (v : Fin k ‚Üí ‚Ñï) :
    Semiformula.Evalbm ‚Ñï (y :> v) (code c) ‚Üî y ‚àà f (List.Vector.ofFn v) := by
  simpa [code, models_iff, Semiformula.eval_rew, Matrix.empty_eq, Function.comp_def,
    Matrix.comp_vecCons', ‚ÜêPart.eq_some_iff] using models_codeAux hc y v

noncomputable def codeOfPartrec' {k} (f : List.Vector ‚Ñï k ‚Üí. ‚Ñï) : Semisentence ‚Ñí‚Çí·µ£ (k + 1) :=
  code <| Classical.epsilon fun c ‚Ü¶ ‚àÄ y v, Semiformula.Evalbm ‚Ñï (y :> v) (code c) ‚Üî y ‚àà f (List.Vector.ofFn v)

lemma codeOfPartrec'_spec {k} {f : List.Vector ‚Ñï k ‚Üí. ‚Ñï} (hf : Nat.Partrec' f) {y : ‚Ñï} {v : Fin k ‚Üí ‚Ñï} :
    ‚Ñï ‚äß/(y :> v) (codeOfPartrec' f) ‚Üî y ‚àà f (List.Vector.ofFn v) := by
  have : ‚àÉ c, ‚àÄ y v, Semiformula.Evalbm ‚Ñï (y :> v) (code c) ‚Üî y ‚àà f (List.Vector.ofFn v) := by
    rcases Nat.ArithPart‚ÇÅ.exists_code (of_partrec hf) with ‚ü®c, hc‚ü©
    exact ‚ü®c, models_code hc‚ü©
  exact Classical.epsilon_spec this y v

open Classical

noncomputable def codeOfREPred (A : ‚Ñï ‚Üí Prop) : Semisentence ‚Ñí‚Çí·µ£ 1 :=
  let f : ‚Ñï ‚Üí. Unit := fun a ‚Ü¶ Part.assert (A a) fun _ ‚Ü¶ Part.some ()
  (codeOfPartrec' (fun v ‚Ü¶ (f (v.get 0)).map fun _ ‚Ü¶ 0))/[‚Äò0‚Äô, #0]

lemma codeOfREPred_spec {A : ‚Ñï ‚Üí Prop} (hp : REPred A) {x : ‚Ñï} :
    ‚Ñï ‚äß/![x] (codeOfREPred A) ‚Üî A x := by
  let f : ‚Ñï ‚Üí. Unit := fun a ‚Ü¶ Part.assert (A a) fun _ ‚Ü¶ Part.some ()
  suffices ‚Ñï ‚äß/![x] ((codeOfPartrec' fun v ‚Ü¶ Part.map (fun _ ‚Ü¶ 0) (f (v.get 0)))/[‚Äò0‚Äô, #0]) ‚Üî A x from this
  have : Partrec fun v : List.Vector ‚Ñï 1 ‚Ü¶ (f (v.get 0)).map fun _ ‚Ü¶ 0 := by
    refine Partrec.map (Partrec.comp hp (Primrec.to_comp <| Primrec.vector_get.comp .id (.const 0))) (Computable.const 0).to‚ÇÇ
  simpa [Semiformula.eval_substs, Matrix.comp_vecCons', Matrix.constant_eq_singleton]
    using (codeOfPartrec'_spec (Nat.Partrec'.of_part this) (v := ![x]) (y := 0)).trans (by simp [f])

variable {T : ArithmeticTheory} [ùó•‚ÇÄ ‚™Ø T] [T.SoundOnHierarchy ùö∫ 1]

lemma re_complete {A : ‚Ñï ‚Üí Prop} (hp : REPred A) {x : ‚Ñï} :
    A x ‚Üî T ‚ä¢ (codeOfREPred A)/[‚Äò‚Üëx‚Äô] := Iff.trans
  (by simpa [models_iff, Semiformula.eval_substs, Matrix.constant_eq_singleton] using (codeOfREPred_spec hp (x := x)).symm)
  (sigma_one_completeness_iff <| by simp [codeOfREPred, codeOfPartrec'])

end Arithmetic

end FirstOrder

end LO
