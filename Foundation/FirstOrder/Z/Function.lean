import Foundation.FirstOrder.Z.Basic

/-!
# Relations and functions in Zermelo set theory
-/

namespace LO.Zermelo

open FirstOrder SetTheory

variable {V : Type*} [SetStructure V] [Nonempty V] [V ‚äß‚Çò* ùó≠]

noncomputable def domain (R : V) : V := {x ‚àà ‚ãÉÀ¢ ‚ãÉÀ¢ R ; ‚àÉ y, kpair x y ‚àà R}

noncomputable def range (R : V) : V := {y ‚àà ‚ãÉÀ¢ ‚ãÉÀ¢ R ; ‚àÉ x, kpair x y ‚àà R}

section domain

lemma mem_sUnion_sUnion_of_kpair_mem_left {x y R : V} (h : kpair x y ‚àà R) : x ‚àà ‚ãÉÀ¢ ‚ãÉÀ¢ R := by
  simp only [mem_sUnion_iff]
  refine ‚ü®{x, y}, ‚ü®kpair x y, h, by simp [kpair]‚ü©, by simp‚ü©

lemma mem_domain_iff {R x : V} : x ‚àà domain R ‚Üî ‚àÉ y, kpair x y ‚àà R := by
  simpa [domain] using fun _ ‚Ü¶  mem_sUnion_sUnion_of_kpair_mem_left

def domain.dfn : Semisentence ‚Ñí‚Çõ‚Çë‚Çú 2 := f‚Äúd R. ‚àÄ x, x ‚àà d ‚Üî ‚àÉ y, !kpair.dfn x y ‚àà R‚Äù

instance domain.defined : ‚Ñí‚Çõ‚Çë‚Çú-function‚ÇÅ[V] domain via domain.dfn := ‚ü®fun v ‚Ü¶ by simp [dfn, mem_ext_iff (y := domain _), mem_domain_iff]‚ü©

instance domain.definable : ‚Ñí‚Çõ‚Çë‚Çú-function‚ÇÅ[V] domain := domain.defined.to_definable

lemma mem_domain_of_kpair_mem {R x y : V} (h : kpair x y ‚àà R) : x ‚àà domain R := mem_domain_iff.mpr ‚ü®y, h‚ü©

@[simp] lemma domain_empty : domain (‚àÖ : V) = ‚àÖ := by ext; simp [mem_domain_iff]

@[simp] lemma domain_prod (x y : V) [IsNonempty y] : domain (x √óÀ¢ y) = x := by
  ext z
  suffices z ‚àà x ‚Üí ‚àÉ x, x ‚àà y by simpa [mem_domain_iff]
  intro _
  exact IsNonempty.nonempty

lemma domain_subset_of_subset_prod {R X Y : V} (h : R ‚äÜ X √óÀ¢ Y) : domain R ‚äÜ X := by
  intro x hx
  have : ‚àÉ y, kpair x y ‚àà R := by simpa [mem_domain_iff] using hx
  rcases this with ‚ü®y, hy‚ü©
  have : x ‚àà X ‚àß y ‚àà Y := by simpa using h _ hy
  exact this.1

@[simp, grind =] lemma domain_insert {x y R : V} : domain (Insert.insert (kpair x y) R) = Insert.insert x (domain R) := by
  ext z; simp only [mem_domain_iff, mem_insert, kpair_iff]; grind

end domain

section range

lemma mem_sUnion_sUnion_of_kpair_mem_right {x y R : V} (h : kpair x y ‚àà R) : y ‚àà ‚ãÉÀ¢ ‚ãÉÀ¢ R := by
  simp only [mem_sUnion_iff]
  refine ‚ü®{x, y}, ‚ü®kpair x y, h, by simp [kpair]‚ü©, by simp‚ü©

lemma mem_range_iff {R y : V} : y ‚àà range R ‚Üî ‚àÉ x, kpair x y ‚àà R := by
  simpa [range] using fun _ ‚Ü¶ mem_sUnion_sUnion_of_kpair_mem_right

def range.dfn : Semisentence ‚Ñí‚Çõ‚Çë‚Çú 2 := f‚Äúr R. ‚àÄ y, y ‚àà r ‚Üî ‚àÉ x, !kpair.dfn x y ‚àà R‚Äù

instance range.defined : ‚Ñí‚Çõ‚Çë‚Çú-function‚ÇÅ[V] range via range.dfn := ‚ü®fun v ‚Ü¶ by simp [dfn, mem_ext_iff (y := range _), mem_range_iff]‚ü©

instance range.definable : ‚Ñí‚Çõ‚Çë‚Çú-function‚ÇÅ[V] range := range.defined.to_definable

lemma mem_range_of_kpair_mem {R x y : V} (h : kpair x y ‚àà R) : y ‚àà range R := mem_range_iff.mpr ‚ü®x, h‚ü©

@[simp] lemma range_empty : range (‚àÖ : V) = ‚àÖ := by ext; simp [mem_range_iff]

@[simp] lemma range_prod (x y : V) [IsNonempty x] : range (x √óÀ¢ y) = y := by
  ext z
  suffices z ‚àà y ‚Üí ‚àÉ v, v ‚àà x by simpa [mem_range_iff]
  intro _
  exact IsNonempty.nonempty

lemma range_subset_of_subset_prod {R X Y : V} (h : R ‚äÜ X √óÀ¢ Y) : range R ‚äÜ Y := by
  intro y hy
  have : ‚àÉ x, kpair x y ‚àà R := by simpa [mem_range_iff] using hy
  rcases this with ‚ü®x, hx‚ü©
  have : x ‚àà X ‚àß y ‚àà Y := by simpa using h _ hx
  exact this.2

@[simp, grind =] lemma range_insert {x y R : V} : range (Insert.insert (kpair x y) R) = Insert.insert y (range R) := by
  ext z; simp only [mem_range_iff, mem_insert, kpair_iff]; grind

end range

noncomputable def function (Y X : V) : V := {f ‚àà ‚Ñò (X √óÀ¢ Y) ; ‚àÄ x ‚àà X, ‚àÉ! y ‚àà Y, kpair x y ‚àà f}

noncomputable instance : Pow V V := ‚ü®fun Y X ‚Ü¶ function Y X‚ü©

lemma function_def {Y X : V} : Y ^ X = function Y X := rfl

lemma mem_function_iff {f Y X : V} : f ‚àà Y ^ X ‚Üî f ‚äÜ X √óÀ¢ Y ‚àß ‚àÄ x ‚àà X, ‚àÉ! y ‚àà Y, kpair x y ‚àà f := by simp [function, function_def]

def function.dfn : Semisentence ‚Ñí‚Çõ‚Çë‚Çú 3 := f‚ÄúF Y X. ‚àÄ f, f ‚àà F ‚Üî f ‚äÜ !prod.dfn X Y ‚àß ‚àÄ x ‚àà X, ‚àÉ! y, y ‚àà Y ‚àß !kpair.dfn x y ‚àà f‚Äù

instance function.defined : ‚Ñí‚Çõ‚Çë‚Çú-function‚ÇÇ[V] (¬∑^¬∑) via function.dfn :=
  ‚ü®fun v ‚Ü¶ by simp [function.dfn, mem_ext_iff (y := (v 1)^(v 2)), mem_function_iff]‚ü©

instance function.definable : ‚Ñí‚Çõ‚Çë‚Çú-function‚ÇÇ[V] (¬∑^¬∑) := function.defined.to_definable

lemma mem_function.intro {f X Y : V} (prod : f ‚äÜ X √óÀ¢ Y) (total : ‚àÄ x ‚àà X, ‚àÉ! y ‚àà Y, kpair x y ‚àà f) : f ‚àà Y ^ X :=
  mem_function_iff.mpr ‚ü®prod, total‚ü©

lemma subset_prod_of_mem_function {f X Y : V} (h : f ‚àà Y ^ X) : f ‚äÜ X √óÀ¢ Y := mem_function_iff.mp h |>.1

lemma total_of_mem_function {f X Y : V} (h : f ‚àà Y ^ X) : ‚àÄ x ‚àà X, ‚àÉ! y ‚àà Y, kpair x y ‚àà f := mem_function_iff.mp h |>.2

lemma domain_eq_of_mem_function {f X Y : V} (h : f ‚àà Y ^ X) : domain f = X := by
  ext x
  suffices (‚àÉ y, kpair x y ‚àà f) ‚Üî x ‚àà X by simpa [mem_domain_iff]
  constructor
  ¬∑ rintro ‚ü®y, hxy‚ü©
    have : x ‚àà X ‚àß y ‚àà Y := by simpa using subset_prod_of_mem_function h _ hxy
    exact this.1
  ¬∑ intro hx
    have : ‚àÉ! y, y ‚àà Y ‚àß kpair x y ‚àà f := total_of_mem_function h x hx
    rcases this.exists with ‚ü®y, _, hy‚ü©
    exact ‚ü®y, hy‚ü©

lemma range_subset_of_mem_function {f X Y : V} (h : f ‚àà Y ^ X) : range f ‚äÜ Y := by
  intro y hy
  have : ‚àÉ x, kpair x y ‚àà f := by simpa [mem_range_iff] using hy
  rcases this with ‚ü®x, hxy‚ü©
  have : x ‚àà X ‚àß y ‚àà Y := by simpa using subset_prod_of_mem_function h _ hxy
  exact this.2

lemma mem_function_range_of_mem_function {f X Y : V} (h : f ‚àà Y ^ X) : f ‚àà range f ^ X := by
  have : f ‚äÜ X √óÀ¢ range f := by
    intro p hp
    have : ‚àÉ x ‚àà X, ‚àÉ y ‚àà Y, p = kpair x y := by
      simpa [mem_prod_iff] using subset_prod_of_mem_function h _ hp
    rcases this with ‚ü®x, hx, y, hy, rfl‚ü©
    simpa [hx, mem_range_iff] using ‚ü®x, hp‚ü©
  apply mem_function.intro this
  intro x hx
  rcases total_of_mem_function h x hx |>.exists with ‚ü®y, hy, hf‚ü©
  apply ExistsUnique.intro y ‚ü®by simpa [mem_range_iff] using ‚ü®x, hf‚ü©, hf‚ü©
  intro y' ‚ü®hy', hf'‚ü©
  have : y' ‚àà Y := by
    have : x ‚àà X ‚àß y' ‚àà Y := by simpa using subset_prod_of_mem_function h _ hf'
    exact this.2
  have : y' = y := total_of_mem_function h x hx |>.unique (y‚ÇÅ := y') (y‚ÇÇ := y) ‚ü®this, hf'‚ü© ‚ü®hy, hf‚ü©
  assumption

lemma mem_function_of_mem_function_of_subset {f X Y‚ÇÅ Y‚ÇÇ : V} (h : f ‚àà Y‚ÇÅ ^ X) (hY : Y‚ÇÅ ‚äÜ Y‚ÇÇ) : f ‚àà Y‚ÇÇ ^ X := by
  have : f ‚äÜ X √óÀ¢ Y‚ÇÇ := calc
    f ‚äÜ X √óÀ¢ Y‚ÇÅ := subset_prod_of_mem_function h
    _ ‚äÜ X √óÀ¢ Y‚ÇÇ := prod_subset_prod_of_subset (by rfl) hY
  apply mem_function.intro this
  intro x hx
  rcases total_of_mem_function h x hx |>.exists with ‚ü®y, hy, hf‚ü©
  apply ExistsUnique.intro y ‚ü®hY _ hy, hf‚ü©
  intro y' ‚ü®hy', hf'‚ü©
  have : y' ‚àà Y‚ÇÅ := by
    have : x ‚àà X ‚àß y' ‚àà Y‚ÇÅ := by simpa using subset_prod_of_mem_function h _ hf'
    exact this.2
  have : y' = y := total_of_mem_function h x hx |>.unique (y‚ÇÅ := y') (y‚ÇÇ := y) ‚ü®this, hf'‚ü© ‚ü®hy, hf‚ü©
  assumption

lemma function_subset_function_of_subset {Y‚ÇÅ Y‚ÇÇ : V} (hY : Y‚ÇÅ ‚äÜ Y‚ÇÇ) (X : V) : Y‚ÇÅ ^ X ‚äÜ Y‚ÇÇ ^ X :=
  fun _ hf ‚Ü¶ mem_function_of_mem_function_of_subset hf hY

@[simp] lemma empty_function_empty : (‚àÖ : V) ^ (‚àÖ : V) = {‚àÖ} := by ext z; simp [mem_function_iff]

class IsFunction (f : V) : Prop where
  mem_func : ‚àÉ X Y : V, f ‚àà Y ^ X

lemma isFunction_def {f : V} : IsFunction f ‚Üî ‚àÉ X Y : V, f ‚àà Y ^ X := ‚ü®fun h ‚Ü¶ h.mem_func, fun h ‚Ü¶ ‚ü®h‚ü©‚ü©

def IsFunction.dfn : Semisentence ‚Ñí‚Çõ‚Çë‚Çú 1 := f‚Äúf. ‚àÉ X Y, f ‚àà !function.dfn Y X‚Äù

instance IsFunction.defined : ‚Ñí‚Çõ‚Çë‚Çú-predicate[V] IsFunction via dfn := ‚ü®fun v ‚Ü¶ by simp [isFunction_def, dfn]‚ü©

instance IsFunction.definable : ‚Ñí‚Çõ‚Çë‚Çú-predicate[V] IsFunction := defined.to_definable

lemma isFunction_iff {f : V} : IsFunction f ‚Üî f ‚àà range f ^ domain f := by
  constructor
  ¬∑ rintro ‚ü®X, Y, hf‚ü©
    simpa [domain_eq_of_mem_function hf] using mem_function_range_of_mem_function hf
  ¬∑ intro h
    exact ‚ü®_, _, h‚ü©

namespace IsFunction

lemma mem_function (f : V) [hf : IsFunction f] : f ‚àà range f ^ domain f := isFunction_iff.mp hf

lemma unique {f : V} [hf : IsFunction f] {x y‚ÇÅ y‚ÇÇ} (h‚ÇÅ : kpair x y‚ÇÅ ‚àà f) (h‚ÇÇ : kpair x y‚ÇÇ ‚àà f) : y‚ÇÅ = y‚ÇÇ := by
  have : ‚àÉ! y, y ‚àà range f ‚àß kpair x y ‚àà f := total_of_mem_function (isFunction_iff.mp hf) x (mem_domain_of_kpair_mem h‚ÇÅ)
  exact this.unique ‚ü®mem_range_of_kpair_mem h‚ÇÅ, h‚ÇÅ‚ü© ‚ü®mem_range_of_kpair_mem h‚ÇÇ, h‚ÇÇ‚ü©

@[simp] instance empty : IsFunction (‚àÖ : V) := ‚ü®‚àÖ, ‚àÖ, by simp‚ü©

instance insert (f x y : V) (hx : x ‚àâ domain f) [hf : IsFunction f] : IsFunction (Insert.insert (kpair x y) f) := by
  refine ‚ü®Insert.insert x (domain f), Insert.insert y (range f), ?_‚ü©
  apply mem_function.intro
  ¬∑ have : f ‚äÜ domain f √óÀ¢ range f := subset_prod_of_mem_function hf.mem_function
    exact insert_kpair_subset_insert_prod_insert_of_subset_prod this x y
  ¬∑ intro z hz
    rcases show z = x ‚à® z ‚àà domain f by simpa using hz with (rfl | hz)
    ¬∑ apply ExistsUnique.intro y (by simp)
      rintro y' ‚ü®hy', H'‚ü©
      rcases show y' = y ‚à® kpair z y' ‚àà f by simpa using H' with (rfl | H')
      ¬∑ rfl
      have : z ‚àà domain f := mem_domain_of_kpair_mem H'
      contradiction
    ¬∑ rcases mem_domain_iff.mp hz with ‚ü®v, hzv‚ü©
      have : v ‚àà range f := mem_range_of_kpair_mem hzv
      apply ExistsUnique.intro v ‚ü®by simp [this], by simp [hzv]‚ü©
      rintro w ‚ü®hw, Hw‚ü©
      rcases show z = x ‚àß w = y ‚à® kpair z w ‚àà f by simpa using Hw with (‚ü®rfl, rfl‚ü© | Hw)
      ¬∑ have : z ‚àà domain f := mem_domain_of_kpair_mem hzv
        contradiction
      exact hf.unique Hw hzv

@[simp] instance (x y : V) : IsFunction ({kpair x y} : V) := by simpa using insert ‚àÖ x y (by simp)

end IsFunction

end LO.Zermelo
