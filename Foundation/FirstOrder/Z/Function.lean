import Foundation.FirstOrder.Z.Basic

/-!
# Relations and functions in Zermelo set theory
-/

namespace LO.Zermelo

open FirstOrder SetTheory

variable {V : Type*} [SetStructure V] [Nonempty V] [V ‚äß‚Çò* ùó≠]

/-! ### Relations -/

noncomputable def domain (R : V) : V := {x ‚àà ‚ãÉÀ¢ ‚ãÉÀ¢ R ; ‚àÉ y, ‚ü®x, y‚ü©‚Çñ ‚àà R}

noncomputable def range (R : V) : V := {y ‚àà ‚ãÉÀ¢ ‚ãÉÀ¢ R ; ‚àÉ x, ‚ü®x, y‚ü©‚Çñ ‚àà R}

section domain

lemma mem_sUnion_sUnion_of_kpair_mem_left {x y R : V} (h : ‚ü®x, y‚ü©‚Çñ ‚àà R) : x ‚àà ‚ãÉÀ¢ ‚ãÉÀ¢ R := by
  simp only [mem_sUnion_iff]
  refine ‚ü®{x, y}, ‚ü®‚ü®x, y‚ü©‚Çñ, h, by simp [kpair]‚ü©, by simp‚ü©

lemma mem_domain_iff {R x : V} : x ‚àà domain R ‚Üî ‚àÉ y, ‚ü®x, y‚ü©‚Çñ ‚àà R := by
  simpa [domain] using fun _ ‚Ü¶  mem_sUnion_sUnion_of_kpair_mem_left

def domain.dfn : Semisentence ‚Ñí‚Çõ‚Çë‚Çú 2 := f‚Äúd R. ‚àÄ x, x ‚àà d ‚Üî ‚àÉ y, !kpair.dfn x y ‚àà R‚Äù

instance domain.defined : ‚Ñí‚Çõ‚Çë‚Çú-function‚ÇÅ[V] domain via domain.dfn := ‚ü®fun v ‚Ü¶ by simp [dfn, mem_ext_iff (y := domain _), mem_domain_iff]‚ü©

instance domain.definable : ‚Ñí‚Çõ‚Çë‚Çú-function‚ÇÅ[V] domain := domain.defined.to_definable

lemma mem_domain_of_kpair_mem {R x y : V} (h : ‚ü®x, y‚ü©‚Çñ ‚àà R) : x ‚àà domain R := mem_domain_iff.mpr ‚ü®y, h‚ü©

@[simp] lemma domain_empty : domain (‚àÖ : V) = ‚àÖ := by ext; simp [mem_domain_iff]

@[simp] lemma domain_prod (x y : V) [IsNonempty y] : domain (x √óÀ¢ y) = x := by
  ext z
  suffices z ‚àà x ‚Üí ‚àÉ x, x ‚àà y by simpa [mem_domain_iff]
  intro _
  exact IsNonempty.nonempty

lemma domain_subset_of_subset_prod {R X Y : V} (h : R ‚äÜ X √óÀ¢ Y) : domain R ‚äÜ X := by
  intro x hx
  have : ‚àÉ y, ‚ü®x, y‚ü©‚Çñ ‚àà R := by simpa [mem_domain_iff] using hx
  rcases this with ‚ü®y, hy‚ü©
  have : x ‚àà X ‚àß y ‚àà Y := by simpa using h _ hy
  exact this.1

@[simp, grind =] lemma domain_insert {x y R : V} : domain (Insert.insert (‚ü®x, y‚ü©‚Çñ) R) = Insert.insert x (domain R) := by
  ext z; simp only [mem_domain_iff, mem_insert, kpair_iff]; grind

end domain

section range

lemma mem_sUnion_sUnion_of_kpair_mem_right {x y R : V} (h : ‚ü®x, y‚ü©‚Çñ ‚àà R) : y ‚àà ‚ãÉÀ¢ ‚ãÉÀ¢ R := by
  simp only [mem_sUnion_iff]
  refine ‚ü®{x, y}, ‚ü®‚ü®x, y‚ü©‚Çñ, h, by simp [kpair]‚ü©, by simp‚ü©

lemma mem_range_iff {R y : V} : y ‚àà range R ‚Üî ‚àÉ x, ‚ü®x, y‚ü©‚Çñ ‚àà R := by
  simpa [range] using fun _ ‚Ü¶ mem_sUnion_sUnion_of_kpair_mem_right

def range.dfn : Semisentence ‚Ñí‚Çõ‚Çë‚Çú 2 := f‚Äúr R. ‚àÄ y, y ‚àà r ‚Üî ‚àÉ x, !kpair.dfn x y ‚àà R‚Äù

instance range.defined : ‚Ñí‚Çõ‚Çë‚Çú-function‚ÇÅ[V] range via range.dfn := ‚ü®fun v ‚Ü¶ by simp [dfn, mem_ext_iff (y := range _), mem_range_iff]‚ü©

instance range.definable : ‚Ñí‚Çõ‚Çë‚Çú-function‚ÇÅ[V] range := range.defined.to_definable

lemma mem_range_of_kpair_mem {R x y : V} (h : ‚ü®x, y‚ü©‚Çñ ‚àà R) : y ‚àà range R := mem_range_iff.mpr ‚ü®x, h‚ü©

@[simp] lemma range_empty : range (‚àÖ : V) = ‚àÖ := by ext; simp [mem_range_iff]

@[simp] lemma range_prod (x y : V) [IsNonempty x] : range (x √óÀ¢ y) = y := by
  ext z
  suffices z ‚àà y ‚Üí ‚àÉ v, v ‚àà x by simpa [mem_range_iff]
  intro _
  exact IsNonempty.nonempty

lemma range_subset_of_subset_prod {R X Y : V} (h : R ‚äÜ X √óÀ¢ Y) : range R ‚äÜ Y := by
  intro y hy
  have : ‚àÉ x, ‚ü®x, y‚ü©‚Çñ ‚àà R := by simpa [mem_range_iff] using hy
  rcases this with ‚ü®x, hx‚ü©
  have : x ‚àà X ‚àß y ‚àà Y := by simpa using h _ hx
  exact this.2

@[simp, grind =] lemma range_insert {x y R : V} : range (Insert.insert (‚ü®x, y‚ü©‚Çñ) R) = Insert.insert y (range R) := by
  ext z; simp only [mem_range_iff, mem_insert, kpair_iff]; grind

end range

/-! ### Functions -/

noncomputable def function (Y X : V) : V := {f ‚àà ‚Ñò (X √óÀ¢ Y) ; ‚àÄ x ‚àà X, ‚àÉ! y, ‚ü®x, y‚ü©‚Çñ ‚àà f}

noncomputable instance : Pow V V := ‚ü®fun Y X ‚Ü¶ function Y X‚ü©

lemma function_def {Y X : V} : Y ^ X = function Y X := rfl

lemma mem_function_iff {f Y X : V} : f ‚àà Y ^ X ‚Üî f ‚äÜ X √óÀ¢ Y ‚àß ‚àÄ x ‚àà X, ‚àÉ! y, ‚ü®x, y‚ü©‚Çñ ‚àà f := by simp [function, function_def]

def function.dfn : Semisentence ‚Ñí‚Çõ‚Çë‚Çú 3 := f‚ÄúF Y X. ‚àÄ f, f ‚àà F ‚Üî f ‚äÜ !prod.dfn X Y ‚àß ‚àÄ x ‚àà X, ‚àÉ! y, !kpair.dfn x y ‚àà f‚Äù

instance function.defined : ‚Ñí‚Çõ‚Çë‚Çú-function‚ÇÇ[V] (¬∑^¬∑) via function.dfn :=
  ‚ü®fun v ‚Ü¶ by simp [function.dfn, mem_ext_iff (y := (v 1)^(v 2)), mem_function_iff]‚ü©

instance function.definable : ‚Ñí‚Çõ‚Çë‚Çú-function‚ÇÇ[V] (¬∑^¬∑) := function.defined.to_definable

lemma mem_function.intro {f X Y : V} (prod : f ‚äÜ X √óÀ¢ Y) (total : ‚àÄ x ‚àà X, ‚àÉ! y, ‚ü®x, y‚ü©‚Çñ ‚àà f) : f ‚àà Y ^ X :=
  mem_function_iff.mpr ‚ü®prod, total‚ü©

lemma subset_prod_of_mem_function {f X Y : V} (h : f ‚àà Y ^ X) : f ‚äÜ X √óÀ¢ Y := mem_function_iff.mp h |>.1

lemma function_subset_power_prod (X Y : V) : Y ^ X ‚äÜ ‚Ñò (X √óÀ¢ Y) := fun f hf ‚Ü¶ by simpa using subset_prod_of_mem_function hf

lemma exists_unique_of_mem_function {f X Y : V} (h : f ‚àà Y ^ X) : ‚àÄ x ‚àà X, ‚àÉ! y, ‚ü®x, y‚ü©‚Çñ ‚àà f := mem_function_iff.mp h |>.2

lemma exists_of_mem_function {f X Y : V} (h : f ‚àà Y ^ X) : ‚àÄ x ‚àà X, ‚àÉ y ‚àà Y, ‚ü®x, y‚ü©‚Çñ ‚àà f := by
  intro x hx
  rcases (exists_unique_of_mem_function h x hx).exists with ‚ü®y, hy‚ü©
  have : x ‚àà X ‚àß y ‚àà Y := by simpa using subset_prod_of_mem_function h _ hy
  exact ‚ü®y, this.2, hy‚ü©

lemma domain_eq_of_mem_function {f X Y : V} (h : f ‚àà Y ^ X) : domain f = X := by
  ext x
  suffices (‚àÉ y, ‚ü®x, y‚ü©‚Çñ ‚àà f) ‚Üî x ‚àà X by simpa [mem_domain_iff]
  constructor
  ¬∑ rintro ‚ü®y, hxy‚ü©
    have : x ‚àà X ‚àß y ‚àà Y := by simpa using subset_prod_of_mem_function h _ hxy
    exact this.1
  ¬∑ intro hx
    rcases exists_of_mem_function h x hx with ‚ü®y, hy‚ü©
    exact ‚ü®y, hy.2‚ü©

lemma range_subset_of_mem_function {f X Y : V} (h : f ‚àà Y ^ X) : range f ‚äÜ Y := by
  intro y hy
  have : ‚àÉ x, ‚ü®x, y‚ü©‚Çñ ‚àà f := by simpa [mem_range_iff] using hy
  rcases this with ‚ü®x, hxy‚ü©
  have : x ‚àà X ‚àß y ‚àà Y := by simpa using subset_prod_of_mem_function h _ hxy
  exact this.2

lemma mem_function_range_of_mem_function {f X Y : V} (h : f ‚àà Y ^ X) : f ‚àà range f ^ X := by
  have : f ‚äÜ X √óÀ¢ range f := by
    intro p hp
    have : ‚àÉ x ‚àà X, ‚àÉ y ‚àà Y, p = ‚ü®x, y‚ü©‚Çñ := by
      simpa [mem_prod_iff] using subset_prod_of_mem_function h _ hp
    rcases this with ‚ü®x, hx, y, hy, rfl‚ü©
    simpa [hx, mem_range_iff] using ‚ü®x, hp‚ü©
  apply mem_function.intro this
  intro x hx
  rcases exists_unique_of_mem_function h x hx |>.exists with ‚ü®y, hf‚ü©
  apply ExistsUnique.intro y hf
  intro y' hf'
  have : y' = y := exists_unique_of_mem_function h x hx |>.unique hf' hf
  assumption

lemma mem_function_of_mem_function_of_subset {f X Y‚ÇÅ Y‚ÇÇ : V} (h : f ‚àà Y‚ÇÅ ^ X) (hY : Y‚ÇÅ ‚äÜ Y‚ÇÇ) : f ‚àà Y‚ÇÇ ^ X := by
  have : f ‚äÜ X √óÀ¢ Y‚ÇÇ := calc
    f ‚äÜ X √óÀ¢ Y‚ÇÅ := subset_prod_of_mem_function h
    _ ‚äÜ X √óÀ¢ Y‚ÇÇ := prod_subset_prod_of_subset (by rfl) hY
  apply mem_function.intro this
  intro x hx
  rcases exists_unique_of_mem_function h x hx |>.exists with ‚ü®y, hf‚ü©
  apply ExistsUnique.intro y hf
  intro y' hf'
  have : y' = y := exists_unique_of_mem_function h x hx |>.unique hf' hf
  assumption

lemma function_subset_function_of_subset {Y‚ÇÅ Y‚ÇÇ : V} (hY : Y‚ÇÅ ‚äÜ Y‚ÇÇ) (X : V) : Y‚ÇÅ ^ X ‚äÜ Y‚ÇÇ ^ X :=
  fun _ hf ‚Ü¶ mem_function_of_mem_function_of_subset hf hY

@[simp] lemma empty_function_empty : (‚àÖ : V) ^ (‚àÖ : V) = {‚àÖ} := by ext z; simp [mem_function_iff]

/-- Functions over arbitrary domain and range -/
class IsFunction (f : V) : Prop where
  mem_func : ‚àÉ X Y : V, f ‚àà Y ^ X

lemma isFunction_def {f : V} : IsFunction f ‚Üî ‚àÉ X Y : V, f ‚àà Y ^ X := ‚ü®fun h ‚Ü¶ h.mem_func, fun h ‚Ü¶ ‚ü®h‚ü©‚ü©

def IsFunction.dfn : Semisentence ‚Ñí‚Çõ‚Çë‚Çú 1 := f‚Äúf. ‚àÉ X Y, f ‚àà !function.dfn Y X‚Äù

instance IsFunction.defined : ‚Ñí‚Çõ‚Çë‚Çú-predicate[V] IsFunction via dfn := ‚ü®fun v ‚Ü¶ by simp [isFunction_def, dfn]‚ü©

instance IsFunction.definable : ‚Ñí‚Çõ‚Çë‚Çú-predicate[V] IsFunction := defined.to_definable

lemma isFunction_iff {f : V} : IsFunction f ‚Üî f ‚àà range f ^ domain f := by
  constructor
  ¬∑ rintro ‚ü®X, Y, hf‚ü©
    simpa [domain_eq_of_mem_function hf] using mem_function_range_of_mem_function hf
  ¬∑ intro h
    exact ‚ü®_, _, h‚ü©

namespace IsFunction

lemma of_mem {f X Y : V} (h : f ‚àà Y ^ X) : IsFunction f := ‚ü®X, Y, h‚ü©

lemma mem_function (f : V) [hf : IsFunction f] : f ‚àà range f ^ domain f := isFunction_iff.mp hf

lemma unique {f : V} [hf : IsFunction f] {x y‚ÇÅ y‚ÇÇ} (h‚ÇÅ : ‚ü®x, y‚ÇÅ‚ü©‚Çñ ‚àà f) (h‚ÇÇ : ‚ü®x, y‚ÇÇ‚ü©‚Çñ ‚àà f) : y‚ÇÅ = y‚ÇÇ := by
  have : ‚àÉ! y, ‚ü®x, y‚ü©‚Çñ ‚àà f := exists_unique_of_mem_function (isFunction_iff.mp hf) x (mem_domain_of_kpair_mem h‚ÇÅ)
  exact this.unique h‚ÇÅ h‚ÇÇ

@[simp] instance empty : IsFunction (‚àÖ : V) := ‚ü®‚àÖ, ‚àÖ, by simp‚ü©

def insert (f x y : V) (hx : x ‚àâ domain f) [hf : IsFunction f] : IsFunction (Insert.insert (‚ü®x, y‚ü©‚Çñ) f) := by
  refine ‚ü®Insert.insert x (domain f), Insert.insert y (range f), ?_‚ü©
  apply mem_function.intro
  ¬∑ have : f ‚äÜ domain f √óÀ¢ range f := subset_prod_of_mem_function hf.mem_function
    exact insert_kpair_subset_insert_prod_insert_of_subset_prod this x y
  ¬∑ intro z hz
    rcases show z = x ‚à® z ‚àà domain f by simpa using hz with (rfl | hz)
    ¬∑ apply ExistsUnique.intro y (by simp)
      rintro y' H'
      rcases show y' = y ‚à® ‚ü®z, y'‚ü©‚Çñ ‚àà f by simpa using H' with (rfl | H')
      ¬∑ rfl
      have : z ‚àà domain f := mem_domain_of_kpair_mem H'
      contradiction
    ¬∑ rcases mem_domain_iff.mp hz with ‚ü®v, hzv‚ü©
      have : v ‚àà range f := mem_range_of_kpair_mem hzv
      apply ExistsUnique.intro v (by simp [hzv])
      rintro w Hw
      rcases show z = x ‚àß w = y ‚à® ‚ü®z, w‚ü©‚Çñ ‚àà f by simpa using Hw with (‚ü®rfl, rfl‚ü© | Hw)
      ¬∑ have : z ‚àà domain f := mem_domain_of_kpair_mem hzv
        contradiction
      exact hf.unique Hw hzv

@[simp] instance (x y : V) : IsFunction ({‚ü®x, y‚ü©‚Çñ} : V) := by simpa using insert ‚àÖ x y (by simp)

end IsFunction

def Injective (R : V) : Prop := ‚àÄ x‚ÇÅ x‚ÇÇ y, ‚ü®x‚ÇÅ, y‚ü©‚Çñ ‚àà R ‚Üí ‚ü®x‚ÇÇ, y‚ü©‚Çñ ‚àà R ‚Üí x‚ÇÅ = x‚ÇÇ

def Injective.dfn : Semisentence ‚Ñí‚Çõ‚Çë‚Çú 1 := f‚Äúf. ‚àÄ x‚ÇÅ x‚ÇÇ y, !kpair.dfn x‚ÇÅ y ‚àà f ‚Üí !kpair.dfn x‚ÇÇ y ‚àà f ‚Üí x‚ÇÅ = x‚ÇÇ‚Äù

instance Injective.defined : ‚Ñí‚Çõ‚Çë‚Çú-predicate[V] Injective via dfn := ‚ü®fun v ‚Ü¶ by simp [Injective, dfn]‚ü©

instance Injective.definable : ‚Ñí‚Çõ‚Çë‚Çú-predicate[V] Injective := defined.to_definable

lemma Injective.empty : Injective (‚àÖ : V) := fun x‚ÇÅ x‚ÇÇ y ‚Ü¶ by simp

/-- Identity -/
noncomputable def identity (X : V) : V := {p ‚àà X √óÀ¢ X ; ‚àÉ x ‚àà X, p = ‚ü®x, x‚ü©‚Çñ}

lemma mem_identity_iff {X p : V} : p ‚àà identity X ‚Üî ‚àÉ x ‚àà X, p = ‚ü®x, x‚ü©‚Çñ := by
  suffices ‚àÄ x ‚àà X, p = ‚ü®x, x‚ü©‚Çñ ‚Üí p ‚àà X √óÀ¢ X by simpa [identity]
  rintro x hx rfl
  simp [hx]

def identity.dfn : Semisentence ‚Ñí‚Çõ‚Çë‚Çú 2 := f‚Äúi X. ‚àÄ p, p ‚àà i ‚Üî ‚àÉ x ‚àà X, p = !kpair.dfn x x‚Äù

instance identity.defined : ‚Ñí‚Çõ‚Çë‚Çú-function‚ÇÅ[V] identity via dfn := ‚ü®fun v ‚Ü¶ by simp [dfn, mem_ext_iff (y := identity (v 1)), mem_identity_iff]‚ü©

instance identity.definable : ‚Ñí‚Çõ‚Çë‚Çú-function‚ÇÅ[V] identity := defined.to_definable

@[simp] lemma kpair_mem_identity_iff {X x : V} : ‚ü®x, y‚ü©‚Çñ ‚àà identity X ‚Üî x ‚àà X ‚àß x = y := by
  simp only [mem_identity_iff, kpair_iff, exists_eq_right_right', and_congr_left_iff]
  grind

@[simp] lemma identity_mem_function (X : V) : identity X ‚àà X ^ X := by
  refine mem_function.intro ?_ ?_
  ¬∑ intro p hp
    have : ‚àÉ x ‚àà X, p = ‚ü®x, x‚ü©‚Çñ := by simpa [mem_identity_iff] using hp
    rcases this with ‚ü®x, hx, rfl‚ü©
    simp_all
  ¬∑ intro x hx
    apply ExistsUnique.intro x (by simp [hx])
    simp only [kpair_mem_identity_iff, and_imp]
    grind

instance IsFunction.identity (X : V) : IsFunction (identity X) := IsFunction.of_mem (identity_mem_function X)

@[simp] lemma identity_injective (X : V) : Injective (identity X) := by
  intro x‚ÇÅ x‚ÇÇ y h‚ÇÅ h‚ÇÇ
  rcases show x‚ÇÅ ‚àà X ‚àß x‚ÇÅ = y by simpa using h‚ÇÅ with ‚ü®hx‚ÇÅ, rfl‚ü©
  rcases show x‚ÇÇ ‚àà X ‚àß x‚ÇÇ = x‚ÇÅ by simpa using h‚ÇÇ with ‚ü®hx‚ÇÇ, rfl‚ü©
  rfl

/-- Composition -/
noncomputable def compose (R S : V) : V := {p ‚àà domain R √óÀ¢ range S ; ‚àÉ x y z, ‚ü®x, y‚ü©‚Çñ ‚àà R ‚àß ‚ü®y, z‚ü©‚Çñ ‚àà S ‚àß p = ‚ü®x, z‚ü©‚Çñ}

lemma mem_compose_iff {R S p : V} : p ‚àà compose R S ‚Üî ‚àÉ x y z, ‚ü®x, y‚ü©‚Çñ ‚àà R ‚àß ‚ü®y, z‚ü©‚Çñ ‚àà S ‚àß p = ‚ü®x, z‚ü©‚Çñ := by
  simp only [compose, exists_and_left, mem_sep_iff, and_iff_right_iff_imp, forall_exists_index, and_imp]
  rintro x y hxy z hyz rfl
  simp [mem_domain_of_kpair_mem hxy, mem_range_of_kpair_mem hyz]

@[simp] lemma kpair_mem_compose_iff {R S x z : V} :
    ‚ü®x, z‚ü©‚Çñ ‚àà compose R S ‚Üî ‚àÉ y, ‚ü®x, y‚ü©‚Çñ ‚àà R ‚àß ‚ü®y, z‚ü©‚Çñ ‚àà S := by
  simp only [mem_compose_iff, kpair_iff, exists_and_left, exists_eq_right_right']
  grind

lemma compose_subset_prod {X Y Z R S : V} (hR : R ‚äÜ X √óÀ¢ Y) (hS : S ‚äÜ Y √óÀ¢ Z) : compose R S ‚äÜ X √óÀ¢ Z := by
  intro p hp
  rcases mem_compose_iff.mp hp with ‚ü®x, y, z, hxy, hyz, rfl‚ü©
  have : x ‚àà X ‚àß y ‚àà Y := by simpa using hR _ hxy
  have : y ‚àà Y ‚àß z ‚àà Z := by simpa using hS _ hyz
  simp_all

lemma compose_function {X Y Z f g : V} (hf : f ‚àà Y ^ X) (hg : g ‚àà Z ^ Y) : compose f g ‚àà Z ^ X := by
  have : IsFunction f := IsFunction.of_mem hf
  have : IsFunction g := IsFunction.of_mem hg
  apply mem_function.intro ?_ ?_
  ¬∑ exact compose_subset_prod (subset_prod_of_mem_function hf) (subset_prod_of_mem_function hg)
  ¬∑ intro x hx
    have : ‚àÉ y ‚àà Y, ‚ü®x, y‚ü©‚Çñ ‚àà f := exists_of_mem_function hf x hx
    rcases this with ‚ü®y, hy, hxy‚ü©
    have : ‚àÉ z ‚àà Z, ‚ü®y, z‚ü©‚Çñ ‚àà g := exists_of_mem_function hg y hy
    rcases this with ‚ü®z, hz, hyz‚ü©
    apply ExistsUnique.intro z (by simpa using ‚ü®y, hxy, hyz‚ü©)
    intro z' hz'
    have : ‚àÉ y', ‚ü®x, y'‚ü©‚Çñ ‚àà f ‚àß ‚ü®y', z'‚ü©‚Çñ ‚àà g := by simpa using hz'
    rcases this with ‚ü®y', hxy', hy'z'‚ü©
    rcases IsFunction.unique hxy hxy'
    rcases IsFunction.unique hyz hy'z'
    rfl

lemma compose_injective {R S : V} (hR : Injective R) (hS : Injective S) : Injective (compose R S) := by
  intro x‚ÇÅ x‚ÇÇ z h‚ÇÅ h‚ÇÇ
  have : ‚àÉ y‚ÇÅ, ‚ü®x‚ÇÅ, y‚ÇÅ‚ü©‚Çñ ‚àà R ‚àß ‚ü®y‚ÇÅ, z‚ü©‚Çñ ‚àà S := by simpa using h‚ÇÅ
  rcases this with ‚ü®y‚ÇÅ, hx‚ÇÅy‚ÇÅ, hy‚ÇÅz‚ü©
  have : ‚àÉ y‚ÇÇ, ‚ü®x‚ÇÇ, y‚ÇÇ‚ü©‚Çñ ‚àà R ‚àß ‚ü®y‚ÇÇ, z‚ü©‚Çñ ‚àà S := by simpa using h‚ÇÇ
  rcases this with ‚ü®y‚ÇÇ, hx‚ÇÇy‚ÇÇ, hy‚ÇÇz‚ü©
  have : y‚ÇÅ = y‚ÇÇ := hS y‚ÇÅ y‚ÇÇ z hy‚ÇÅz hy‚ÇÇz
  rcases this
  exact hR x‚ÇÅ x‚ÇÇ y‚ÇÅ hx‚ÇÅy‚ÇÅ hx‚ÇÇy‚ÇÇ

/-! ### Cardinality comparison -/

def CardLE (X Y : V) : Prop := ‚àÉ f ‚àà Y ^ X, Injective f

scoped instance : LE V := ‚ü®CardLE‚ü©

lemma cardLE_of_subset {X Y : V} (h : X ‚äÜ Y) : X ‚â§ Y :=
  ‚ü®identity X, mem_function_of_mem_function_of_subset (identity_mem_function X) h, by simp‚ü©

@[simp] lemma cardLE_empty (X : V) : ‚àÖ ‚â§ X := cardLE_of_subset (by simp)

@[simp, refl] lemma CardLE.refl (X : V) : X ‚â§ X := cardLE_of_subset (by simp)

@[trans] lemma CardLE.trans {X Y Z : V} : X ‚â§ Y ‚Üí Y ‚â§ Z ‚Üí X ‚â§ Z := by
  rintro ‚ü®f, hf, f_inj‚ü©
  rintro ‚ü®g, hg, g_inj‚ü©
  refine ‚ü®compose f g, compose_function hf hg, compose_injective f_inj g_inj‚ü©

instance : Preorder V where
  le_refl := CardLE.refl
  le_trans _ _ _ := CardLE.trans

lemma cardLE_def {X Y : V} : X ‚â§ Y ‚Üî ‚àÉ f ‚àà Y ^ X, Injective f := by rfl

lemma cardLT_def {X Y : V} : X < Y ‚Üî X ‚â§ Y ‚àß ¬¨Y ‚â§ X := by rfl

def CardLE.dfn : Semisentence ‚Ñí‚Çõ‚Çë‚Çú 2 := f‚ÄúX Y. ‚àÉ f ‚àà !function.dfn Y X, !Injective.dfn f‚Äù

instance CardLE.defined : ‚Ñí‚Çõ‚Çë‚Çú-relation[V] (¬∑ ‚â§ ¬∑) via dfn := ‚ü®fun v ‚Ü¶ by simp [cardLE_def, dfn]‚ü©

instance CardLE.definable : ‚Ñí‚Çõ‚Çë‚Çú-relation[V] (¬∑ ‚â§ ¬∑) := defined.to_definable

def CardLT.dfn : Semisentence ‚Ñí‚Çõ‚Çë‚Çú 2 := ‚ÄúX Y. !CardLE.dfn X Y ‚àß ¬¨!CardLE.dfn Y X‚Äù

instance CardLT.defined : ‚Ñí‚Çõ‚Çë‚Çú-relation[V] (¬∑ < ¬∑) via dfn := ‚ü®fun v ‚Ü¶ by simp [cardLT_def, dfn]‚ü©

instance CardLT.definable : ‚Ñí‚Çõ‚Çë‚Çú-relation[V] (¬∑ < ¬∑) := defined.to_definable

def CardEQ (X Y : V) : Prop := X ‚â§ Y ‚àß Y ‚â§ X

infix:60 " ‚âã " => CardEQ

def CardEQ.dfn : Semisentence ‚Ñí‚Çõ‚Çë‚Çú 2 := ‚ÄúX Y. !CardLE.dfn X Y ‚àß !CardLE.dfn Y X‚Äù

instance CardEQ.defined : ‚Ñí‚Çõ‚Çë‚Çú-relation[V] (¬∑ ‚âã ¬∑) via dfn := ‚ü®fun v ‚Ü¶ by simp [CardEQ, dfn]‚ü©

instance CardEQ.definable : ‚Ñí‚Çõ‚Çë‚Çú-relation[V] (¬∑ ‚âã ¬∑) := defined.to_definable

@[simp, refl] lemma CardEQ.refl (X : V) : X ‚âã X := ‚ü®by rfl, by rfl‚ü©

@[simp, symm] lemma CardEQ.symm {X Y : V} : X ‚âã Y ‚Üí Y ‚âã X := fun e ‚Ü¶ ‚ü®e.2, e.1‚ü©

end LO.Zermelo
