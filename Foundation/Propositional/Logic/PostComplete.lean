import Foundation.Propositional.Hilbert.WellKnown
import Foundation.Propositional.Kripke.Logic.Cl
import Foundation.Propositional.ClassicalSemantics.Hilbert
import Foundation.Propositional.ClassicalSemantics.ZeroSubst

namespace LO.Propositional

namespace Logic

-- abbrev Ext (L : Logic ‚Ñï) := { L' : Logic ‚Ñï // L'.Superintuitionistic }

open Formula (atom)
open Formula.ClassicalSemantics
open Propositional.Hilbert.Cl
open ClassicalSemantics

theorem Cl.post_complete : ¬¨‚àÉ L : Logic _, Entailment.Consistent L ‚àß Nonempty (L.IsSuperintuitionistic) ‚àß ùêÇùê• ‚™± L := by
  by_contra! hC;
  obtain ‚ü®L, L_consis, ‚ü®L_ne‚ü©, L_Cl‚ü© := hC;
  apply Logic.no_bot (L := L);
  obtain ‚ü®hL, œÜ, hœÜ‚ÇÅ, hœÜ‚ÇÇ‚ü© := Entailment.strictlyWeakerThan_iff.mp L_Cl;
  have ‚ü®v, hv‚ü© := exists_valuation_of_not hœÜ‚ÇÅ;
  have h‚ÇÅ : L ‚ä¢ ‚àº(œÜ‚ü¶(vfSubst v).1‚üß) := hL $ by
    apply iff_isTautology.mpr;
    apply neg_isTautology_of_not_isTautology_of_letterless;
    . apply Formula.Letterless_zeroSubst;
    . apply isTautology_vfSubst.not.mp hv;
  have h‚ÇÇ : L ‚ä¢ œÜ‚ü¶(vfSubst v).1‚üß := L.subst! _ hœÜ‚ÇÇ;
  exact h‚ÇÅ ‚®Ä h‚ÇÇ;

end Logic

end LO.Propositional
