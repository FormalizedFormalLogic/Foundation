import Foundation.Modal.Kripke.Logic.S5Grz
import Foundation.Modal.Maximal.Makinson
import Foundation.Modal.ModalCompanion.Int
import Foundation.Propositional.Kripke.Logic.Cl

namespace LO.Propositional

@[simp]
def Formula.goedelTranslate.letterless {ฯ : Formula โ} (hฯ : ฯ.letterless) : ฯแต.letterless := by
  induction ฯ <;> simp_all [Formula.letterless, Modal.Formula.letterless]


namespace Logic

open LO.Entailment LO.Entailment.FiniteContext LO.Modal.Entailment

theorem iff_letterless_Int_Cl {ฯ : Formula โ} (hฯ : ฯ.letterless) : ๐๐ง๐ญ โข! ฯ โ ๐๐ฅ โข! ฯ := by
  constructor;
  . apply WeakerThan.wk;
    infer_instance;
  . intro h;
    have : Modal.Hilbert.S4 โข! โฯแต := Modal.Logic.iff_provable_Cl_provable_dia_gS4.mp h;
    have : Modal.Hilbert.Triv โข! โฯแต := WeakerThan.pbl this;
    have : Modal.Hilbert.Triv โข! ฯแต := diaT'! this;
    have : (ฯแตแต.toPropFormula _).isTautology := Modal.Logic.Triv.iff_isTautology.mp this;
    have : Modal.KD โข! ฯแต := Modal.Logic.provable_KD_of_classical_tautology (Formula.goedelTranslate.letterless hฯ) this;
    have : Modal.S4 โข! ฯแต := WeakerThan.pbl this;
    exact Modal.modalCompanion_Int_S4.companion.mpr this;

end Logic

end LO.Propositional
