import Mathlib.Data.Set.Finite.Powerset
import Foundation.Vorspiel.Relation.Iterate
import Foundation.Propositional.Kripke.Preservation

universe u v

namespace LO.Propositional

namespace Kripke

open Formula (atom)
open Formula.Kripke

def filterEquiv (M : Kripke.Model) (T : FormulaSet ‚Ñï) [T.SubformulaClosed] (x y : M.World) := ‚àÄ œÜ, (_ : œÜ ‚àà T := by trivial) ‚Üí x ‚äß œÜ ‚Üî y ‚äß œÜ

variable (M : Kripke.Model) (T : FormulaSet ‚Ñï) [T.SubformulaClosed]

lemma filterEquiv.equivalence : Equivalence (filterEquiv M T) where
  refl := by intro x œÜ _; rfl;
  symm := by intro x y h œÜ hp; exact h _ hp |>.symm;
  trans := by
    intro x y z exy eyz;
    intro œÜ hp;
    exact Iff.trans (exy œÜ hp) (eyz œÜ hp)

def FilterEqvSetoid : Setoid (M.World) := ‚ü®filterEquiv M T, filterEquiv.equivalence M T‚ü©

abbrev FilterEqvQuotient := Quotient (FilterEqvSetoid M T)

namespace FilterEqvQuotient

variable {M T} {x y : M.World}

lemma finite (T_finite : T.Finite) : Finite (FilterEqvQuotient M T) := by
  have : Finite (ùí´ T) := Set.Finite.powerset T_finite
  let f : FilterEqvQuotient M T ‚Üí ùí´ T :=
    Œª (Qx : FilterEqvQuotient M T) => Quotient.lift (Œª x => ‚ü®{ œÜ ‚àà T | x ‚äß œÜ }, (by simp_all)‚ü©) (by
      intro x y hxy;
      suffices {œÜ | œÜ ‚àà T ‚àß Satisfies M x œÜ} = {œÜ | œÜ ‚àà T ‚àß Satisfies M y œÜ} by simpa;
      apply Set.eq_of_subset_of_subset;
      . rintro œÜ ‚ü®hp, hx‚ü©; exact ‚ü®hp, (hxy œÜ hp).mp hx‚ü©;
      . rintro œÜ ‚ü®hp, hy‚ü©; exact ‚ü®hp, (hxy œÜ hp).mpr hy‚ü©;
    ) Qx
  have hf : Function.Injective f := by
    intro Qx Qy h;
    obtain ‚ü®x, rfl‚ü© := Quotient.exists_rep Qx;
    obtain ‚ü®y, rfl‚ü© := Quotient.exists_rep Qy;
    simp [f] at h;
    apply Quotient.eq''.mpr;
    intro œÜ hp;
    constructor;
    . intro hpx;
      have : ‚àÄ a ‚àà T, x ‚äß a ‚Üí a ‚àà T ‚àß y ‚äß a := by simpa using h.subset;
      exact this œÜ hp hpx |>.2;
    . intro hpy;
      have := h.symm.subset;
      simp only [Set.setOf_subset_setOf, and_imp, f] at this;
      exact this œÜ hp hpy |>.2;
  exact Finite.of_injective f hf

instance : Nonempty (FilterEqvQuotient M T) := ‚ü®‚ü¶M.toFrame.world_nonempty.some‚üß‚ü©

lemma iff_of_eq (h : (‚ü¶x‚üß : FilterEqvQuotient M T) = ‚ü¶y‚üß) : ‚àÄ œÜ ‚àà T, x ‚äß œÜ ‚Üî y ‚äß œÜ := by
  simp [FilterEqvSetoid, filterEquiv] at h;
  tauto;

end FilterEqvQuotient


class FilterOf (FM : Model) (M : Model) (T : FormulaSet ‚Ñï) [T.SubformulaClosed] : Prop where
  def_world : FM.World = FilterEqvQuotient M T := by rfl
  def_rel_forth : ‚àÄ {x y : M.World}, x ‚â∫ y ‚Üí (cast def_world.symm ‚ü¶x‚üß) ‚â∫ (cast def_world.symm ‚ü¶y‚üß)
  def_rel_back : ‚àÄ {Qx Qy : FM.World}, Qx ‚â∫ Qy ‚Üí Quotient.lift‚ÇÇ (Œª x y => ‚àÄ œÜ ‚àà T, (x ‚äß œÜ ‚Üí y ‚äß œÜ)) (by
    intro x‚ÇÅ y‚ÇÅ x‚ÇÇ y‚ÇÇ hx hy;
    apply eq_iff_iff.mpr;
    constructor;
    . intro h œÜ hœÜ hœÜ_x‚ÇÇ;
      apply hy œÜ |>.mp;
      apply h;
      . exact hœÜ
      . apply hx œÜ |>.mpr hœÜ_x‚ÇÇ;
    . intro h œÜ hœÜ hœÜ_y‚ÇÅ;
      apply hy œÜ |>.mpr;
      apply h;
      . exact hœÜ
      . apply hx œÜ |>.mp hœÜ_y‚ÇÅ;
  ) (cast def_world Qx) (cast def_world Qy)
  def_valuation Qx a : (ha : (atom a) ‚àà T := by trivial) ‚Üí
    FM Qx a ‚Üî Quotient.lift (Œª x => M x a) (by
      intro x y h;
      apply eq_iff_iff.mpr;
      constructor;
      . intro hx; exact h (.atom a) ha |>.mp hx;
      . intro hy; exact h (.atom a) ha |>.mpr hy;
    ) (cast def_world Qx)

attribute [simp] FilterOf.def_world


section

variable {M T}

lemma reflexive_filterOf_of_reflexive (h_filter : FilterOf FM M T) (hRefl : Reflexive M.toFrame) : Reflexive FM.Rel := by
  intro Qx;
  obtain ‚ü®x, hx‚ü© := Quotient.exists_rep (cast (h_filter.def_world) Qx);
  convert h_filter.def_rel_forth $ hRefl x <;> simp_all;

lemma serial_filterOf_of_serial (h_filter : FilterOf FM M T) (hSerial : Serial M.toFrame) : Serial FM.Rel := by
  intro Qx;
  obtain ‚ü®x, hx‚ü© := Quotient.exists_rep (cast (h_filter.def_world) Qx);
  obtain ‚ü®y, Rxy‚ü© := hSerial x;
  use (cast (h_filter.def_world.symm) ‚ü¶y‚üß);
  convert h_filter.def_rel_forth $ Rxy;
  simp_all;

end



section

variable {M : Model} {T : FormulaSet ‚Ñï} [T.SubformulaClosed]
         (FM : Model) (filterOf : FilterOf FM M T)

theorem filteration {x : M.World} {œÜ : Formula ‚Ñï} (hs : œÜ ‚àà T) : x ‚äß œÜ ‚Üî (cast (filterOf.def_world.symm) ‚ü¶x‚üß) ‚äß œÜ := by
  induction œÜ using Formula.rec' generalizing x with
  | hatom a =>
    have := filterOf.def_valuation (cast filterOf.def_world.symm ‚ü¶x‚üß) a;
    simp_all [Satisfies];
  | hand œÜ œà ihœÜ ihœà =>
    constructor;
    . rintro ‚ü®hœÜ, hœà‚ü©;
      constructor;
      . refine ihœÜ (FormulaSet.SubformulaClosed.mem_and‚ÇÅ hs) |>.mp hœÜ;
      . refine ihœà (FormulaSet.SubformulaClosed.mem_and‚ÇÇ hs) |>.mp hœà;
    . rintro ‚ü®hœÜ, hœà‚ü©;
      constructor;
      . refine ihœÜ (FormulaSet.SubformulaClosed.mem_and‚ÇÅ hs) |>.mpr hœÜ;
      . refine ihœà (FormulaSet.SubformulaClosed.mem_and‚ÇÇ hs) |>.mpr hœà;
  | hor œÜ œà ihœÜ ihœà =>
    constructor;
    . rintro (hœÜ | hœà);
      . left; exact ihœÜ (FormulaSet.SubformulaClosed.mem_or‚ÇÅ hs) |>.mp hœÜ;
      . right; exact ihœà (FormulaSet.SubformulaClosed.mem_or‚ÇÇ hs) |>.mp hœà;
    . rintro (hœÜ | hœà);
      . left; exact ihœÜ (FormulaSet.SubformulaClosed.mem_or‚ÇÅ hs) |>.mpr hœÜ;
      . right; exact ihœà (FormulaSet.SubformulaClosed.mem_or‚ÇÇ hs) |>.mpr hœà;
  | himp œÜ œà ihœÜ ihœà =>
    constructor;
    . rintro hœÜœà Qy RQxQy hœÜ;
      obtain ‚ü®y, ey‚ü© := Quotient.exists_rep (cast (filterOf.def_world) Qy);
      apply (show Satisfies M y œà ‚Üí Satisfies FM Qy œà by simpa [ey] using @ihœà y (FormulaSet.SubformulaClosed.mem_imp‚ÇÇ hs) |>.mp)
      have : ‚àÄ œÜ ‚àà T, Satisfies M x œÜ ‚Üí Satisfies M y œÜ := by simpa [‚Üêey] using filterOf.def_rel_back RQxQy;
      apply this (œÜ ‚ûù œà) hs hœÜœà;
      . apply M.refl;
      . apply ihœÜ (FormulaSet.SubformulaClosed.mem_imp‚ÇÅ hs) |>.mpr;
        convert hœÜ;
        simp_all;
    . rintro h y Rxy hœÜ;
      apply ihœà (FormulaSet.SubformulaClosed.mem_imp‚ÇÇ hs) |>.mpr;
      apply h (filterOf.def_rel_forth Rxy);
      apply ihœÜ (FormulaSet.SubformulaClosed.mem_imp‚ÇÅ hs) |>.mp hœÜ;
  | _ => trivial

end

abbrev standardFilterationValuation (Qx : FilterEqvQuotient M T) (a : ‚Ñï) := (ha : (atom a) ‚àà T) ‚Üí Quotient.lift (Œª x => M.Val x a) (by
  intro x y h;
  apply eq_iff_iff.mpr;
  constructor;
  . intro hx; exact h (.atom a) ha |>.mp hx;
  . intro hy; exact h (.atom a) ha |>.mpr hy;
) Qx


abbrev coarsestFilterationFrame (M : Model) (T : FormulaSet ‚Ñï) [T.SubformulaClosed] : Kripke.Frame where
  World := FilterEqvQuotient M T
  Rel Qx Qy :=
    Quotient.lift‚ÇÇ (Œª x y => ‚àÄ œÜ ‚àà T, (x ‚äß œÜ ‚Üí y ‚äß œÜ)) (by
      intro x‚ÇÅ y‚ÇÅ x‚ÇÇ y‚ÇÇ hx hy;
      apply eq_iff_iff.mpr;
      constructor;
      . intro h œÜ hœÜ hœÜ_x‚ÇÇ;
        apply hy œÜ |>.mp;
        apply h;
        . exact hœÜ
        . apply hx œÜ |>.mpr hœÜ_x‚ÇÇ;
      . intro h œÜ hœÜ hœÜ_y‚ÇÅ;
        apply hy œÜ |>.mpr;
        apply h;
        . exact hœÜ
        . apply hx œÜ |>.mp hœÜ_y‚ÇÅ;
    ) Qx Qy
  rel_partial_order := {
    refl := by
      intro Qx;
      obtain ‚ü®x, rfl‚ü© := Quotient.exists_rep Qx;
      simp;
    trans := by
      intro Qx Qy Qz RQxQy RQyQz;
      obtain ‚ü®x, rfl‚ü© := Quotient.exists_rep Qx;
      obtain ‚ü®y, rfl‚ü© := Quotient.exists_rep Qy;
      obtain ‚ü®z, rfl‚ü© := Quotient.exists_rep Qz;
      simp_all;
    antisymm := by
      intro Qx Qy RQxQy RQyQx;
      obtain ‚ü®x, rfl‚ü© := Quotient.exists_rep Qx;
      obtain ‚ü®y, rfl‚ü© := Quotient.exists_rep Qy;
      simp only [Quotient.eq];
      intro œÜ hœÜ‚ÇÅ;
      constructor;
      . intro hœÜ‚ÇÇ; exact RQxQy œÜ hœÜ‚ÇÅ hœÜ‚ÇÇ;
      . intro hœÜ‚ÇÇ; exact RQyQx œÜ hœÜ‚ÇÅ hœÜ‚ÇÇ;
  }

abbrev coarsestFilterationModel (M : Model) (T : FormulaSet ‚Ñï) [T.SubformulaClosed] : Kripke.Model where
  toFrame := coarsestFilterationFrame M T
  Val := ‚ü®
    standardFilterationValuation M T,
    by
      intro Qx Qy RQxQy a hQx ha;
      obtain ‚ü®x, rfl‚ü© := Quotient.exists_rep Qx;
      obtain ‚ü®y, rfl‚ü© := Quotient.exists_rep Qy;
      apply RQxQy (.atom a) ha;
      tauto;
  ‚ü©

instance coarsestFilterationModel.filterOf {M} {T : FormulaSet ‚Ñï} [T.SubformulaClosed] : FilterOf (coarsestFilterationModel M T) M T where
  def_valuation := by tauto
  def_rel_forth := by
    intro x y Rxy;
    intro œÜ hœÜ;
    apply Formula.Kripke.Satisfies.formula_hereditary Rxy;
  def_rel_back := by tauto;


section

open Relation
open Formula.Kripke.Satisfies (formula_hereditary)

variable {M T} [T.SubformulaClosed]

abbrev finestFilterationTransitiveClosureFrame (M : Model) (T : FormulaSet ‚Ñï) [T.SubformulaClosed] : Kripke.Frame where
  World := FilterEqvQuotient M T
  Rel := TransGen (Œª X Y => ‚àÉ x y, X = ‚ü¶x‚üß ‚àß Y = ‚ü¶y‚üß ‚àß x ‚â∫ y)
  rel_partial_order := {
    refl := by
      rintro X;
      obtain ‚ü®x, rfl‚ü© := Quotient.exists_rep X;
      apply TransGen.single;
      use x, x;
      exact ‚ü®rfl, rfl, M.refl‚ü©
    trans := by apply TransGen.trans;
    antisymm := by
      rintro x y Rxy Ryx;
      obtain ‚ü®x, rfl‚ü© := Quotient.exists_rep x;
      obtain ‚ü®y, rfl‚ü© := Quotient.exists_rep y;
      simp only [Quotient.eq, FilterEqvSetoid, filterEquiv];
      intro œÜ hœÜ;
      constructor;
      . obtain ‚ü®n, hn‚ü© := TransGen.exists_iterate'.mp Rxy;
        clear Rxy Ryx;
        induction n using PNat.recOn generalizing x with
        | one =>
          simp [FilterEqvSetoid, filterEquiv] at hn;
          obtain ‚ü®u, Rxu, v, Ryv, Ruv‚ü© := hn;
          intro hx;
          have : u ‚äß œÜ := Rxu œÜ hœÜ |>.mp hx;
          have : v ‚äß œÜ := formula_hereditary Ruv this;
          exact Ryv œÜ hœÜ |>.mpr this;
        | succ n ih =>
          obtain ‚ü®‚ü®u‚ü©, ‚ü®x', u', exx', euu', Rx'u'‚ü©, RUY‚ü© := hn;
          intro hx;
          have : x' ‚äß œÜ := FilterEqvQuotient.iff_of_eq exx' œÜ hœÜ |>.mp hx;
          have : u' ‚äß œÜ := formula_hereditary Rx'u' this;
          have : u ‚äß œÜ := FilterEqvQuotient.iff_of_eq euu' œÜ hœÜ |>.mpr this;
          exact ih u RUY this;
      . obtain ‚ü®n, hn‚ü© := TransGen.exists_iterate'.mp Ryx;
        clear Rxy Ryx;
        induction n using PNat.recOn generalizing y with
        | one =>
          simp [FilterEqvSetoid, filterEquiv] at hn;
          obtain ‚ü®u, Rxu, v, Ryv, Ruv‚ü© := hn;
          intro hy;
          have : u ‚äß œÜ := Rxu œÜ hœÜ |>.mp hy;
          have : v ‚äß œÜ := formula_hereditary Ruv this;
          exact Ryv œÜ hœÜ |>.mpr this;
        | succ n ih =>
          obtain ‚ü®‚ü®u‚ü©, ‚ü®y', u', eyy', euu', Ry'u'‚ü©, RUY‚ü© := hn;
          intro hy;
          have : y' ‚äß œÜ := FilterEqvQuotient.iff_of_eq eyy' œÜ hœÜ |>.mp hy;
          have : u' ‚äß œÜ := formula_hereditary Ry'u' this;
          have : u ‚äß œÜ := FilterEqvQuotient.iff_of_eq euu' œÜ hœÜ |>.mpr this;
          exact ih u RUY this;
  }

abbrev finestFilterationTransitiveClosureModel (M : Model) (T : FormulaSet ‚Ñï) [T.SubformulaClosed] : Kripke.Model where
  toFrame := (finestFilterationTransitiveClosureFrame M T)
  Val := ‚ü®
    standardFilterationValuation M T,
    by
      intro X Y RXY a hX;
      obtain ‚ü®x, rfl‚ü© := Quotient.exists_rep X;
      obtain ‚ü®y, rfl‚ü© := Quotient.exists_rep Y;
      obtain ‚ü®n, hn‚ü© := TransGen.exists_iterate'.mp RXY;
      clear RXY;
      induction n using PNat.recOn generalizing x with
      | one =>
        simp [FilterEqvSetoid, filterEquiv] at hn;
        obtain ‚ü®u, Rxu, v, Ryv, Ruv‚ü© := hn;
        intro ha;
        apply Ryv _ ha |>.mpr;
        apply M.Val.hereditary Ruv;
        apply Rxu _ ha |>.mp;
        tauto;
      | succ n ih =>
        obtain ‚ü®_, ‚ü®x', u', exx', rfl, Rx'u'‚ü©, RUY‚ü© := hn;
        refine ih u' ?_ RUY;
        intro ha;
        apply M.Val.hereditary Rx'u';
        apply FilterEqvQuotient.iff_of_eq exx' _ ha |>.mp;
        tauto;
  ‚ü©

instance finestFilterationTransitiveClosureModel.filterOf : FilterOf (finestFilterationTransitiveClosureModel M T) M T where
  def_valuation := by tauto
  def_rel_forth := by
    intro x y Rxy;
    apply TransGen.single;
    use x, y;
    tauto;
  def_rel_back := by
    rintro X Y RXY;
    obtain ‚ü®n, hn‚ü© := TransGen.exists_iterate'.mp RXY;
    clear RXY;
    induction n using PNat.recOn generalizing X with
    | one =>
      obtain ‚ü®U, ‚ü®x, y, rfl, rfl, Rxy‚ü©, rfl‚ü© := hn;
      intro œÜ hœÜ hx;
      exact formula_hereditary Rxy hx;
    | succ n ih =>
      obtain ‚ü®_, ‚ü®x, u, rfl, rfl, Rxu‚ü©, RUY‚ü© := hn;
      obtain ‚ü®y, rfl‚ü© := Quotient.exists_rep Y;
      intro œÜ hœÜ hx;
      apply @ih ‚ü¶u‚üß RUY;
      . exact hœÜ;
      . apply formula_hereditary Rxu hx;

end

end Kripke

end LO.Propositional
