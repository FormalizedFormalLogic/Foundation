import Mathlib.Data.Set.Finite.Powerset
import Foundation.Propositional.Kripke.Basic

universe u v

namespace LO.Propositional

namespace Kripke

open Formula (atom)
open Formula.Kripke

def filterEquiv (M : Kripke.Model) (T : FormulaSet ‚Ñï) [T.SubformulaClosed] (x y : M.World) := ‚àÄ œÜ, (_ : œÜ ‚àà T := by trivial) ‚Üí x ‚äß œÜ ‚Üî y ‚äß œÜ

variable (M : Kripke.Model) (T : FormulaSet ‚Ñï) [T.SubformulaClosed]

lemma filterEquiv.equivalence : Equivalence (filterEquiv M T) where
  refl := by intro x œÜ _; rfl;
  symm := by intro x y h œÜ hp; exact h _ hp |>.symm;
  trans := by
    intro x y z exy eyz;
    intro œÜ hp;
    exact Iff.trans (exy œÜ hp) (eyz œÜ hp)

def FilterEqvSetoid : Setoid (M.World) := ‚ü®filterEquiv M T, filterEquiv.equivalence M T‚ü©

abbrev FilterEqvQuotient := Quotient (FilterEqvSetoid M T)

lemma FilterEqvQuotient.finite (T_finite : T.Finite) : Finite (FilterEqvQuotient M T) := by
  have : Finite (ùí´ T) := Set.Finite.powerset T_finite
  let f : FilterEqvQuotient M T ‚Üí ùí´ T :=
    Œª (Qx : FilterEqvQuotient M T) => Quotient.lift (Œª x => ‚ü®{ œÜ ‚àà T | x ‚äß œÜ }, (by simp_all)‚ü©) (by
      intro x y hxy;
      suffices {œÜ | œÜ ‚àà T ‚àß Satisfies M x œÜ} = {œÜ | œÜ ‚àà T ‚àß Satisfies M y œÜ} by simpa;
      apply Set.eq_of_subset_of_subset;
      . rintro œÜ ‚ü®hp, hx‚ü©; exact ‚ü®hp, (hxy œÜ hp).mp hx‚ü©;
      . rintro œÜ ‚ü®hp, hy‚ü©; exact ‚ü®hp, (hxy œÜ hp).mpr hy‚ü©;
    ) Qx
  have hf : Function.Injective f := by
    intro Qx Qy h;
    obtain ‚ü®x, rfl‚ü© := Quotient.exists_rep Qx;
    obtain ‚ü®y, rfl‚ü© := Quotient.exists_rep Qy;
    simp [f] at h;
    apply Quotient.eq''.mpr;
    intro œÜ hp;
    constructor;
    . intro hpx;
      have : ‚àÄ a ‚àà T, x ‚äß a ‚Üí a ‚àà T ‚àß y ‚äß a := by simpa using h.subset;
      exact this œÜ hp hpx |>.2;
    . intro hpy;
      have := h.symm.subset;
      simp only [Set.setOf_subset_setOf, and_imp, f] at this;
      exact this œÜ hp hpy |>.2;
  exact Finite.of_injective f hf

instance : Nonempty (FilterEqvQuotient M T) := ‚ü®‚ü¶M.toFrame.world_nonempty.some‚üß‚ü©

class FilterOf (FM : Model) (M : Model) (T : FormulaSet ‚Ñï) [T.SubformulaClosed] : Prop where
  def_world : FM.World = FilterEqvQuotient M T := by rfl
  def_rel_forth : ‚àÄ {x y : M.World}, x ‚â∫ y ‚Üí (cast def_world.symm ‚ü¶x‚üß) ‚â∫ (cast def_world.symm ‚ü¶y‚üß)
  def_rel_back : ‚àÄ {Qx Qy : FM.World}, Qx ‚â∫ Qy ‚Üí Quotient.lift‚ÇÇ (Œª x y => ‚àÄ œÜ ‚àà T, (x ‚äß œÜ ‚Üí y ‚äß œÜ)) (by
    intro x‚ÇÅ y‚ÇÅ x‚ÇÇ y‚ÇÇ hx hy;
    apply eq_iff_iff.mpr;
    constructor;
    . intro h œÜ hœÜ hœÜ_x‚ÇÇ;
      apply hy œÜ |>.mp;
      apply h;
      . exact hœÜ
      . apply hx œÜ |>.mpr hœÜ_x‚ÇÇ;
    . intro h œÜ hœÜ hœÜ_y‚ÇÅ;
      apply hy œÜ |>.mpr;
      apply h;
      . exact hœÜ
      . apply hx œÜ |>.mp hœÜ_y‚ÇÅ;
  ) (cast def_world Qx) (cast def_world Qy)
  def_valuation Qx a : (ha : (atom a) ‚àà T := by trivial) ‚Üí
    FM Qx a ‚Üî Quotient.lift (Œª x => M x a) (by
      intro x y h;
      apply eq_iff_iff.mpr;
      constructor;
      . intro hx; exact h (.atom a) ha |>.mp hx;
      . intro hy; exact h (.atom a) ha |>.mpr hy;
    ) (cast def_world Qx)

attribute [simp] FilterOf.def_world


section

variable {M T}

lemma reflexive_filterOf_of_reflexive (h_filter : FilterOf FM M T) (hRefl : Reflexive M.toFrame) : Reflexive FM.Rel := by
  intro Qx;
  obtain ‚ü®x, hx‚ü© := Quotient.exists_rep (cast (h_filter.def_world) Qx);
  convert h_filter.def_rel_forth $ hRefl x <;> simp_all;

lemma serial_filterOf_of_serial (h_filter : FilterOf FM M T) (hSerial : Serial M.toFrame) : Serial FM.Rel := by
  intro Qx;
  obtain ‚ü®x, hx‚ü© := Quotient.exists_rep (cast (h_filter.def_world) Qx);
  obtain ‚ü®y, Rxy‚ü© := hSerial x;
  use (cast (h_filter.def_world.symm) ‚ü¶y‚üß);
  convert h_filter.def_rel_forth $ Rxy;
  simp_all;

end



section

variable {M : Model} {T : FormulaSet ‚Ñï} [T.SubformulaClosed]
         (FM : Model) (filterOf : FilterOf FM M T)

theorem filteration {x : M.World} {œÜ : Formula ‚Ñï} (hs : œÜ ‚àà T) : x ‚äß œÜ ‚Üî (cast (filterOf.def_world.symm) ‚ü¶x‚üß) ‚äß œÜ := by
  induction œÜ using Formula.rec' generalizing x with
  | hatom a =>
    have := filterOf.def_valuation (cast filterOf.def_world.symm ‚ü¶x‚üß) a;
    simp_all [Satisfies];
  | hand œÜ œà ihœÜ ihœà =>
    constructor;
    . rintro ‚ü®hœÜ, hœà‚ü©;
      constructor;
      . refine ihœÜ (FormulaSet.SubformulaClosed.mem_and‚ÇÅ hs) |>.mp hœÜ;
      . refine ihœà (FormulaSet.SubformulaClosed.mem_and‚ÇÇ hs) |>.mp hœà;
    . rintro ‚ü®hœÜ, hœà‚ü©;
      constructor;
      . refine ihœÜ (FormulaSet.SubformulaClosed.mem_and‚ÇÅ hs) |>.mpr hœÜ;
      . refine ihœà (FormulaSet.SubformulaClosed.mem_and‚ÇÇ hs) |>.mpr hœà;
  | hor œÜ œà ihœÜ ihœà =>
    constructor;
    . rintro (hœÜ | hœà);
      . left; exact ihœÜ (FormulaSet.SubformulaClosed.mem_or‚ÇÅ hs) |>.mp hœÜ;
      . right; exact ihœà (FormulaSet.SubformulaClosed.mem_or‚ÇÇ hs) |>.mp hœà;
    . rintro (hœÜ | hœà);
      . left; exact ihœÜ (FormulaSet.SubformulaClosed.mem_or‚ÇÅ hs) |>.mpr hœÜ;
      . right; exact ihœà (FormulaSet.SubformulaClosed.mem_or‚ÇÇ hs) |>.mpr hœà;
  | himp œÜ œà ihœÜ ihœà =>
    constructor;
    . rintro hœÜœà Qy RQxQy hœÜ;
      obtain ‚ü®y, ey‚ü© := Quotient.exists_rep (cast (filterOf.def_world) Qy);
      apply (show Satisfies M y œà ‚Üí Satisfies FM Qy œà by simpa [ey] using @ihœà y (FormulaSet.SubformulaClosed.mem_imp‚ÇÇ hs) |>.mp)
      have : ‚àÄ œÜ ‚àà T, Satisfies M x œÜ ‚Üí Satisfies M y œÜ := by simpa [‚Üêey] using filterOf.def_rel_back RQxQy;
      apply this (œÜ ‚ûù œà) hs hœÜœà;
      . simp;
      . apply ihœÜ (FormulaSet.SubformulaClosed.mem_imp‚ÇÅ hs) |>.mpr;
        convert hœÜ;
        simp_all;
    . rintro h y Rxy hœÜ;
      apply ihœà (FormulaSet.SubformulaClosed.mem_imp‚ÇÇ hs) |>.mpr;
      apply h (filterOf.def_rel_forth Rxy);
      apply ihœÜ (FormulaSet.SubformulaClosed.mem_imp‚ÇÅ hs) |>.mp hœÜ;
  | _ => trivial

end

abbrev standardFilterationValuation (Qx : FilterEqvQuotient M T) (a : ‚Ñï) := (ha : (atom a) ‚àà T) ‚Üí Quotient.lift (Œª x => M.Val x a) (by
  intro x y h;
  apply eq_iff_iff.mpr;
  constructor;
  . intro hx; exact h (.atom a) ha |>.mp hx;
  . intro hy; exact h (.atom a) ha |>.mpr hy;
) Qx


abbrev coarsestFilterationFrame (M : Model) (T : FormulaSet ‚Ñï) [T.SubformulaClosed] : Kripke.Frame where
  World := FilterEqvQuotient M T
  Rel Qx Qy :=
    Quotient.lift‚ÇÇ (Œª x y => ‚àÄ œÜ ‚àà T, (x ‚äß œÜ ‚Üí y ‚äß œÜ)) (by
      intro x‚ÇÅ y‚ÇÅ x‚ÇÇ y‚ÇÇ hx hy;
      apply eq_iff_iff.mpr;
      constructor;
      . intro h œÜ hœÜ hœÜ_x‚ÇÇ;
        apply hy œÜ |>.mp;
        apply h;
        . exact hœÜ
        . apply hx œÜ |>.mpr hœÜ_x‚ÇÇ;
      . intro h œÜ hœÜ hœÜ_y‚ÇÅ;
        apply hy œÜ |>.mpr;
        apply h;
        . exact hœÜ
        . apply hx œÜ |>.mp hœÜ_y‚ÇÅ;
    ) Qx Qy
  rel_refl := by
    intro Qx;
    obtain ‚ü®x, rfl‚ü© := Quotient.exists_rep Qx;
    simp;
  rel_trans := by
    intro Qx Qy Qz RQxQy RQyQz;
    obtain ‚ü®x, rfl‚ü© := Quotient.exists_rep Qx;
    obtain ‚ü®y, rfl‚ü© := Quotient.exists_rep Qy;
    obtain ‚ü®z, rfl‚ü© := Quotient.exists_rep Qz;
    simp_all;
  rel_antisymm := by
    intro Qx Qy RQxQy RQyQx;
    obtain ‚ü®x, rfl‚ü© := Quotient.exists_rep Qx;
    obtain ‚ü®y, rfl‚ü© := Quotient.exists_rep Qy;
    simp only [Quotient.eq];
    intro œÜ hœÜ‚ÇÅ;
    constructor;
    . intro hœÜ‚ÇÇ; exact RQxQy œÜ hœÜ‚ÇÅ hœÜ‚ÇÇ;
    . intro hœÜ‚ÇÇ; exact RQyQx œÜ hœÜ‚ÇÅ hœÜ‚ÇÇ;

abbrev coarsestFilterationModel (M : Model) (T : FormulaSet ‚Ñï) [T.SubformulaClosed] : Kripke.Model where
  toFrame := coarsestFilterationFrame M T
  Val := ‚ü®
    standardFilterationValuation M T,
    by
      intro Qx Qy RQxQy a hQx ha;
      obtain ‚ü®x, rfl‚ü© := Quotient.exists_rep Qx;
      obtain ‚ü®y, rfl‚ü© := Quotient.exists_rep Qy;
      apply RQxQy (.atom a) ha;
      tauto;
  ‚ü©

instance coarsestFilterationModel.filterOf {M} {T : FormulaSet ‚Ñï} [T.SubformulaClosed] : FilterOf (coarsestFilterationModel M T) M T where
  def_valuation := by tauto
  def_rel_forth := by
    intro x y Rxy;
    intro œÜ hœÜ;
    apply Formula.Kripke.Satisfies.formula_hereditary Rxy;
  def_rel_back := by tauto;


-- TODO: might be wrong, because finest filteration is not transitive?
/-
abbrev finestFilterationFrame (M : Model) (T : FormulaSet ‚Ñï) [T.SubformulaClosed] : Kripke.Frame where
  World := FilterEqvQuotient M T
  Rel Qx Qy := ‚àÉ x y, Qx = ‚ü¶x‚üß ‚àß Qy = ‚ü¶y‚üß ‚àß x ‚â∫ y
  rel_refl := by
    intro Qx;
    obtain ‚ü®x, rfl‚ü© := Quotient.exists_rep Qx;
    use x, x;
    simp;
  rel_trans := by
    rintro Qx Qy Qz ‚ü®x, y, ‚ü®rfl, rfl, Rxy‚ü©‚ü© ‚ü®w, z, ‚ü®hyw, rfl, Ryz‚ü©‚ü©;
    use x, z;
    refine ‚ü®by tauto, by tauto, ?_‚ü©;
    sorry;

abbrev finestFilterationModel (M : Model) (T : FormulaSet ‚Ñï) [T.SubformulaClosed] : Kripke.Model where
  toFrame := coarsestFilterationFrame M T
  Val := ‚ü®
    standardFilterationValuation M T,
    by
      intro Qx Qy RQxQy a hQx ha;
      obtain ‚ü®x, rfl‚ü© := Quotient.exists_rep Qx;
      obtain ‚ü®y, rfl‚ü© := Quotient.exists_rep Qy;
      apply RQxQy (.atom a) ha;
      tauto;
  ‚ü©

instance finestFilterationModel.filterOf {M} {T : FormulaSet ‚Ñï} [T.SubformulaClosed] : FilterOf (finestFilterationModel M T) M T where
  def_valuation := by tauto
  def_rel_back := by tauto;
  def_rel_forth := by
    intro x y Rxy;
    intro œÜ hœÜ;
    apply Formula.Kripke.Satisfies.formula_hereditary Rxy;
-/

end Kripke

end LO.Propositional
