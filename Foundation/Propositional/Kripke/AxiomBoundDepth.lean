import Foundation.Propositional.Kripke.Completeness
import Foundation.Vorspiel.List.Chain
import Mathlib.Data.PNat.Basic
import Foundation.Propositional.BoundDepth

namespace LO.Propositional

namespace Kripke

open Kripke
open Formula.Kripke

section definability

variable {F : Kripke.Frame}

open Formula (atom)
open Classical

/-- Frame has at most `n`-chain. -/
def Frame.IsDepthLt (F : Frame) (n : ‚Ñï) := ‚àÄ l : List F.World, l.length = n + 1 ‚àß l.Chain' F ‚Üí ¬¨l.Nodup

private lemma not_isDepthLt'_of_not_validate_BoundDepth' {M : Model} {x : M.World} {n : ‚Ñï} (h : ¬¨x ‚äß Axioms.BoundDepth' n)
  : ‚àÉ l : List M.World, l.length = n + 2 ‚àß l.Chain' (¬∑ ‚â∫ ¬∑) ‚àß (l.head? = some x) ‚àß ‚àÄ i j : Fin l.length, i ‚â† j ‚Üí l.get i ‚â† l.get j := by
  induction n generalizing x with
  | zero =>
    have ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := Satisfies.not_or_def.mp h;
    replace ‚ü®y, Rxy, h‚ÇÇ‚ü© := Satisfies.not_neg_def.mp h‚ÇÇ;
    use [x, y];
    refine ‚ü®?_, ?_, ?_, ?_‚ü©;
    . simp;
    . simpa;
    . simp;
    . simp only [List.length_cons, List.length_nil, Nat.reduceAdd, ne_eq, List.get_eq_getElem];
      intro i j hij;
      by_contra hC;
      match i, j with
      | 0, 0 => contradiction;
      | 1, 1 => contradiction;
      | 0, 1 =>
        simp only [Fin.isValue, Fin.val_zero, List.getElem_cons_zero, Fin.val_one, List.getElem_cons_succ] at hC;
        subst hC;
        contradiction;
      | 1, 0 =>
        simp only [Fin.isValue, Fin.val_zero, List.getElem_cons_zero, Fin.val_one, List.getElem_cons_succ] at hC;
        subst hC;
        contradiction;
  | succ n ih =>
    have ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := Satisfies.not_or_def.mp h;
    replace ‚ü®y, Rxy, h‚ÇÇ, h‚ÇÉ‚ü© := Satisfies.not_imp_def.mp h‚ÇÇ;
    obtain ‚ü®l, hl‚ÇÅ, hl‚ÇÇ, hl‚ÇÉ, hl‚ÇÑ‚ü© := @ih y h‚ÇÉ;
    use (x :: l);
    refine ‚ü®?_, ?_, ?_, ?_‚ü©;
    . simpa;
    . apply List.Chain'.cons';
      . exact hl‚ÇÇ;
      . simpa [hl‚ÇÉ];
    . simp;
    . apply List.ne_get_con_get_con_of_ne;
      . exact hl‚ÇÑ;
      . by_contra hC;
        have : l ‚â† [] :=  List.length_pos_iff_ne_nil.mp (by omega);
        have Rhx : (l.head _) ‚â∫ x := List.rel_head_of_chain'_preorder hl‚ÇÇ (by assumption) x hC;
        have ehy : (l.head _) = y := List.head_eq_iff_head?_eq_some (by assumption) |>.mpr hl‚ÇÉ;
        subst ehy;
        have exy := _root_.antisymm Rxy Rhx;
        subst exy;
        contradiction;

private lemma not_isDepthLt_of_not_validate_BoundDepth' {n : ‚Ñï} (h : ¬¨F ‚äß Axioms.BoundDepth' n)
  : ¬¨F.IsDepthLt (n + 1) := by
  obtain ‚ü®M, x, rfl, h‚ÇÇ‚ü© := ValidOnFrame.exists_model_world_of_not h;
  obtain ‚ü®l, hl‚ÇÅ, hl‚ÇÇ, _, hl‚ÇÉ‚ü© := not_isDepthLt'_of_not_validate_BoundDepth' h‚ÇÇ;
  dsimp [Frame.IsDepthLt];
  push_neg;
  use l;
  refine ‚ü®‚ü®?_, ?_‚ü©, ?_‚ü©;
  . simpa using hl‚ÇÅ;
  . assumption;
  . apply List.nodup_iff_get_ne_get.mpr hl‚ÇÉ;

private lemma validate_BoundDepth'_of_isDepthLt {n : ‚Ñï} : F.IsDepthLt (n + 1) ‚Üí F ‚äß Axioms.BoundDepth' n := by
  contrapose!;
  intro h;
  exact not_isDepthLt_of_not_validate_BoundDepth' h;

lemma validate_BoundDepth_of_isDepthLt {n : ‚Ñï+} : F.IsDepthLt n ‚Üí F ‚äß Axioms.BoundDepth n := by
  simpa using validate_BoundDepth'_of_isDepthLt (n := n.natPred);


abbrev cascadeVal (l : List F.World) (n) (hl : l.length = n + 1 := by omega) : Valuation F := ‚ü®
  Œª w a =>
    letI i : Fin l.length := ‚ü®(l.length - 1) - a, by omega‚ü©;
    letI x : F.World := l[i]
    x ‚â∫ w
  ,
  by
    simp only [Fin.getElem_fin];
    intro x y Rxy a Rlx;
    exact _root_.trans Rlx Rxy;
‚ü©

/-
lemma cascadeVal_sat {l : List F.World} {hl : 0 < l.length} (a : Fin l.length) :
  letI i : Fin l.length := ‚ü®l.length - (a + 1), by omega‚ü©;
  Satisfies ‚ü®F, cascadeVal l hl‚ü© (l[i]) (.atom a) := by
  apply _root_.refl;

lemma wowwow
  (hl‚ÇÅ : 1 < l.length) (hl‚ÇÇ : l.Chain' (¬∑ ‚â∫ ¬∑)) :
  letI x : F.World := l.tail.head (List.ne_nil_of_length_pos (by simpa));
  Satisfies ‚ü®F, cascadeVal l (by omega)‚ü© x (Axioms.BoundDepth' n) ‚Üí
  Satisfies ‚ü®F, cascadeVal l.tail (by simpa)‚ü© x (Axioms.BoundDepth' n) := by
  induction n with
  | zero =>
    simp [Axioms.BoundDepth', Satisfies];
    have e : l[l.length - 1 - 1 + 1] = l[l.length - 1] := by

      sorry;
    rintro (h | h);
    . left;
      rw [e];
      apply _root_.trans ?_ h;
      apply _root_.refl;
    . right;
      intro x Rhx;
      have := h Rhx;
      revert this;
      contrapose!;
      rw [e];
      tauto;
  | succ n ih =>
    simp_all [Satisfies]
    rintro (h | h);
    . left;
      sorry;
    . right;
      intro x Rhx h‚ÇÇ;
      apply Satisfies.formula_hereditary Rhx $ ih ?_
      apply h;
      . apply _root_.refl;
      . sorry;
-/

lemma isDepthLt_of_validate_BoundDepth'_aux {n : ‚Ñï}
  {l : List F.World}
  (hl‚ÇÅ : l.length = n + 2) (hl‚ÇÇ : l.Chain' (¬∑ ‚â∫ ¬∑)) :
  letI M : Model := ‚ü®F, (cascadeVal l (n + 1))‚ü©;
  letI x‚ÇÄ : M.World := l.head (List.ne_nil_of_length_pos (by omega));
  Satisfies M x‚ÇÄ (Axioms.BoundDepth' n) ‚Üí ¬¨l.Nodup := by
  intro h;
  induction n generalizing l with
  | zero =>
    apply List.nodup_iff_get_ne_get.not.mpr;
    push_neg;
    let i‚ÇÄ : Fin l.length := ‚ü®0, by omega‚ü©;
    let i‚ÇÅ : Fin l.length := ‚ü®1, by omega‚ü©;
    use i‚ÇÄ, i‚ÇÅ;
    constructor;
    . simp [i‚ÇÄ, i‚ÇÅ];
    . replace h := Satisfies.or_def.mp h;
      rcases h with h | h;
      . replace h : l[1] ‚â∫ l[0] := by
          simpa [Semantics.Realize, Satisfies, hl‚ÇÅ, List.head_eq_getElem_zero] using h;
        apply _root_.antisymm ?_ h;
        apply List.Chain'.of_lt hl‚ÇÇ;
        simp;
      . exfalso;
        apply Satisfies.neg_def.mp h (w' := l[i‚ÇÅ]) $ by
          apply List.rel_head_of_chain'_preorder hl‚ÇÇ;
          simp;
        simp [Semantics.Realize, Satisfies, i‚ÇÅ, hl‚ÇÅ];
  | succ n ih =>
    replace h := Satisfies.or_def.mp h;
    rcases h with h | h;
    . apply List.nodup_iff_get_ne_get.not.mpr;
      push_neg;
      use ‚ü®0, by omega‚ü©, ‚ü®1, by omega‚ü©;
      constructor
      . simp;
      . simp only [Fin.getElem_fin];
        apply _root_.antisymm (r := F.Rel');
        . apply List.Chain'.of_lt hl‚ÇÇ;
          simp;
        . simpa [Semantics.Realize, Satisfies, hl‚ÇÅ, List.head_eq_getElem_zero] using h;
    . suffices ¬¨l.tail.Nodup by exact List.not_noDup_of_not_tail_noDup this;
      apply ih (l := l.tail);
      . exact List.Chain'.tail hl‚ÇÇ;
      . have := h (w' := l.tail.head ?_) ?_ ?_;
        . sorry;
        . apply List.ne_nil_of_length_pos
          simp [hl‚ÇÅ];
        . suffices l[0] ‚â∫ l[1] by simpa [List.head_eq_getElem_zero];
          apply List.Chain'.of_lt hl‚ÇÇ;
          simp;
        . simp [Satisfies, hl‚ÇÅ]
      . simpa;

lemma isDepthLt_of_validate_BoundDepth' {n : ‚Ñï} (h : F ‚äß Axioms.BoundDepth' n) : F.IsDepthLt (n + 1) := by
  rintro l ‚ü®l‚ÇÅ, l‚ÇÇ‚ü©;
  apply isDepthLt_of_validate_BoundDepth'_aux (n := n) l‚ÇÅ l‚ÇÇ;
  apply h;

lemma isDepthLt_of_validate_BoundDepth {n : ‚Ñï+} : F ‚äß Axioms.BoundDepth n ‚Üí F.IsDepthLt n := by
  convert isDepthLt_of_validate_BoundDepth' (n := n.natPred);
  simp;

end definability



section canonical

variable {S} [Entailment (Formula ‚Ñï) S]
variable {ùì¢ : S} [Entailment.Consistent ùì¢] [Entailment.Int ùì¢]

open Formula.Kripke
open Entailment
     Entailment.FiniteContext
open canonicalModel
open SaturatedConsistentTableau
open Classical

namespace Canonical

open Formula

lemma isDepthLt' (h : ùì¢ ‚ä¢! (Axioms.BoundDepth' n)) :
  ‚àÄ l : List (canonicalFrame ùì¢).World, l.length = n + 2 ‚àß (l.head? = some (canonicalFrame ùì¢).default) ‚àß l.Chain' (¬∑ ‚â∫ ¬∑) ‚Üí ‚àÉ i j : Fin l.length, i ‚â† j ‚àß l.get i = l.get j := by
  rintro l ‚ü®hl‚ÇÅ, hl‚ÇÇ, hl‚ÇÉ‚ü©;
  induction n with
  | zero =>
    simp at hl‚ÇÅ;
    let i‚ÇÄ : Fin l.length := ‚ü®0, by omega‚ü©;
    let i‚ÇÅ : Fin l.length := ‚ü®1, by omega‚ü©;
    use i‚ÇÄ, i‚ÇÅ;
    constructor;
    . simp [i‚ÇÄ, i‚ÇÅ];
    . generalize ex‚ÇÄ : l.get i‚ÇÄ = x‚ÇÄ;
      generalize ex‚ÇÅ : l.get i‚ÇÅ = x‚ÇÅ;
      sorry;
      /-
      have Rx‚ÇÄ‚ÇÅ : x‚ÇÄ ‚â∫ x‚ÇÅ := by
        sorry;
      by_contra hC;
      have := (iff_valid_on_canonicalModel_deducible.mpr h) x‚ÇÄ;
      simp [Axioms.BoundDepth', Axioms.BoundDepth] at this;
      rcases this with (h | h);
      . simp [Semantics.Realize, Satisfies, canonicalModel] at h;
        simp [Semantics.Realize] at h;
      . have := Satisfies.neg_def.mp h Rx‚ÇÄ‚ÇÅ

        sorry;
      -/
  | succ n ih =>
    sorry;

end Canonical

end canonical



end Kripke

end LO.Propositional
