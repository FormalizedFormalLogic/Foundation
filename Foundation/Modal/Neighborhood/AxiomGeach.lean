import Foundation.Modal.Neighborhood.Basic

namespace LO.Modal.Neighborhood

open Formula (atom)
open Formula.Neighborhood


variable {F : Frame} {X Y : Set F.World} {g : Axioms.Geach.Taple}

namespace Frame

class IsGeachConvergent (g : Axioms.Geach.Taple) (F : Frame) : Prop where
  gconv : ‚àÄ X : Set F, ùíü^[g.i] (‚Ñ¨^[g.m] X) ‚äÜ ‚Ñ¨^[g.j] (ùíü^[g.n] X)

@[simp, grind]
lemma gconv [F.IsGeachConvergent g] : ùíü^[g.i] (‚Ñ¨^[g.m] X) ‚äÜ ‚Ñ¨^[g.j] (ùíü^[g.n] X) := IsGeachConvergent.gconv X


class IsReflexive (F : Frame) : Prop where
  refl : ‚àÄ X : Set F, ‚Ñ¨ X ‚äÜ X

@[simp, grind] lemma refl [F.IsReflexive] : ‚Ñ¨ X ‚äÜ X := IsReflexive.refl X

instance [F.IsReflexive] : F.IsGeachConvergent ‚ü®0, 0, 1, 0‚ü© := ‚ü®by simp‚ü©

instance [F.IsGeachConvergent ‚ü®0, 0, 1, 0‚ü©] : F.IsReflexive := ‚ü®Œª _ => F.gconv (g := ‚ü®0, 0, 1, 0‚ü©)‚ü©


class IsTransitive (F : Frame) : Prop where
  trans : ‚àÄ X : Set F, ‚Ñ¨ X ‚äÜ ‚Ñ¨^[2] X

@[simp, grind] lemma trans [F.IsTransitive] : ‚Ñ¨ X ‚äÜ ‚Ñ¨^[2] X := IsTransitive.trans X

instance [F.IsTransitive] : F.IsGeachConvergent ‚ü®0, 2, 1, 0‚ü© := ‚ü®by simp‚ü©

instance [F.IsGeachConvergent ‚ü®0, 2, 1, 0‚ü©] : F.IsTransitive := ‚ü®Œª _ => F.gconv (g := ‚ü®0, 2, 1, 0‚ü©)‚ü©


class IsSerial (F : Frame) : Prop where
  serial : ‚àÄ X : Set F, ‚Ñ¨ X ‚äÜ ùíü X
@[simp] lemma serial [F.IsSerial] : ‚Ñ¨ X ‚äÜ ùíü X := IsSerial.serial X
instance [F.IsSerial] : F.IsGeachConvergent ‚ü®0, 0, 1, 1‚ü© := ‚ü®by simp‚ü©
instance [F.IsGeachConvergent ‚ü®0, 0, 1, 1‚ü©] : F.IsSerial := ‚ü®Œª _ => F.gconv (g := ‚ü®0, 0, 1, 1‚ü©)‚ü©

end Frame


section

variable {a : ‚Ñï}

lemma valid_axiomGeach_of_isGeachConvergent [F.IsGeachConvergent g] : F ‚äß Axioms.Geach g (.atom a) := by
  intro V x;
  apply Satisfies.def_imp.mpr;
  suffices x ‚àà ùíü^[g.i] (‚Ñ¨^[g.m] (V a)) ‚Üí x ‚àà ‚Ñ¨^[g.j] (ùíü^[g.n] (V a)) by simpa [Semantics.Realize, Satisfies];
  apply F.gconv;

@[simp] lemma valid_axiomT_of_isReflexive [F.IsReflexive] : F ‚äß Axioms.T (.atom a) := valid_axiomGeach_of_isGeachConvergent (g := ‚ü®0, 0, 1, 0‚ü©)
@[simp] lemma valid_axiomFour_of_isTransitive [F.IsTransitive] : F ‚äß Axioms.Four (.atom a) := valid_axiomGeach_of_isGeachConvergent (g := ‚ü®0, 2, 1, 0‚ü©)
@[simp] lemma valid_axiomD_of_isSerial [F.IsSerial] : F ‚äß Axioms.D (.atom a) := valid_axiomGeach_of_isGeachConvergent (g := ‚ü®0, 0, 1, 1‚ü©)


lemma isGeachConvergent_of_valid_axiomGeach (h : F ‚äß Axioms.Geach g (.atom a)) : F.IsGeachConvergent g := by
  constructor;
  intro X x hx;
  have : x ‚àà ùíü^[g.i] (‚Ñ¨^[g.m] X) ‚Üí x ‚àà ‚Ñ¨^[g.j] (ùíü^[g.n] X) := by
    simpa [Semantics.Realize, Satisfies] using Satisfies.def_imp.mp $ @h (Œª _ => X) x;
  apply this;
  apply hx;

lemma isReflexive_of_valid_axiomT (h : F ‚äß Axioms.T (.atom a)) : F.IsReflexive := by
  have := isGeachConvergent_of_valid_axiomGeach (g := ‚ü®0, 0, 1, 0‚ü©) h;
  infer_instance;

lemma isTransitive_of_valid_axiomFour (h : F ‚äß Axioms.Four (.atom a)) : F.IsTransitive := by
  have := isGeachConvergent_of_valid_axiomGeach (g := ‚ü®0, 2, 1, 0‚ü©) h;
  infer_instance;

lemma isSerial_of_valid_axiomD (h : F ‚äß Axioms.D (.atom a)) : F.IsSerial := by
  have := isGeachConvergent_of_valid_axiomGeach (g := ‚ü®0, 0, 1, 1‚ü©) h;
  infer_instance;

end

end LO.Modal.Neighborhood
