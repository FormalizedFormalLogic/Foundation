import Foundation.Modal.Neighborhood.Basic
import Foundation.Modal.Neighborhood.AxiomM
import Foundation.Modal.Neighborhood.AxiomC
import Foundation.Modal.Neighborhood.AxiomN
import Foundation.Modal.Neighborhood.AxiomGeach
import Foundation.Modal.Neighborhood.Supplementation

namespace LO.Modal.Neighborhood

open Classical

variable {F : Frame}

def Frame.intersectionClosure (F : Frame) : Frame := {
  World := F.World,
  ùí© a X := ‚àÉ Xs : Finset _, Xs ‚â† ‚àÖ ‚àß X = ‚ãÇ Xi ‚àà Xs, Xi ‚àß ‚àÄ Xi ‚àà Xs, Xi ‚àà F.ùí© a
}

instance Frame.intersectionClosure.isRegular : F.intersectionClosure.IsRegular := by
  constructor;
  intro X Y a;
  simp only [intersectionClosure, ne_eq, Set.mem_inter_iff, Set.mem_setOf_eq, and_imp];
  rintro ‚ü®Xs, hXs‚ÇÅ, rfl, hX‚ÇÇ‚ü© ‚ü®Ys, hYs‚ÇÅ, rfl, hY‚ÇÇ‚ü©;
  refine ‚ü®Xs ‚à™ Ys, ?_, ?_, ?_‚ü©;
  . simp only [Finset.union_eq_empty];
    grind;
  . ext b;
    simp only [Set.mem_inter_iff, Set.mem_iInter, Finset.mem_union];
    grind;
  . simp only [Finset.mem_union];
    rintro Z (hZ | hZ);
    . apply hX‚ÇÇ; assumption;
    . apply hY‚ÇÇ; assumption;

lemma Frame.intersectionClosure.mem_box_of_mem_original_box {F : Frame} {x : F} {s : Set F} : x ‚àà F.box s ‚Üí x ‚àà F.intersectionClosure.box s := by
  intro hx;
  use {s};
  refine ‚ü®?_, ?_, ?_‚ü© <;> simp_all;

def Frame.quasiFiltering (F : Frame) : Frame := F.intersectionClosure.supplementation

namespace Frame.quasiFiltering

lemma symm_ùí© : F.quasiFiltering.ùí© = F.supplementation.intersectionClosure.ùí© := by
  dsimp [quasiFiltering];
  ext w X;
  constructor;
  . rintro ‚ü®_, hYs‚ÇÉ, ‚ü®Ys, hYs‚ÇÅ, rfl, hYs‚ÇÇ‚ü©‚ü©;
    let Y := ‚ãÇ Yi ‚àà Ys, Yi;
    have : X = ‚ãÇ Yi ‚àà Ys, Yi ‚à™ (X \ Y) := calc
      _ = Y ‚à™ (X \ Y) := by
        ext x;
        constructor;
        . tauto;
        . rintro (h | ‚ü®h, _‚ü©);
          . apply hYs‚ÇÉ h;
          . assumption;
      _ = _ := by
        ext x;
        simp [Y];
        grind;
    rw [this];
    use Ys.image (Œª Yi => Yi ‚à™ (X \ Y));
    refine ‚ü®?_, ?_, ?_‚ü©;
    . simpa;
    . simp; rfl;
    . simp [Frame.supplementation];
      intro Yi hYi;
      use Yi;
      constructor;
      . simp;
      . apply hYs‚ÇÇ;
        assumption;
  . rintro ‚ü®Ys, hYs‚ÇÅ, rfl, hYs‚ÇÇ‚ü©;
    let Zs := Finset.image (Œ± := Ys) (Œª ‚ü®Yi, hYi‚ü© => hYs‚ÇÇ Yi hYi |>.choose) Finset.univ;
    use (‚ãÇ Zi ‚àà Zs, Zi);
    constructor;
    . rintro a ha _ ‚ü®Y, _, rfl‚ü©;
      suffices Y ‚àà Ys ‚Üí a ‚àà Y by simpa;
      rintro hY;
      apply hYs‚ÇÇ Y hY |>.choose_spec |>.1;
      simp only [Set.mem_setOf_eq, Finset.univ_eq_attach, Finset.mem_image, Finset.mem_attach, true_and, Subtype.exists, Set.iInter_exists, Set.mem_iInter, Zs] at ha;
      apply ha;
      . rfl;
      . assumption;
    . use Zs;
      refine ‚ü®?_, ?_, ?_‚ü©;
      . simpa [Zs];
      . rfl;
      . simp [Zs];
        rintro _ Yi hYi rfl;
        apply hYs‚ÇÇ Yi hYi |>.choose_spec |>.2;

lemma symm_box : F.quasiFiltering.box = F.supplementation.intersectionClosure.box := by
  ext x;
  simp [symm_ùí©];
  rfl;

instance isMonotonic : F.quasiFiltering.IsMonotonic := Frame.supplementation.isMonotonic

instance isRegular : F.quasiFiltering.IsRegular := Frame.supplementation.isRegular

instance isTransitive [F.IsTransitive] : F.quasiFiltering.IsTransitive := by
  constructor;
  intro X w hw;
  obtain ‚ü®Y, hY‚ÇÅ, Ys, hYs‚ÇÅ, rfl, hYs‚ÇÇ‚ü© := Frame.supplementation.iff_exists_subset.mp hw;
  apply Frame.mono' (F := F.quasiFiltering) (X := (‚ãÇ Yi ‚àà Ys, F.box Yi)) $ by
    intro a ha;
    use (‚ãÇ Yi ‚àà Ys, Yi);
    refine ‚ü®?_, Ys, ?_, ?_, ?_‚ü©
    . assumption;
    . assumption;
    . tauto;
    . simpa [Frame.box] using ha;
  replace hYs‚ÇÇ : w ‚àà ‚ãÇ Yi ‚àà Ys, F.box^[2] Yi := by
    simp only [Set.mem_iInter];
    intro Yi hYi;
    apply F.trans $ hYs‚ÇÇ Yi hYi;
  use (‚ãÇ Yi ‚àà Ys, F.box Yi);
  constructor;
  . rfl;
  . use Ys.image F.box
    refine ‚ü®?_, ?_, ?_‚ü©;
    . simpa;
    . simp;
    . simp [Frame.box] at hYs‚ÇÇ ‚ä¢;
      simpa;

lemma mem_box_of_mem_original_box {x : F} {s : Set F} : x ‚àà F.box s ‚Üí x ‚àà F.quasiFiltering.box s := by
  intro hx;
  suffices x ‚àà F.supplementation.intersectionClosure.box s by exact symm_box ‚ñ∏ this;
  apply Frame.intersectionClosure.mem_box_of_mem_original_box;
  apply Frame.supplementation.mem_box_of_mem_original_box;
  exact hx;

end Frame.quasiFiltering

end LO.Modal.Neighborhood
