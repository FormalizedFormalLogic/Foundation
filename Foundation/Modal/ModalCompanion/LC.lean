import Foundation.Modal.ModalCompanion.Int
import Foundation.Modal.Kripke.Logic.S4Point3
import Foundation.Modal.Boxdot.GLPoint3_GrzPoint3
import Foundation.Propositional.Kripke.Logic.LC

namespace LO.Modal

open LO.Entailment LO.Entailment.FiniteContext LO.Modal.Entailment
open Propositional
open Propositional.Formula (atom g√∂delTranslate)
open Propositional.Logic (smallestMC largestMC)
open Modal
open Modal.Kripke
open Modal.Formula.Kripke

@[simp]
lemma S4.CCLL_CCL : Modal.S4 ‚ä¢ ‚ñ°(‚ñ°œÜ ‚ûù ‚ñ°œà) ‚ûù ‚ñ°(‚ñ°œÜ ‚ûù œà) := by
  apply Complete.complete (ùìú := FrameClass.S4);
  rintro F ‚ü®_, _‚ü© V x h‚ÇÅ y Rxy h‚ÇÇ;
  apply @h‚ÇÅ y Rxy h‚ÇÇ;
  apply IsRefl.refl;

instance : Entailment.HasAxiomPoint3 (smallestMC Propositional.LC) where
  Point3 œÜ œà := by
    constructor;
    apply Modal.Logic.iff_provable.mp;
    apply Modal.Logic.subst (L := (smallestMC Propositional.LC)) (œÜ := Modal.Axioms.Point3 (.atom 0) (.atom 1)) (s := Œª a => match a with | 0 => œÜ | 1 => œà | _ => .atom a);
    have : (smallestMC Propositional.LC) ‚ä¢ ‚ñ°(‚ñ°.atom 0 ‚ûù ‚ñ°.atom 1) ‚ãé ‚ñ°(‚ñ°.atom 1 ‚ûù ‚ñ°.atom 0) := by
      apply Logic.sumNormal.mem‚ÇÇ!;
      use Axioms.Dummett (.atom 0) (.atom 1);
      constructor;
      . apply Propositional.Logic.iff_provable.mp;
        simp;
      . tauto;
    apply ?_ ‚®Ä this;
    apply CAA!_of_C!_of_C! <;>
    . apply Entailment.WeakerThan.pbl (ùì¢ := Modal.S4);
      simp;

namespace S4Point3

lemma g√∂delTranslated_axiomDummett : Modal.S4Point3 ‚ä¢ ‚ñ°(‚ñ°œà·µç ‚ûù œá·µç) ‚ûù ‚ñ°(œà·µç ‚ûù œá·µç) := by
  apply axiomK'!;
  apply nec!;
  apply C!_swap;
  apply deduct'!;
  apply deduct!;
  have h‚ÇÅ : [‚ñ°œà·µç ‚ûù œá·µç, œà·µç] ‚ä¢[Modal.S4Point3] œà·µç ‚ûù ‚ñ°œà·µç := of'! $ g√∂delTranslated_axiomTc;
  have h‚ÇÇ : [‚ñ°œà·µç ‚ûù œá·µç, œà·µç] ‚ä¢[Modal.S4Point3] œà·µç := by_axm!;
  have h‚ÇÉ : [‚ñ°œà·µç ‚ûù œá·µç, œà·µç] ‚ä¢[Modal.S4Point3] ‚ñ°œà·µç ‚ûù œá·µç := by_axm!;
  exact h‚ÇÉ ‚®Ä (h‚ÇÅ ‚®Ä h‚ÇÇ);

instance : Modal.S4Point3 ‚âä Propositional.LC.smallestMC := by
  apply Logic.equiv_of_provable;
  intro œÜ;
  constructor;
  . intro hœÜ;
    induction hœÜ using Modal.Hilbert.Normal.rec! with
    | axm s h =>
      rcases h with (rfl | rfl | rfl | rfl) <;> simp;
    | mdp ihœÜœà ihœÜ => exact ihœÜœà ‚®Ä ihœÜ;
    | nec ihœÜ => exact nec! ihœÜ;
    | _ => simp;
  . intro hœÜ;
    induction hœÜ using Logic.sumNormal.rec! with
    | mem‚ÇÅ h => apply WeakerThan.pbl h;
    | mdp ihœÜœà ihœà => exact ihœÜœà ‚®Ä ihœà;
    | nec ihœÜ => exact nec! ihœÜ;
    | subst ihœÜ => apply Logic.subst _ ihœÜ;
    | mem‚ÇÇ h =>
      rcases h with ‚ü®œÜ, hœÜ, rfl‚ü©;
      apply provable_g√∂delTranslated_of_provable ?_ (Propositional.Logic.iff_provable.mpr hœÜ);
      rintro _ ‚ü®_, (rfl | rfl), ‚ü®s, rfl‚ü©‚ü©;
      . simp;
      . apply A!_replace axiomPoint3! <;>
        apply S4Point3.g√∂delTranslated_axiomDummett;

lemma eq_smallestMC_of_KC : Modal.S4Point3 = Propositional.LC.smallestMC := Logic.eq_of_equiv

instance : Sound Propositional.LC.smallestMC FrameClass.S4Point3 := Kripke.sound_frameClass_of_equiv Modal.S4Point3 Propositional.LC.smallestMC

instance : ModalCompanion Propositional.LC Modal.S4Point3 := by
  apply eq_smallestMC_of_KC ‚ñ∏ Modal.instModalCompanion_of_smallestMC_via_KripkeSemantics
    (IL := Propositional.LC)
    (IC := Propositional.Kripke.FrameClass.LC)
    (MC := Modal.Kripke.FrameClass.S4Point3)
  rintro F hF;
  simp_all only [Set.mem_setOf_eq];
  constructor;

end S4Point3


instance : Propositional.LC.smallestMC ‚™Ø Modal.GrzPoint3 := calc
  _ ‚âä Modal.S4Point3  := by symm; infer_instance;
  _ ‚™Ø Modal.GrzPoint3 := inferInstance



section GrzPoint3

instance : Modal.GrzPoint3 ‚âä Propositional.LC.largestMC := by
  apply Logic.equiv_of_provable;
  intro œÜ;
  constructor;
  . intro hœÜ;
    induction hœÜ using Modal.Hilbert.Normal.rec! with
    | axm _ h =>
      rcases h with (rfl | rfl | rfl);
      . simp;
      . simp;
      . apply WeakerThan.pbl (ùì¢ := Propositional.LC.smallestMC); simp;
    | mdp ihœÜœà ihœà => exact ihœÜœà ‚®Ä ihœà;
    | nec ihœÜ => exact nec! ihœÜ;
    | _ => apply Logic.sumNormal.mem‚ÇÅ!; simp;
  . intro hœÜ;
    induction hœÜ using Logic.sumNormal.rec! with
    | mdp ihœÜœà ihœà => exact ihœÜœà ‚®Ä ihœà;
    | subst ih => apply Logic.subst _ ih;
    | nec ih => apply nec! ih;
    | mem‚ÇÅ h => apply WeakerThan.pbl h;
    | mem‚ÇÇ h => rcases h with ‚ü®œÜ, hœÜ, rfl‚ü©; simp;

lemma is_largestMC_of_LC : Modal.GrzPoint3 = Propositional.LC.largestMC := Logic.eq_of_equiv

instance : Sound Propositional.LC.largestMC FrameClass.finite_GrzPoint3 := Kripke.sound_frameClass_of_equiv Modal.GrzPoint3 Propositional.LC.largestMC

instance : ModalCompanion Propositional.LC Modal.GrzPoint3 := by
  apply is_largestMC_of_LC ‚ñ∏ Modal.instModalCompanion_of_largestMC_via_KripkeSemantics
    Propositional.Kripke.FrameClass.finite_LC
    ({ F : Frame | F.IsFiniteGrzPoint3' })
  rintro F hF;
  simp_all only [Set.mem_setOf_eq];
  exact {}

end GrzPoint3


section boxdot

theorem embedding_LC_GLPoint3 {œÜ : Propositional.Formula ‚Ñï} : Propositional.LC ‚ä¢ œÜ ‚Üî Modal.GLPoint3 ‚ä¢ œÜ·µç·µá :=
  Iff.trans ModalCompanion.companion iff_boxdot_GLPoint3_GrzPoint3.symm

end boxdot


end LO.Modal
