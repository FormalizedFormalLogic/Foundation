import Foundation.Modal.Kripke.Logic.GL.Completeness
import Foundation.Modal.Kripke.Logic.K4Point3
import Foundation.Modal.Logic.Global

namespace LO.Modal

open Entailment
open Entailment.Context
open Formula
open Formula.Kripke
open Hilbert.Kripke
open Kripke

namespace Kripke

protected class Frame.IsFiniteGLPoint3 (F : Frame) extends F.IsFiniteGL, F.IsPiecewiseConnected
protected class Frame.IsFiniteGLPoint3‚ÇÇ (F : Frame) extends F.IsFiniteGL, F.IsConnected

abbrev FrameClass.finite_GLPoint3 : FrameClass := { F | F.IsFiniteGLPoint3 }
abbrev FrameClass.finite_GLPoint3‚ÇÇ : FrameClass := { F | F.IsFiniteGLPoint3‚ÇÇ }

instance : blackpoint.IsFiniteGLPoint3 where
  p_connected := by tauto;

end Kripke


namespace Hilbert.GLPoint3.Kripke

instance : Sound Hilbert.GLPoint3 FrameClass.finite_GLPoint3 := instSound_of_validates_axioms $ by
  apply FrameClass.validates_with_AxiomK_of_validates;
  constructor;
  rintro _ (rfl | rfl | rfl) F ‚ü®_, _‚ü©;
  . exact validate_AxiomL_of_finite_trans_irrefl;
  . exact validate_WeakPoint3_of_weakConnected;

instance : Entailment.Consistent Hilbert.GLPoint3 :=
  consistent_of_sound_frameclass FrameClass.finite_GLPoint3 $ by
    use blackpoint;
    constructor;


section

open MaximalConsistentTableau

instance : Hilbert.K ‚™Ø Hilbert.GLPoint3 := Hilbert.Normal.weakerThan_of_subset_axioms (by simp)

open LO.Entailment Modal.Entailment in
open Formula.Kripke in
private lemma complete_lemma‚ÇÅ : Hilbert.GLPoint3 ‚ä¢! ‚àº‚ñ°œÜ ‚ûù ‚óá(‚ñ°œÜ ‚ãè ‚àºœÜ) := by
  apply CN!_of_CN!_left;
  apply C!_trans ?_ axiomL!;
  apply WeakerThan.pbl (ùì¢ := Hilbert.K);
  -- TODO: `K_prover`
  apply Complete.complete (ùìú := Kripke.FrameClass.K);
  intro F _ V x h‚ÇÅ y Rxy h‚ÇÇ;
  have := (Satisfies.not_dia_def.mp h‚ÇÅ) y Rxy;
  have := Satisfies.and_def.not.mp this;
  push_neg at this;
  have := this h‚ÇÇ;
  simpa using Satisfies.not_def.not.mp this;

private lemma complete_lemma‚ÇÇ {v : (canonicalModel Hilbert.GLPoint3).World } (h : ‚àº‚ñ°œÜ ‚àà v.1.1) :
  ‚àÉ! u, v ‚â∫ u ‚àß ‚ñ°œÜ ‚àà u.1.1 ‚àß ‚àºœÜ ‚àà u.1.1 := by
  obtain ‚ü®u, Rvu, hu‚ü© := iff_mem‚ÇÅ_dia.mp $ mdp_mem‚ÇÅ_provable complete_lemma‚ÇÅ h;
  use u;
  constructor;
  . refine ‚ü®Rvu, iff_mem‚ÇÅ_and.mp hu‚ü©;
  . rintro y ‚ü®Rvy, h‚ÇÅ, h‚ÇÇ‚ü©;
    rcases Frame.p_connected Rvu Rvy with (Ruy | _ | Ryu);
    . exfalso;
      apply neither ‚ü®Ruy $ iff_mem‚ÇÅ_and.mp hu |>.1, iff_mem‚ÇÅ_neg.mp h‚ÇÇ‚ü©;
    . tauto;
    . exfalso;
      apply neither ‚ü®Ryu h‚ÇÅ, iff_mem‚ÇÅ_neg.mp $ iff_mem‚ÇÅ_and.mp hu |>.2‚ü©;

open Classical in
instance : Complete Hilbert.GLPoint3 FrameClass.finite_GLPoint3‚ÇÇ := ‚ü®by
  intro œÜ;
  contrapose!;
  intro hœÜ;
  obtain ‚ü®u, hu‚ü© := ValidOnModel.exists_world_of_not $ iff_valid_on_canonicalModel_deducible.not.mpr hœÜ;
  replace hu : œÜ ‚àà u.1.2 := truthlemma‚ÇÇ.mpr hu;

  let v : (canonicalModel Hilbert.GLPoint3).World := if h : ‚ñ°œÜ ‚àà u.1.1 then u else
    (complete_lemma‚ÇÇ $ iff_mem‚ÇÅ_neg'.mpr h) |>.choose;
  have hv‚ÇÅ : ‚ñ°œÜ ‚àà v.1.1 := by
    dsimp [v];
    split;
    . assumption;
    . rename_i h;
      exact (complete_lemma‚ÇÇ $ iff_mem‚ÇÅ_neg'.mpr h) |>.choose_spec.1.2.1;
  have hv‚ÇÇ : œÜ ‚àà v.1.2 := by
    dsimp [v];
    split;
    . assumption;
    . apply iff_mem‚ÇÅ_neg.mp;
      rename_i h;
      exact (complete_lemma‚ÇÇ $ iff_mem‚ÇÅ_neg'.mpr h) |>.choose_spec.1.2.2;

  apply Kripke.not_validOnFrameClass_of_exists_model_world;

  let M : Kripke.Model := {
    World := {
      x // x = v ‚à® (v ‚â∫ x ‚àß ‚àÉ œà ‚àà œÜ.subformulas.prebox, ‚ñ°œà ‚àà v.1.2 ‚àß ‚ñ°œà ‚àà x.1.1 ‚àß œà ‚àà x.1.2)
    }
    world_nonempty := ‚ü®v, by simp‚ü©,
    Rel := Œª x y => (canonicalModel Hilbert.GLPoint3).Rel x.1 y.1
    Val := Œª x => (canonicalModel Hilbert.GLPoint3).Val x
  }
  use M, ‚ü®v, by simp‚ü©;
  have : M.IsTransitive := ‚ü®by
    suffices ‚àÄ (x y z : M.World), (canonicalModel Hilbert.GLPoint3).Rel x y ‚Üí (canonicalModel Hilbert.GLPoint3).Rel y z ‚Üí (canonicalModel Hilbert.GLPoint3).Rel x z by tauto;
    intro _ _ _;
    apply Frame.trans;
  ‚ü©
  have : M.IsIrreflexive := ‚ü®by
    rintro ‚ü®x, rfl | ‚ü®Rrx, œà, _, hœà‚ÇÇ, hœà‚ÇÉ, hœà‚ÇÑ‚ü©‚ü©;
    . by_contra hC; apply neither ‚ü®hC hv‚ÇÅ, hv‚ÇÇ‚ü©;
    . by_contra hC; apply neither ‚ü®hC hœà‚ÇÉ, hœà‚ÇÑ‚ü©;
  ‚ü©
  have : M.IsConnected := ‚ü®by
    suffices ‚àÄ x y : M.World, x ‚â† y ‚Üí (M.Rel x y ‚à® M.Rel y x) by
      intro x y;
      have := this x y;
      tauto;
    rintro ‚ü®x, rfl | ‚ü®Rvx, _‚ü©‚ü© ‚ü®y, rfl | ‚ü®Rvy, _‚ü©‚ü© hxy;
    . simp at hxy;
    . tauto;
    . tauto;
    . apply Frame.p_connected' Rvx Rvy ?_;
      simp_all [M];
  ‚ü©
  constructor;
  . exact {
      world_finite := by
        dsimp [M];
        sorry;
    }
  . have : ‚àÄ x : M.World, ‚àÄ œà ‚àà œÜ.subformulas, (Satisfies _ x œà ‚Üî œà ‚àà x.1.1.1) := by
      intro x œà hœà;
      induction œà generalizing x with
      | hatom => simp [Satisfies, M];
      | hfalsum => simp [Satisfies];
      | himp œà Œæ ihœà ihŒæ =>
        replace ihœà := ihœà x (by grind);
        replace ihŒæ := ihŒæ x (by grind);
        simp [
          Satisfies, ihœà, ihŒæ,
          iff_mem‚ÇÇ_imp,
          ‚Üêiff_not_mem‚ÇÇ_mem‚ÇÅ
        ];
      | hbox œà ihœà =>
        constructor;
        . contrapose!;
          intro h;
          apply Satisfies.not_box_def.mpr;
          have : ‚ñ°œà ‚àâ v.1.1 := by
            rcases M.connected ‚ü®v, by simp‚ü© x with (Rvx | rfl | Rxv);
            . contrapose! h;
              apply Rvx;
              apply mdp_mem‚ÇÅ_provable ?_ $ h;
              simp;
            . exact h;
            . rcases x.2 with (exv | ‚ü®Rvx, _‚ü©);
              . exact exv ‚ñ∏ h;
              . exfalso;
                apply M.irrefl _ $ M.trans Rxv Rvx;
          obtain ‚ü®y, ‚ü®Rvy, hy‚ÇÅ, hy‚ÇÇ‚ü©, _‚ü© := complete_lemma‚ÇÇ $ iff_mem‚ÇÅ_neg'.mpr this;
          use ‚ü®y, by
            right;
            constructor;
            . exact Rvy;
            . use œà;
              refine ‚ü®?_, ?_, ?_, ?_‚ü©;
              . simpa;
              . apply iff_not_mem‚ÇÅ_mem‚ÇÇ.mp; simpa;
              . simpa;
              . exact iff_mem‚ÇÅ_neg.mp $ hy‚ÇÇ;
          ‚ü©;
          constructor;
          . apply (or_iff_not_imp_right.mp $ M.connected' x _ ?_) ?_;
            . contrapose! h;
              subst h;
              apply hy‚ÇÅ;
            . by_contra Ryx;
              apply h;
              apply Ryx;
              apply mdp_mem‚ÇÅ_provable ?_ $ hy‚ÇÅ;
              simp;
          . apply ihœà _ (by grind) |>.not.mpr;
            apply iff_mem‚ÇÅ_neg'.mp hy‚ÇÇ;
        . intro h y Rxy;
          apply ihœà y (by grind) |>.mpr;
          apply canonicalModel.def_rel_box_mem‚ÇÅ.mp Rxy;
          simpa using h;
    apply this _ _ (by simp) |>.not.mpr;
    apply iff_not_mem‚ÇÅ_mem‚ÇÇ.mpr;
    exact hv‚ÇÇ;
‚ü©

end


instance : Hilbert.GL ‚™± Hilbert.GLPoint3 := by
  constructor;
  . apply Hilbert.Normal.weakerThan_of_provable_axioms;
    rintro _ (rfl | rfl | rfl) <;> simp;
  . apply Entailment.not_weakerThan_iff.mpr;
    use (Axioms.WeakPoint3 (.atom 0) (.atom 1));
    constructor;
    . simp;
    . apply Sound.not_provable_of_countermodel (ùìú := Kripke.FrameClass.finite_GL);
      let M : Model := ‚ü®‚ü®Fin 3, Œª x y => (x = 0 ‚àß y = 1) ‚à® (x = 0 ‚àß y = 2)‚ü©, (Œª w a => match a with | 0 => w = 1 | 1 => w = 2 | _ => False)‚ü©;
      apply Kripke.not_validOnFrameClass_of_exists_model_world;
      use M, 0;
      constructor;
      . apply Set.mem_setOf_eq.mpr;
        exact {
          trans := by omega,
          irrefl := by omega
        };
      . suffices (0 : M.World) ‚â∫ 1 ‚àß (‚àÄ x, (1 : M.World) ‚â∫ x ‚Üí x = 1) ‚àß (0 : M.World) ‚â∫ 2 ‚àß ‚àÄ x, (2 : M.World) ‚â∫ x ‚Üí x = 2 by
          simpa [Semantics.Realize, Satisfies, ValidOnFrame, M];
        refine ‚ü®?_, ?_, ?_, ?_‚ü©;
        all_goals omega;

instance : Hilbert.K4Point3 ‚™± Hilbert.GLPoint3 := by
  constructor;
  . apply Hilbert.Normal.weakerThan_of_provable_axioms;
    rintro _ (rfl | rfl | rfl) <;> simp;
  . apply Entailment.not_weakerThan_iff.mpr;
    use (Axioms.L (.atom 0));
    constructor;
    . simp;
    . apply Sound.not_provable_of_countermodel (ùìú := Kripke.FrameClass.K4Point3);
      apply Kripke.not_validOnFrameClass_of_exists_model_world;
      use ‚ü®‚ü®Fin 2, Œª x y => x ‚â§ y‚ü©, (Œª w a => False)‚ü©, 0;
      constructor;
      . apply Set.mem_setOf_eq.mpr;
        constructor;
      . simp [Semantics.Realize, Satisfies];
        constructor;
        . intro y Rxy;
          use y;
        . use 1;
          omega;

end Hilbert.GLPoint3.Kripke

instance : Modal.GL ‚™± Modal.GLPoint3 := inferInstance

instance : Modal.K4Point3 ‚™± Modal.GLPoint3 := inferInstance

end LO.Modal
