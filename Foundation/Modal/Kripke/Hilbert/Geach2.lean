import Foundation.Modal.Hilbert.Geach
import Foundation.Modal.Kripke.Completeness2
import Foundation.Modal.Kripke.Hilbert.Soundness

namespace LO.Modal

open Formula.Kripke

namespace Kripke

abbrev MultiGeacheanConfluentFrameClass (G : Set Geachean.Taple) : FrameClass := { F | (MultiGeachean G) F.Rel }

instance : (MultiGeacheanConfluentFrameClass G).IsNonempty := by
  use ‚ü®Unit, Œª _ _ => True‚ü©;
  intros t ht x y z h;
  use x;
  constructor <;> { apply Rel.iterate.true_any; tauto; }

namespace Kripke

variable {S} [Entailment (Formula ‚Ñï) S]
variable {ùì¢ : S} [Entailment.Consistent ùì¢] [Entailment.K ùì¢]

open Entailment
open canonicalFrame
open SaturatedConsistentTableau

lemma canonicalFrame.multigeachean_of_provable_geach
  (hG : ‚àÄ g ‚àà G, ‚àÄ œÜ, ùì¢ ‚ä¢! ‚óá^[g.i](‚ñ°^[g.m]œÜ) ‚ûù ‚ñ°^[g.j](‚óá^[g.n]œÜ))
  : MultiGeachean G (canonicalFrame ùì¢).Rel := by
  rintro g hg t‚ÇÅ t‚ÇÇ t‚ÇÉ ‚ü®ht‚ÇÅ‚ÇÇ, ht‚ÇÅ‚ÇÉ‚ü©;
  let t : Tableau ‚Ñï := ‚ü®‚ñ°''‚Åª¬π^[g.m]t‚ÇÅ.1.1, ‚óá''‚Åª¬π^[g.n]t‚ÇÇ.1.2‚ü©;
  obtain ‚ü®t', ht'‚ü© := lindenbaum (ùì¢ := ùì¢) (t‚ÇÄ := t) (by sorry);
  use t';
  constructor;
  . apply multirel_def_multibox.mpr;
    intro œÜ hœÜ;
    have := @multirel_def_multibox (t‚ÇÅ := t‚ÇÅ) (t‚ÇÇ := t‚ÇÇ) (n := g.i) |>.mp;
    have := @this ht‚ÇÅ‚ÇÇ œÜ ?_;
    . sorry;
    . sorry;
  . apply multirel_def_multibox.mpr;
    intro œÜ hœÜ;
    have := @multirel_def_multibox (t‚ÇÅ := t‚ÇÅ) (t‚ÇÇ := t‚ÇÉ) (n := g.j) |>.mp;
    have := @this ht‚ÇÅ‚ÇÉ œÜ ?_;
    . sorry;
    . sorry;

end Kripke

end Kripke

end LO.Modal
