import Foundation.Modal.Kripke.Hilbert.Grz.Completeness
import Foundation.Modal.Kripke.Hilbert.S4Dot2

namespace LO.Modal

open Formula
open Formula.Kripke
open Entailment
open Entailment.Context
open Kripke

namespace Kripke

abbrev ReflexiveTransitiveAntiSymmetricConfluentFiniteFrameClass : FiniteFrameClass := { F | Reflexive F.Rel ‚àß Transitive F.Rel ‚àß AntiSymmetric F.Rel ‚àß Confluent F.Rel }

instance : ReflexiveTransitiveAntiSymmetricConfluentFiniteFrameClass.DefinedBy {Axioms.K (atom 0) (atom 1), Axioms.Grz (atom 0), Axioms.Dot2 (atom 0)} := by
  have h‚ÇÅ := restrictFin_definability {Axioms.Dot2 (atom 0)} ({F | Confluent F}) $ by
    convert MultiGeacheanFrameClass.isDefinedByGeachAxioms ({‚ü®1, 1, 1, 1‚ü©});
    . ext;
      simp only [MultiGeachean, Set.mem_singleton_iff, forall_eq];
      apply Geachean.confluent_def;
    . simp;
  have := @FiniteFrameClass.definedBy_inter
    ReflexiveTransitiveAntiSymmetricFiniteFrameClass
    ({Axioms.K (atom 0) (atom 1), Axioms.Grz (atom 0)})
    inferInstance
    { F | Confluent F.Rel}
    {Axioms.Dot2 (atom 0)}
    h‚ÇÅ;
  have e‚ÇÅ :
    (ReflexiveTransitiveAntiSymmetricFiniteFrameClass ‚à© {F | Confluent F.Rel}) =
    (ReflexiveTransitiveAntiSymmetricConfluentFiniteFrameClass) := by
      ext F;
      simp;
      tauto;
  have e‚ÇÇ :
    ({Axioms.K (atom 0) (atom 1), Axioms.Grz (atom 0)} ‚à™ {Axioms.Dot2 (atom 0)}) =
    ({Axioms.K (atom 0) (atom 1), Axioms.Grz (atom 0), Axioms.Dot2 (atom 0)} : Set (Formula ‚Ñï)) := by
      ext œÜ;
      constructor;
      . rintro (‚ü®_, _‚ü© | _) <;> tauto;
      . rintro (‚ü®_, rfl‚ü© | ‚ü®_, rfl‚ü© | ‚ü®_, rfl‚ü©) <;> simp_all;
  rwa [e‚ÇÅ, e‚ÇÇ] at this;

instance : ReflexiveTransitiveAntiSymmetricConfluentFiniteFrameClass.IsNonempty := by
  use ‚ü®Unit, Œª _ _ => True‚ü©;
  simp [Reflexive, Transitive, AntiSymmetric, Confluent];

end Kripke


namespace Hilbert.GrzDot2

open Kripke.Grz

instance Kripke.sound : Sound (Hilbert.GrzDot2) (Kripke.ReflexiveTransitiveAntiSymmetricConfluentFiniteFrameClass) := inferInstance

instance Kripke.consistent : Entailment.Consistent (Hilbert.GrzDot2) :=
  Kripke.Hilbert.consistent_of_FiniteFrameClass ReflexiveTransitiveAntiSymmetricConfluentFiniteFrameClass

instance complete : Complete (Hilbert.GrzDot2) (Kripke.ReflexiveTransitiveAntiSymmetricConfluentFiniteFrameClass) :=
  Kripke.Grz.complete_of_mem_miniCanonicalFrame Kripke.ReflexiveTransitiveAntiSymmetricConfluentFiniteFrameClass $ by
    intro œÜ;
    refine ‚ü®miniCanonicalFrame.reflexive, miniCanonicalFrame.transitive, miniCanonicalFrame.antisymm, ?_‚ü©;
    intro X Y Z ‚ü®‚ü®RXY‚ÇÅ, RXY‚ÇÇ‚ü©, ‚ü®RXZ‚ÇÅ, RXZ‚ÇÇ‚ü©‚ü©;
    obtain ‚ü®U, hU‚ü© := ComplementClosedConsistentFinset.lindenbaum (ùì¢ := Hilbert.GrzDot2) (Œ¶ := Y.1 ‚à™ Z.1) (Œ® := œÜ.subformulasGrz)
      (by
        apply Finset.union_subset_iff.mpr;
        constructor;
        . intro œà hœà; exact Y.2.2 |>.subset hœà;
        . intro œà hœà; exact Z.2.2 |>.subset hœà;
      )
      (by
        simp [FormulaFinset.Consistent];
        sorry;
      );
    use U;
    constructor;
    . constructor;
      . intro œà _ hœàY; exact hU $ Finset.mem_union.mpr (by tauto);
      . intro h;
        ext Œæ;
        constructor;
        . intro hŒæY; exact hU $ Finset.mem_union.mpr (by tauto);
        . sorry;
    . constructor;
      . intro œà _ hœàZ; exact hU $ Finset.mem_union.mpr (by tauto);
      . intro h;
        ext Œæ;
        constructor;
        . intro hŒæZ; exact hU $ Finset.mem_union.mpr (by tauto);
        . sorry;

end Hilbert.GrzDot2

end LO.Modal
