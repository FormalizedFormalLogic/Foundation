import Foundation.Modal.Kripke.GL.Tree

namespace LO.System

open FiniteContext

variable {S F : Type*} [BasicModalLogicalConnective F] [DecidableEq F] [System F S]
variable {ùì¢ : S}
variable [System.GL ùì¢]

def imply_boxdot_boxdot_of_imply_boxdot_plain (h : ùì¢ ‚ä¢ ‚ä°œÜ ‚ûù œà) : ùì¢ ‚ä¢ ‚ä°œÜ ‚ûù ‚ä°œà := by
  have : ùì¢ ‚ä¢ ‚ñ°‚ä°œÜ ‚ûù ‚ñ°œà := implyBoxDistribute' h;
  have : ùì¢ ‚ä¢ ‚ñ°œÜ ‚ûù ‚ñ°œà := impTrans'' imply_Box_BoxBoxdot this;
  have : ùì¢ ‚ä¢ ‚ä°œÜ ‚ûù ‚ñ°œà := impTrans'' boxdotBox this;
  exact implyRightAnd h this;
lemma imply_boxdot_boxdot_of_imply_boxdot_plain! (h : ùì¢ ‚ä¢! ‚ä°œÜ ‚ûù œà) : ùì¢ ‚ä¢! ‚ä°œÜ ‚ûù ‚ä°œà := ‚ü®imply_boxdot_boxdot_of_imply_boxdot_plain h.some‚ü©

def imply_boxdot_axiomT_of_imply_boxdot_boxdot (h : ùì¢ ‚ä¢ ‚ä°œÜ ‚ûù ‚ä°œà) : ùì¢ ‚ä¢ ‚ä°œÜ ‚ûù (‚ñ°œà ‚ûù œà) := by
  apply deduct';
  apply deduct;
  have : [‚ñ°œà, ‚ä°œÜ] ‚ä¢[ùì¢] ‚ä°œà := (FiniteContext.of h) ‚®Ä (FiniteContext.byAxm);
  exact and‚ÇÅ' this;
lemma imply_boxdot_axiomT_of_imply_boxdot_boxdot! (h : ùì¢ ‚ä¢! ‚ä°œÜ ‚ûù ‚ä°œà) : ùì¢ ‚ä¢! ‚ä°œÜ ‚ûù (‚ñ°œà ‚ûù œà) := ‚ü®imply_boxdot_axiomT_of_imply_boxdot_boxdot h.some‚ü©

def imply_box_box_of_imply_boxdot_axiomT (h : ùì¢ ‚ä¢ ‚ä°œÜ ‚ûù (‚ñ°œà ‚ûù œà)) : ùì¢ ‚ä¢ ‚ñ°œÜ ‚ûù ‚ñ°œà := by
  have : ùì¢ ‚ä¢ ‚ñ°‚ä°œÜ ‚ûù ‚ñ°(‚ñ°œà ‚ûù œà) := implyBoxDistribute' h;
  have : ùì¢ ‚ä¢ ‚ñ°‚ä°œÜ ‚ûù ‚ñ°œà := impTrans'' this axiomL;
  exact impTrans'' imply_Box_BoxBoxdot this;
lemma imply_box_box_of_imply_boxdot_axiomT! (h : ùì¢ ‚ä¢! ‚ä°œÜ ‚ûù (‚ñ°œà ‚ûù œà)) : ùì¢ ‚ä¢! ‚ñ°œÜ ‚ûù ‚ñ°œà := ‚ü®imply_box_box_of_imply_boxdot_axiomT h.some‚ü©

lemma imply_box_box_of_imply_boxdot_plain! (h : ùì¢ ‚ä¢! ‚ä°œÜ ‚ûù œà) : ùì¢ ‚ä¢! ‚ñ°œÜ ‚ûù ‚ñ°œà := by
  exact imply_box_box_of_imply_boxdot_axiomT! $ imply_boxdot_axiomT_of_imply_boxdot_boxdot! $ imply_boxdot_boxdot_of_imply_boxdot_plain! h

end LO.System


namespace LO.Modal.Hilbert.GL

open System
open Formula.Kripke
open Kripke
open Kripke.FiniteTransitiveTreeModel

variable {œÜ œà : Formula ‚Ñï}

/-
  ÈÄÜ„ÅØ‰ª•‰∏ã„ÇíÈ†Ü„Å´Ëæø„Å£„Å¶ÊßãÊñáË´ñÁöÑ„Å´Ë®ºÊòé„Åß„Åç„ÇãÔºé
  - `System.imply_boxdot_boxdot_of_imply_boxdot_plain`
  - `System.imply_boxdot_axiomT_of_imply_boxdot_boxdot`
  - `System.imply_box_box_of_imply_boxdot_axiomT`
-/
lemma imply_boxdot_plain_of_imply_box_box : (Hilbert.GL ‚Ñï) ‚ä¢! ‚ñ°œÜ ‚ûù ‚ñ°œà ‚Üí (Hilbert.GL ‚Ñï) ‚ä¢! ‚ä°œÜ ‚ûù œà := by
  contrapose;
  intro h;
  have := Kripke.unprovable_iff_exists_unsatisfies_at_root_on_FiniteTransitiveTree.mp h;
  obtain ‚ü®M, hs‚ü© := this;

  have hs : Satisfies M.toModel M.root (‚ä°œÜ ‚ãè ‚àºœà) := by simp_all [Satisfies, Semantics.Realize];
  replace hs := @SimpleExtension.modal_equivalence_original_world M M.root (‚ä°œÜ ‚ãè ‚àºœà) |>.mp hs;
  have ‚ü®hs‚ÇÅ‚ÇÇ, hs‚ÇÉ‚ü© := Satisfies.and_def.mp hs;
  have ‚ü®hs‚ÇÅ, hs‚ÇÇ‚ü© := Satisfies.and_def.mp hs‚ÇÅ‚ÇÇ;

  have hbp : Satisfies M‚Üß.toModel (M‚Üß.root) (‚ñ°œÜ) := by
    intro x hx;
    rcases @Kripke.FiniteTransitiveTree.SimpleExtension.through_original_root M.toFiniteTransitiveTree x hx with (rfl | hr);
    . assumption;
    . apply hs‚ÇÇ;
      exact hr;
  have hbq : ¬¨(Satisfies M‚Üß.toModel (M‚Üß.root) (‚ñ°œà)) := by
    apply Satisfies.box_def.not.mpr;
    push_neg;
    use M.root;
    constructor;
    . apply M‚Üß.toRootedFrame.root_rooted M.root;
      simp [SimpleExtension, Kripke.FiniteTransitiveTree.SimpleExtension]; -- TODO: extract lemma
    . assumption;

  apply Kripke.unprovable_iff_exists_unsatisfies_at_root_on_FiniteTransitiveTree.mpr;
  use M‚Üß;
  exact _root_.not_imp.mpr ‚ü®hbp, hbq‚ü©;

theorem unnecessitation! : (Hilbert.GL ‚Ñï) ‚ä¢! ‚ñ°œÜ ‚Üí (Hilbert.GL ‚Ñï) ‚ä¢! œÜ := by
  intro h;
  have : (Hilbert.GL ‚Ñï) ‚ä¢! ‚ñ°‚ä§ ‚ûù ‚ñ°œÜ := imply‚ÇÅ'! (œà := ‚ñ°‚ä§) h;
  have : (Hilbert.GL ‚Ñï) ‚ä¢! ‚ä°‚ä§ ‚ûù œÜ := imply_boxdot_plain_of_imply_box_box this;
  exact this ‚®Ä boxdotverum!;

noncomputable instance : System.Unnecessitation (Hilbert.GL ‚Ñï) := ‚ü®Œª h => unnecessitation! ‚ü®h‚ü© |>.some‚ü©

end LO.Modal.Hilbert.GL
