import Foundation.Vorspiel.BinaryRelations
import Foundation.Modal.Kripke.Semantics

namespace LO.Modal

namespace Kripke

open LO.Kripke
open System
open Kripke
open Formula

variable {Œ± : Type u}

private lemma L_of_trans_and_cwf {F : Kripke.Frame} : (Transitive F.Rel ‚àß ConverseWellFounded F.Rel) ‚Üí F#Œ± ‚äß* ùóü := by
  rintro ‚ü®hTrans, hWF‚ü©;
  simp [Axioms.L];
  intro œÜ V w;
  apply Kripke.Satisfies.imp_def.mpr;
  contrapose;
  intro h; simp [Kripke.Satisfies] at h;
  obtain ‚ü®x, Rwx, h‚ü© := h;
  obtain ‚ü®m, ‚ü®‚ü®rwm, hm‚ü©, hm‚ÇÇ‚ü©‚ü© := hWF.has_min ({ x | (F.Rel w x) ‚àß ¬¨(Kripke.Satisfies ‚ü®F, V‚ü© x œÜ) }) $ by use x; tauto;
  simp [Kripke.Satisfies];
  use m;
  constructor;
  . exact rwm;
  . constructor;
    . simp [flip] at hm‚ÇÇ;
      intro n rmn;
      apply not_imp_not.mp $ hm‚ÇÇ n (hTrans rwm rmn);
      exact rmn;
    . exact hm;

private lemma trans_of_L  [Inhabited Œ±] {F : Kripke.Frame} : F#Œ± ‚äß* ùóü ‚Üí Transitive F.Rel := by
  contrapose;
  intro hT; simp [Transitive] at hT;
  obtain ‚ü®w‚ÇÅ, w‚ÇÇ, r‚ÇÅ‚ÇÇ, w‚ÇÉ, r‚ÇÇ‚ÇÉ, nr‚ÇÅ‚ÇÉ‚ü© := hT;
  apply iff_not_validOnFrame.mpr;
  use (Axioms.L (atom default));
  constructor;
  . simp;
  . use (Œª w' _ => w' ‚â† w‚ÇÇ ‚àß w' ‚â† w‚ÇÉ), w‚ÇÅ;
    simp only [Kripke.Satisfies]; simp;
    constructor;
    . intro x hx h;
      by_cases hx‚ÇÇ : x = w‚ÇÇ;
      . subst hx‚ÇÇ;
        simpa using h _ r‚ÇÇ‚ÇÉ;
      . by_cases hx‚ÇÉ : x = w‚ÇÉ <;> simp_all [Kripke.Satisfies, hx‚ÇÉ];
    . existsi w‚ÇÇ; simpa [Kripke.Satisfies];

variable [Inhabited Œ±]

private lemma cwf_of_L {F : Kripke.Frame} : F#Œ± ‚äß* ùóü ‚Üí ConverseWellFounded F.Rel := by
  contrapose;
  intro hCF;
  obtain ‚ü®X, ‚ü®x, _‚ü©, hX‚ÇÇ‚ü© := by simpa using ConverseWellFounded.iff_has_max.not.mp hCF;
  apply iff_not_validOnFrame.mpr;
  use (Axioms.L (atom default));
  constructor;
  . simp;
  . use (Œª w _ => w ‚àâ X), x;
    simp only [Kripke.Satisfies]; simp;
    constructor;
    . intro y _;
      by_cases hys : y ‚àà X
      . obtain ‚ü®z, _, Rxz‚ü© := hX‚ÇÇ y hys;
        simp_all;
        use z;
      . intros;
        simp_all only [not_false_eq_true];
    . obtain ‚ü®y, _, _‚ü© := hX‚ÇÇ x (by assumption);
      use y;

instance axiomL_definability : ùîΩ((ùóü : Theory Œ±)).DefinedBy (TransitiveConverseWellFoundedFrameClass) where
  define := by
    intro F;
    constructor;
    . intro h;
      constructor;
      . exact trans_of_L h;
      . exact cwf_of_L h;
    . exact L_of_trans_and_cwf;
  nonempty := by
    use ‚ü®PUnit,  Œª _ _ => False‚ü©;
    refine ‚ü®by tauto, ?_‚ü©;
    simp [Transitive, ConverseWellFounded];
    apply WellFounded.trivial_wellfounded;

instance : Sound (Hilbert.GL Œ±) (TransitiveConverseWellFoundedFrameClass#Œ±) := inferInstance
instance : System.Consistent (Hilbert.GL Œ±) := inferInstance

instance axiomL_finite_definability : ùîΩÍü≥((ùóü : Theory Œ±)).DefinedBy (TransitiveIrreflexiveFrameClassÍü≥) where
  define := by
    intro F;
    constructor;
    . rintro h;
      obtain ‚ü®hTrans, hCWF‚ü© := axiomL_definability.define.mp h;
      refine ‚ü®hTrans, ?irreflexive‚ü©;
      intro w;
      simpa using ConverseWellFounded.iff_has_max.mp hCWF {w} (by simp);
    . rintro ‚ü®hTrans, hIrrefl‚ü©;
      apply axiomL_definability.define.mpr;
      refine ‚ü®hTrans, ?_‚ü©;
      apply Finite.converseWellFounded_of_trans_irrefl';
      . infer_instance;
      . assumption;
      . assumption;
  nonempty := by
    use ‚ü®PUnit,  Œª _ _ => False‚ü©;
    refine ‚ü®?_, ?_‚ü© <;> tauto;

instance GL_finite_sound : Sound (Hilbert.GL Œ±) (TransitiveIrreflexiveFrameClassÍü≥#Œ±) := inferInstance

end Kripke

end LO.Modal
