import Foundation.Vorspiel.BinaryRelations
import Foundation.Modal.Geach
import Foundation.Modal.Kripke.Completeness


namespace LO.Modal

namespace Kripke

abbrev GeachConfluentFrameClass (t : GeachConfluent.Taple) : FrameClass := { F | (GeachConfluent t) F.Rel }

instance GeachConfluentFrameClass.nonempty : (GeachConfluentFrameClass t).Nonempty := by
  use reflexivePointFrame.toFrame;
  intros x _ _ _; use x;
  constructor <;> { apply Rel.iterate.true_any; tauto; }


abbrev MultiGeachConfluentFrameClass (ts : List GeachConfluent.Taple) : FrameClass := { F | (MultiGeachConfluent ts) F.Rel }

namespace MultiGeachConfluentFrameClass

@[simp] lemma def_nil : MultiGeachConfluentFrameClass [] = AllFrameClass := by rfl;

lemma def_one (t : GeachConfluent.Taple) : MultiGeachConfluentFrameClass [t] = GeachConfluentFrameClass t := by rfl;

lemma def_cons {t : GeachConfluent.Taple} {ts : List GeachConfluent.Taple} (ts_nil : ts ‚â† [])
  : MultiGeachConfluentFrameClass (t :: ts) = GeachConfluentFrameClass t ‚à© MultiGeachConfluentFrameClass ts := by
  apply Set.eq_of_subset_of_subset;
  . rintro F hF;
    apply MultiGeachConfluent.iff_cons ts_nil |>.mp;
    exact hF;
  . rintro F ‚ü®hF‚ÇÅ, hF‚ÇÇ‚ü©;
    apply MultiGeachConfluent.iff_cons ts_nil |>.mpr;
    constructor;
    . apply hF‚ÇÅ;
    . apply hF‚ÇÇ;

@[simp]
instance nonempty : (MultiGeachConfluentFrameClass ts).Nonempty := by
  use ‚ü®PUnit,  Œª _ _ => True‚ü©;
  induction ts using List.induction_with_singleton with
  | hnil => simp only [def_nil, Set.mem_univ];
  | hsingle t =>
    simp [GeachConfluentFrameClass];
    intros x _ _ _; use x;
    constructor <;> { apply Rel.iterate.true_any; tauto; }
  | hcons t ts ts_nil ih =>
    simp [MultiGeachConfluentFrameClass.def_cons ts_nil];
    constructor;
    . intro x _ _ _; use x;
      constructor <;> { apply Rel.iterate.true_any; tauto; }
    . exact ih;

end MultiGeachConfluentFrameClass


abbrev FrameClass.IsGeach (C : FrameClass) (ts : List GeachConfluent.Taple) := C = MultiGeachConfluentFrameClass ts


section

abbrev ReflexiveFrameClass : FrameClass := { F | Reflexive F.Rel }

lemma ReflexiveFrameClass.is_geach : ReflexiveFrameClass.IsGeach [‚ü®0, 0, 1, 0‚ü©] := by
  simp only [FrameClass.IsGeach, ReflexiveFrameClass, GeachConfluent.reflexive_def,
    MultiGeachConfluentFrameClass.def_one, GeachConfluentFrameClass];


abbrev SerialFrameClass : FrameClass := { F | Serial F.Rel }

lemma SerialFrameClass.is_geach : SerialFrameClass.IsGeach [‚ü®0, 0, 1, 1‚ü©] := by
  simp only [FrameClass.IsGeach, SerialFrameClass, GeachConfluent.serial_def,
    MultiGeachConfluentFrameClass.def_one, GeachConfluentFrameClass];


abbrev TransitiveFrameClass : FrameClass := { F | Transitive F.Rel }

lemma TransitiveFrameClass.is_geach : TransitiveFrameClass.IsGeach ([‚ü®0, 2, 1, 0‚ü©]) := by
  simp only [FrameClass.IsGeach, TransitiveFrameClass, GeachConfluent.transitive_def,
    MultiGeachConfluentFrameClass.def_one, GeachConfluentFrameClass];


abbrev ReflexiveEuclideanFrameClass : FrameClass := { F | Reflexive F.Rel ‚àß Euclidean F.Rel }

lemma ReflexiveEuclideanFrameClass.is_geach : ReflexiveEuclideanFrameClass.IsGeach ([‚ü®0, 0, 1, 0‚ü©, ‚ü®1, 1, 0, 1‚ü©]) := by
  simp only [FrameClass.IsGeach, ReflexiveEuclideanFrameClass, GeachConfluent.reflexive_def,
    GeachConfluent.euclidean_def, MultiGeachConfluentFrameClass, MultiGeachConfluent];


abbrev ReflexiveSymmetricFrameClass : FrameClass := { F | Reflexive F ‚àß Symmetric F }

lemma ReflexiveSymmetricFrameClass.is_geach : ReflexiveSymmetricFrameClass.IsGeach ([‚ü®0, 0, 1, 0‚ü©, ‚ü®0, 1, 0, 1‚ü©]) := by
  simp only [FrameClass.IsGeach, ReflexiveSymmetricFrameClass, GeachConfluent.reflexive_def,
    GeachConfluent.symmetric_def, MultiGeachConfluentFrameClass, MultiGeachConfluent];


abbrev ReflexiveTransitiveFrameClass : FrameClass := { F | Reflexive F ‚àß Transitive F }

lemma ReflexiveTransitiveFrameClass.is_geach : ReflexiveTransitiveFrameClass.IsGeach ([‚ü®0, 0, 1, 0‚ü©, ‚ü®0, 2, 1, 0‚ü©]) := by
  simp only [FrameClass.IsGeach, ReflexiveTransitiveFrameClass, GeachConfluent.reflexive_def,
    GeachConfluent.transitive_def, MultiGeachConfluentFrameClass, MultiGeachConfluent];


abbrev ReflexiveTransitiveConfluentFrameClass : FrameClass := { F | Reflexive F ‚àß Transitive F ‚àß Confluent F }

lemma ReflexiveTransitiveConfluentFrameClass.is_geach : ReflexiveTransitiveConfluentFrameClass.IsGeach ([‚ü®0, 0, 1, 0‚ü©, ‚ü®0, 2, 1, 0‚ü©, ‚ü®1, 1, 1, 1‚ü©]) := by
  simp only [FrameClass.IsGeach, ReflexiveTransitiveConfluentFrameClass,
    GeachConfluent.reflexive_def, GeachConfluent.transitive_def, GeachConfluent.confluent_def,
    MultiGeachConfluentFrameClass, MultiGeachConfluent];


abbrev ReflexiveTransitiveSymmetricFrameClass : FrameClass := { F | Reflexive F ‚àß Transitive F ‚àß Symmetric F }

lemma ReflexiveTransitiveSymmetricFrameClass.is_geach : ReflexiveTransitiveSymmetricFrameClass.IsGeach ([‚ü®0, 0, 1, 0‚ü©, ‚ü®0, 2, 1, 0‚ü©, ‚ü®0, 1, 0, 1‚ü©]) := by
  simp only [FrameClass.IsGeach, ReflexiveTransitiveSymmetricFrameClass,
    GeachConfluent.reflexive_def, GeachConfluent.transitive_def, GeachConfluent.symmetric_def,
    MultiGeachConfluentFrameClass, MultiGeachConfluent];

end


section definability

open Kripke
open Formula
open Formula.Kripke (Satisfies)
open Formula.Kripke.Satisfies

lemma GeachConfluentFrameClass.isDefinedBy {t : GeachConfluent.Taple} : (GeachConfluentFrameClass t).DefinedBy ùó¥ùó≤(t) := by
  intro F;
  constructor;
  . intro hG;
    simp [GeachConfluentFrameClass];
    intro œÜ V x him;
    apply Satisfies.multibox_def.mpr;
    intro z Rxz;
    apply Satisfies.multidia_def.mpr;
    obtain ‚ü®y, Rxy, hbp‚ü© := multidia_def.mp him;
    obtain ‚ü®u, Ryu, Rzu‚ü© := hG ‚ü®Rxy, Rxz‚ü©;
    use u;
    constructor;
    . assumption;
    . exact (Satisfies.multibox_def.mp hbp) Ryu;
  . rintro h x y z ‚ü®hi, hj‚ü©;
    simp [Kripke.ValidOnFrame] at h;
    let M : Model := ‚ü®F, Œª v _ => y ‚â∫^[t.m] v ‚ü©;
    have him_x : Satisfies M x (‚óá^[t.i](‚ñ°^[t.m](atom 0))) := by
      apply Satisfies.multidia_def.mpr;
      use y;
      constructor;
      . exact hi;
      . apply Satisfies.multibox_def.mpr; aesop;
    have hjn_x : Kripke.Satisfies M x (‚ñ°^[t.j](‚óá^[t.n](atom 0))) := Satisfies.imp_def.mp (h (atom 0) M.Val x) him_x;
    have hn_z : Kripke.Satisfies M z (‚óá^[t.n](atom 0)) := Satisfies.multibox_def.mp hjn_x hj;
    obtain ‚ü®u, hzu, hyu‚ü© := Kripke.Satisfies.multidia_def.mp hn_z;
    use u;
    exact ‚ü®hyu, hzu‚ü©;

lemma MultiGeachConfluentFrameClass.isDefinedBy {ts : List GeachConfluent.Taple} : (MultiGeachConfluentFrameClass ts).DefinedBy ùóöùó≤(ts) := by
  intro F;
  induction ts using List.induction_with_singleton with
  | hnil => simp [MultiGeachConfluentFrameClass];
  | hsingle t =>
    simp only [MultiGeachConfluentFrameClass.def_one, Axioms.MultiGeach.def_one];
    apply GeachConfluentFrameClass.isDefinedBy;
  | hcons t ts ts_nil ih =>
    simp [MultiGeachConfluentFrameClass.def_cons (ts_nil := ts_nil)];
    constructor;
    . rintro ‚ü®ht, hts‚ü©;
      constructor;
      . intro œÜ
        apply Semantics.realizeSet_iff.mp $ @GeachConfluentFrameClass.isDefinedBy (t := t) F |>.mp ht
        tauto;
      . apply ih.mp;
        exact hts;
    . rintro ‚ü®ht, hts‚ü©;
      constructor;
      . apply @GeachConfluentFrameClass.isDefinedBy t F |>.mpr;
        apply Semantics.realizeSet_iff.mpr;
        simpa using ht;
      . apply ih.mpr hts;

lemma ReflexiveFrameClass.isDefinedBy : (ReflexiveFrameClass).DefinedBy ùóß := by
  rw [ReflexiveFrameClass.is_geach, Axioms.T.is_geach];
  apply GeachConfluentFrameClass.isDefinedBy;

lemma SerialFrameClass.isDefinedBy : (SerialFrameClass).DefinedBy ùóó := by
  rw [SerialFrameClass.is_geach, Axioms.D.is_geach];
  apply GeachConfluentFrameClass.isDefinedBy;

lemma TransitiveFrameClass.isDefinedBy : (TransitiveFrameClass).DefinedBy ùü∞ := by
  rw [TransitiveFrameClass.is_geach, Axioms.Four.is_geach];
  apply GeachConfluentFrameClass.isDefinedBy;

end definability

end Kripke


namespace Hilbert

open Modal.Kripke


section soundness

open Hilbert.Kripke

instance KD.Kripke.sound : Sound (Hilbert.KD ‚Ñï) (SerialFrameClass) :=
  instSound_of_frameClass_definedBy
  (by rw [SerialFrameClass.is_geach]; apply GeachConfluentFrameClass.isDefinedBy)
  (by simp [is_geach, Hilbert.Geach, Axioms.MultiGeach.def_one])

instance KD.consistent : System.Consistent (Hilbert.KD ‚Ñï) := instConsistent_of_nonempty_frameclass (C := SerialFrameClass) $ by
  rw [SerialFrameClass.is_geach];
  simp;


instance KT.Kripke.sound : Sound (Hilbert.KT ‚Ñï) (ReflexiveFrameClass) :=
  instSound_of_frameClass_definedBy
  (by rw [ReflexiveFrameClass.is_geach]; apply GeachConfluentFrameClass.isDefinedBy)
  (by simp [is_geach, Hilbert.Geach, Axioms.MultiGeach.def_one])

instance KT.consistent : System.Consistent (Hilbert.KT ‚Ñï) := instConsistent_of_nonempty_frameclass (C := ReflexiveFrameClass) $ by
  rw [ReflexiveFrameClass.is_geach];
  simp;


instance KTB.Kripke.sound : Sound (Hilbert.KTB ‚Ñï) (ReflexiveSymmetricFrameClass) :=
  instSound_of_frameClass_definedBy
  (by rw [ReflexiveSymmetricFrameClass.is_geach]; apply MultiGeachConfluentFrameClass.isDefinedBy)
  (by simp [is_geach, Hilbert.Geach])

instance KTB.consistent : System.Consistent (Hilbert.KTB ‚Ñï) := instConsistent_of_nonempty_frameclass (C := ReflexiveSymmetricFrameClass) $ by
  rw [ReflexiveSymmetricFrameClass.is_geach];
  simp;


instance K4.Kripke.sound : Sound (Hilbert.K4 ‚Ñï) (TransitiveFrameClass) :=
  instSound_of_frameClass_definedBy
  (by rw [TransitiveFrameClass.is_geach]; apply MultiGeachConfluentFrameClass.isDefinedBy)
  (by simp [is_geach, Hilbert.Geach])

instance K4.consistent : System.Consistent (Hilbert.K4 ‚Ñï) := instConsistent_of_nonempty_frameclass (C := TransitiveFrameClass) $ by
  rw [TransitiveFrameClass.is_geach];
  simp;


instance S4.Kripke.sound : Sound (Hilbert.S4 ‚Ñï) (ReflexiveTransitiveFrameClass) :=
  instSound_of_frameClass_definedBy
  (by rw [ReflexiveTransitiveFrameClass.is_geach]; apply MultiGeachConfluentFrameClass.isDefinedBy)
  (by simp [is_geach, Hilbert.Geach])

instance S4.consistent : System.Consistent (Hilbert.S4 ‚Ñï) := instConsistent_of_nonempty_frameclass (C := ReflexiveTransitiveFrameClass) $ by
  rw [ReflexiveTransitiveFrameClass.is_geach];
  simp;


instance S5.Kripke.sound : Sound (Hilbert.S5 ‚Ñï) (ReflexiveEuclideanFrameClass) :=
  instSound_of_frameClass_definedBy
  (by rw [ReflexiveEuclideanFrameClass.is_geach]; apply MultiGeachConfluentFrameClass.isDefinedBy)
  (by simp [is_geach, Hilbert.Geach])

instance S5.consistent : System.Consistent (Hilbert.S5 ‚Ñï) := instConsistent_of_nonempty_frameclass (C := ReflexiveEuclideanFrameClass) $ by
  rw [ReflexiveEuclideanFrameClass.is_geach];
  simp;


instance KT4B.Kripke.sound : Sound (Hilbert.KT4B ‚Ñï) (ReflexiveTransitiveSymmetricFrameClass) :=
  instSound_of_frameClass_definedBy
  (by rw [ReflexiveTransitiveSymmetricFrameClass.is_geach]; apply MultiGeachConfluentFrameClass.isDefinedBy)
  (by simp [is_geach, Hilbert.Geach])

instance KT4B.consistent : System.Consistent (Hilbert.KT4B ‚Ñï) := instConsistent_of_nonempty_frameclass (C := ReflexiveTransitiveSymmetricFrameClass) $ by
  rw [ReflexiveTransitiveSymmetricFrameClass.is_geach];
  simp;

end soundness


namespace Kripke

open System
open Theory MaximalConsistentTheory
open canonicalFrame

namespace canonicalFrame

variable {Ax : Theory ‚Ñï} [(Hilbert.ExtK Ax).Consistent]

lemma is_geachConfluent_of_subset_Geach (h : ùó¥ùó≤(t) ‚äÜ Ax) : GeachConfluent t (canonicalFrame (Hilbert.ExtK Ax)).Rel := by
  rintro Œ©‚ÇÅ Œ©‚ÇÇ Œ©‚ÇÉ h;
  have ‚ü®r‚ÇÅ‚ÇÇ, r‚ÇÅ‚ÇÉ‚ü© := h; clear h;
  have ‚ü®Œ©, hŒ©‚ü© := lindenbaum (H := (Hilbert.ExtK Ax)) (T := ‚ñ°''‚Åª¬π^[t.m]Œ©‚ÇÇ.theory ‚à™ ‚ñ°''‚Åª¬π^[t.n]Œ©‚ÇÉ.theory) $ by
    apply intro_union_consistent;
    rintro Œì Œî ‚ü®hŒì, hŒî‚ü© hC;

    replace hŒì : ‚àÄ œÜ ‚àà Œì, ‚ñ°^[t.m]œÜ ‚àà Œ©‚ÇÇ.theory := by simpa using hŒì;
    have hŒìconj : ‚ñ°^[t.m]‚ãÄŒì ‚àà Œ©‚ÇÇ.theory := iff_mem_multibox_conj.mpr hŒì;

    replace hŒî : ‚àÄ œÜ ‚àà Œî, ‚ñ°^[t.n]œÜ ‚àà Œ©‚ÇÉ.theory := by simpa using hŒî;
    have : ‚ñ°^[t.n]‚ãÄŒî ‚àà Œ©‚ÇÉ.theory := iff_mem_multibox_conj.mpr hŒî;

    have : ‚ñ°^[t.j](‚óá^[t.n]‚ãÄŒì) ‚àà Œ©‚ÇÅ.theory := iff_mem_imp.mp
      (membership_iff.mpr $ Context.of! $ Hilbert.ExtK.maxm! (by aesop))
      (multirel_def_multidia.mp r‚ÇÅ‚ÇÇ hŒìconj)
    have : ‚óá^[t.n]‚ãÄŒì ‚àà Œ©‚ÇÉ.theory := multirel_def_multibox.mp r‚ÇÅ‚ÇÉ this;

    have : (Hilbert.ExtK Ax) ‚ä¢! ‚ñ°^[t.n]‚ãÄŒî ‚ãè ‚óá^[t.n]‚ãÄŒì ‚ûù ‚ä• := by {
      apply and_imply_iff_imply_imply'!.mpr;
      exact imp_trans''!
        (show _ ‚ä¢! ‚ñ°^[t.n]‚ãÄŒî ‚ûù ‚ñ°^[t.n](‚àº‚ãÄŒì) by exact imply_multibox_distribute'! $ contra‚ÇÅ'! $ imp_trans''! (and_imply_iff_imply_imply'!.mp hC) (and‚ÇÇ'! neg_equiv!))
        (show _ ‚ä¢! ‚ñ°^[t.n](‚àº‚ãÄŒì) ‚ûù (‚óá^[t.n]‚ãÄŒì) ‚ûù ‚ä• by exact imp_trans''! (contra‚ÇÅ'! $ and‚ÇÅ'! $ multidia_duality!) (and‚ÇÅ'! neg_equiv!));
    }
    have : (Hilbert.ExtK Ax) ‚ä¨ ‚ñ°^[t.n]‚ãÄŒî ‚ãè ‚óá^[t.n]‚ãÄŒì ‚ûù ‚ä• := by simpa using (def_consistent.mp Œ©‚ÇÉ.consistent) (Œì := [‚ñ°^[t.n]‚ãÄŒî, ‚óá^[t.n]‚ãÄŒì]) (by simp_all)

    contradiction;

  use Œ©; simp only [Set.union_subset_iff] at hŒ©;
  constructor;
  . apply multirel_def_multibox.mpr; apply hŒ©.1;
  . apply multirel_def_multibox.mpr; apply hŒ©.2;

lemma is_multiGeachConfluent_of_subset_MultiGeach (h : ùóöùó≤(ts) ‚äÜ Ax) : MultiGeachConfluent ts (canonicalFrame (Hilbert.ExtK Ax)).Rel := by
  induction ts using List.induction_with_singleton with
  | hnil => simp [MultiGeachConfluent];
  | hsingle t =>
    simp [MultiGeachConfluent.iff_singleton] at h;
    exact is_geachConfluent_of_subset_Geach h;
  | hcons t ts ts_nil ih =>
    simp [(MultiGeachConfluent.iff_cons ts_nil)];
    constructor;
    . apply is_geachConfluent_of_subset_Geach; simp_all;
    . apply ih; simp_all;

lemma is_reflexive_of_subset_T (h : ùóß ‚äÜ Ax) : Reflexive (canonicalFrame (Hilbert.ExtK Ax)).Rel := by
  rw [GeachConfluent.reflexive_def, Axioms.T.is_geach] at *
  apply is_geachConfluent_of_subset_Geach;
  exact h;

lemma is_serial_of_subset_D (h : ùóó ‚äÜ Ax) : Serial (canonicalFrame (Hilbert.ExtK Ax)).Rel := by
  rw [GeachConfluent.serial_def, Axioms.D.is_geach] at *
  apply is_geachConfluent_of_subset_Geach;
  exact h;

lemma is_transitive_of_subset_Four (h : ùü∞ ‚äÜ Ax) : Transitive (canonicalFrame (Hilbert.ExtK Ax)).Rel := by
  rw [GeachConfluent.transitive_def, Axioms.Four.is_geach] at *
  apply is_geachConfluent_of_subset_Geach;
  exact h;

lemma is_euclidean_of_subset_Five (h : ùü± ‚äÜ Ax) : Euclidean (canonicalFrame (Hilbert.ExtK Ax)).Rel := by
  rw [GeachConfluent.euclidean_def, Axioms.Five.is_geach] at *
  apply is_geachConfluent_of_subset_Geach;
  exact h;

lemma is_symmetric_of_subset_B (h : ùóï ‚äÜ Ax) : Symmetric (canonicalFrame (Hilbert.ExtK Ax)).Rel := by
  rw [GeachConfluent.symmetric_def, Axioms.B.is_geach] at *
  apply is_geachConfluent_of_subset_Geach;
  exact h;

end canonicalFrame

end Kripke


section completeness

instance KT.Kripke.complete : Complete (Hilbert.KT ‚Ñï) ReflexiveFrameClass := Kripke.instCompleteOfCanonical $ by
  rw [ReflexiveFrameClass.is_geach];
  apply Kripke.canonicalFrame.is_multiGeachConfluent_of_subset_MultiGeach;
  simp [Axioms.T.is_geach];

instance KTB.Kripke.complete : Complete (Hilbert.KTB ‚Ñï) ReflexiveSymmetricFrameClass := Kripke.instCompleteOfCanonical $ by
  rw [ReflexiveSymmetricFrameClass.is_geach];
  apply Kripke.canonicalFrame.is_multiGeachConfluent_of_subset_MultiGeach;
  simp [Axioms.MultiGeach.def_two, Axioms.T.is_geach, Axioms.B.is_geach];

instance K4.Kripke.complete : Complete (Hilbert.K4 ‚Ñï) TransitiveFrameClass := Kripke.instCompleteOfCanonical $ by
  rw [TransitiveFrameClass.is_geach];
  apply Kripke.canonicalFrame.is_multiGeachConfluent_of_subset_MultiGeach;
  simp;

instance S4.Kripke.complete : Complete (Hilbert.S4 ‚Ñï) ReflexiveTransitiveFrameClass := Kripke.instCompleteOfCanonical $ by
  rw [ReflexiveTransitiveFrameClass.is_geach];
  apply Kripke.canonicalFrame.is_multiGeachConfluent_of_subset_MultiGeach;
  simp [Axioms.T.is_geach, Axioms.Four.is_geach, Axioms.MultiGeach.def_two];

instance KT4B.Kripke.complete : Complete (Hilbert.KT4B ‚Ñï) ReflexiveTransitiveSymmetricFrameClass := Kripke.instCompleteOfCanonical $ by
  rw [ReflexiveTransitiveSymmetricFrameClass.is_geach];
  apply Kripke.canonicalFrame.is_multiGeachConfluent_of_subset_MultiGeach;
  simp [Axioms.T.is_geach, Axioms.Four.is_geach, Axioms.B.is_geach, Axioms.MultiGeach.def_three];

instance S5.Kripke.complete : Complete (Hilbert.S5 ‚Ñï) ReflexiveEuclideanFrameClass := Kripke.instCompleteOfCanonical $ by
  rw [ReflexiveEuclideanFrameClass.is_geach];
  apply Kripke.canonicalFrame.is_multiGeachConfluent_of_subset_MultiGeach;
  simp [Axioms.T.is_geach, Axioms.Five.is_geach, Axioms.MultiGeach.def_two];

end completeness


section

open System
open Formula (atom)
open Formula.Kripke

lemma KD_weakerThan_KT : (Hilbert.KD ‚Ñï) ‚â§‚Çõ (Hilbert.KT ‚Ñï) := by
  apply Kripke.weakerThan_of_subset_FrameClass SerialFrameClass ReflexiveFrameClass;
  intro F hF; apply serial_of_refl hF;

theorem KD_strictlyWeakerThan_KT : (Hilbert.KD ‚Ñï) <‚Çõ (Hilbert.KT ‚Ñï) := by
  constructor;
  . apply KD_weakerThan_KT;
  . apply weakerThan_iff.not.mpr;
    push_neg;
    use (‚ñ°(atom 0) ‚ûù (atom 0));
    constructor;
    . exact Deduction.maxm! (by simp);
    . apply KD.Kripke.sound.not_provable_of_countermodel;
      simp [ValidOnModel, ValidOnFrame, Satisfies];
      use ‚ü®Fin 2, Œª _ y => y = 1‚ü©;
      constructor;
      . intro x; use 1;
      . use (Œª w _ => w = 1), 0;
        simp [Semantics.Realize, Satisfies];

theorem K_strictlyWeakerThan_KT : (Hilbert.K ‚Ñï) <‚Çõ (Hilbert.KT ‚Ñï) := strictlyWeakerThan.trans K_strictlyWeakerThan_KD KD_strictlyWeakerThan_KT

theorem K4_strictlyWeakerThan_S4 : (Hilbert.K4 ‚Ñï) <‚Çõ (Hilbert.S4 ‚Ñï) := by
  constructor;
  . apply K4_weakerThan_S4;
  . simp [weakerThan_iff]
    use (‚ñ°(atom 0) ‚ûù (atom 0));
    constructor;
    . exact Deduction.maxm! (by simp)
    . apply K4.Kripke.sound.not_provable_of_countermodel;
      simp [ValidOnModel, ValidOnFrame, Satisfies];
      use ‚ü®Fin 3, Œª _ y => y = 1‚ü©;
      constructor;
      . intro _ _ _; simp_all;
      . use (Œª w _ => w = 1), 0;
        simp [Semantics.Realize, Satisfies];

lemma S4_weakerThan_S5 : (Hilbert.S4 ‚Ñï) ‚â§‚Çõ (Hilbert.S5 ‚Ñï) := by
  apply Kripke.weakerThan_of_subset_FrameClass ReflexiveTransitiveFrameClass ReflexiveEuclideanFrameClass;
  rintro _ ‚ü®F_refl, F_eucl‚ü©;
  refine ‚ü®F_refl, trans_of_refl_eucl F_refl F_eucl‚ü©;

theorem S4_strictlyWeakerThan_S5 : (Hilbert.S4 ‚Ñï) <‚Çõ (Hilbert.S5 ‚Ñï) := by
  constructor;
  . apply S4_weakerThan_S5;
  . simp [weakerThan_iff];
    use (‚óá(atom 0) ‚ûù ‚ñ°‚óá(atom 0));
    constructor;
    . exact Deduction.maxm! (by simp);
    . apply S4.Kripke.sound.not_provable_of_countermodel;
      simp [ValidOnModel, ValidOnFrame, Satisfies];
      use ‚ü®Fin 3, Œª x y => (x = y) ‚à® (x = 0 ‚àß y = 1) ‚à® (x = 0 ‚àß y = 2)‚ü©;
      refine ‚ü®?_, ?_, ?_‚ü©;
      . simp [Reflexive];
      . simp [Transitive]; aesop;
      . use (Œª w _ => w = 2), 0;
        simp [Satisfies, Semantics.Realize];
        constructor;
        . omega;
        . use 1; omega;

theorem equiv_S5_KT4B : (Hilbert.S5 ‚Ñï) =‚Çõ (Hilbert.KT4B ‚Ñï) := by
  apply Kripke.equiv_of_eq_FrameClass ReflexiveEuclideanFrameClass ReflexiveTransitiveSymmetricFrameClass;
  apply Set.eq_of_subset_of_subset;
  . rintro F ‚ü®F_refl, F_eucl‚ü©;
    refine ‚ü®F_refl, trans_of_refl_eucl F_refl F_eucl, symm_of_refl_eucl F_refl F_eucl‚ü©;
  . rintro F ‚ü®F_refl, F_eucl, F_symm‚ü©;
    refine ‚ü®F_refl, eucl_of_symm_trans F_symm F_eucl‚ü©;

end

end Hilbert

end LO.Modal
