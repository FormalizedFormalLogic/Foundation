import Foundation.Logic.Kripke.Closure
import Foundation.Modal.Kripke.Completeness
import Foundation.Modal.Kripke.Geach

universe u v

namespace LO.Modal

variable {Œ± : Type u} -- [DecidableEq Œ±] [Inhabited Œ±]

namespace Kripke

open LO.Kripke
open Formula (atom)
open Formula.Kripke

section

def filterEquiv (M : Kripke.Model Œ±) (T : Theory Œ±) [T.SubformulaClosed] (x y : M.World) := ‚àÄ œÜ, (_ : œÜ ‚àà T := by trivial) ‚Üí x ‚äß œÜ ‚Üî y ‚äß œÜ

variable (M : Kripke.Model Œ±) (T : Theory Œ±) [T.SubformulaClosed]

lemma filterEquiv.equivalence : Equivalence (filterEquiv M T) where
  refl := by intro x œÜ _; rfl;
  symm := by intro x y h œÜ hp; exact h _ hp |>.symm;
  trans := by
    intro x y z exy eyz;
    intro œÜ hp;
    exact Iff.trans (exy œÜ hp) (eyz œÜ hp)

def FilterEqvSetoid : Setoid (M.World) := ‚ü®filterEquiv M T, filterEquiv.equivalence M T‚ü©

abbrev FilterEqvQuotient := Quotient (FilterEqvSetoid M T)

lemma FilterEqvQuotient.finite (T_finite : T.Finite) : Finite (FilterEqvQuotient M T) := by
  have : Finite (ùí´ T) := Set.Finite.powerset T_finite
  let f : FilterEqvQuotient M T ‚Üí ùí´ T :=
    Œª (Qx : FilterEqvQuotient M T) => Quotient.lift (Œª x => ‚ü®{ œÜ ‚àà T | x ‚äß œÜ }, (by simp_all)‚ü©) (by
      intro x y hxy; simp;
      apply Set.eq_of_subset_of_subset;
      . rintro œÜ ‚ü®hp, hx‚ü©; exact ‚ü®hp, (hxy œÜ hp).mp hx‚ü©;
      . rintro œÜ ‚ü®hp, hy‚ü©; exact ‚ü®hp, (hxy œÜ hp).mpr hy‚ü©;
      ) Qx
  have hf : Function.Injective f := by
    intro Qx Qy h;
    obtain ‚ü®x, rfl‚ü© := Quotient.exists_rep Qx;
    obtain ‚ü®y, rfl‚ü© := Quotient.exists_rep Qy;
    simp [f] at h;
    apply Quotient.eq''.mpr;
    intro œÜ hp;
    constructor;
    . intro hpx;
      have := h.subset; simp at this;
      exact this œÜ hp hpx |>.2;
    . intro hpy;
      have := h.symm.subset; simp at this;
      exact this œÜ hp hpy |>.2;
  exact Finite.of_injective f hf

instance : Nonempty (FilterEqvQuotient M T) := ‚ü®‚ü¶Ôπ´‚üß‚ü©

class FilterOf (FM : Model Œ±) (M : Model Œ±) (T : Theory Œ±) [T.SubformulaClosed] where
  def_world : FM.World = FilterEqvQuotient M T := by rfl
  def_rel‚ÇÅ : ‚àÄ {x y : M.Frame}, x ‚â∫ y ‚Üí Frame.Rel' (cast def_world.symm ‚ü¶x‚üß) (cast def_world.symm ‚ü¶y‚üß) := by tauto;
  def_box : ‚àÄ {Qx Qy : FM.World}, Qx ‚â∫ Qy ‚Üí Quotient.lift‚ÇÇ (Œª x y => ‚àÄ œÜ, ‚ñ°œÜ ‚àà T ‚Üí (x ‚äß ‚ñ°œÜ ‚Üí y ‚äß œÜ)) (by
    intro x‚ÇÅ y‚ÇÅ x‚ÇÇ y‚ÇÇ hx hy;
    simp;
    constructor;
    . intro h œÜ hp sp‚ÇÇ; exact hy œÜ |>.mp $ h œÜ hp $ hx (‚ñ°œÜ) hp |>.mpr sp‚ÇÇ;
    . intro h œÜ hp sp‚ÇÅ; exact hy œÜ |>.mpr $ h œÜ hp $ hx (‚ñ°œÜ) hp |>.mp sp‚ÇÅ;
  ) (cast def_world Qx) (cast def_world Qy)
  def_valuation Qx a : (ha : (atom a) ‚àà T := by trivial) ‚Üí
    FM.Valuation Qx a ‚Üî Quotient.lift (Œª x => M.Valuation x a) (by
      simp; intro x y h;
      constructor;
      . intro hx; exact h a ha |>.mp hx;
      . intro hy; exact h a ha |>.mpr hy;
    ) (cast def_world Qx) := by tauto;

attribute [simp] FilterOf.def_world

namespace FilterationModel

end FilterationModel

abbrev StandardFilterationValuation (Qx : FilterEqvQuotient M T) (a : Œ±) := (ha : (atom a) ‚àà T) ‚Üí Quotient.lift (Œª x => M.Valuation x a) (by
  simp; intro x y h;
  constructor;
  . intro hx; exact h a ha |>.mp hx;
  . intro hy; exact h a ha |>.mpr hy;
) Qx


abbrev FinestFilterationFrame (M : Model Œ±) (T : Theory Œ±) [T.SubformulaClosed] : Kripke.Frame where
  World := FilterEqvQuotient M T
  Rel Qx Qy := ‚àÉ x y, Qx = ‚ü¶x‚üß ‚àß Qy = ‚ü¶y‚üß ‚àß x ‚â∫ y

abbrev FinestFilterationModel (M : Model Œ±) (T : Theory Œ±) [T.SubformulaClosed] : Kripke.Model Œ± where
  Frame := FinestFilterationFrame M T
  Valuation := StandardFilterationValuation M T

instance FinestFilterationModel.filterOf {M} {T : Theory Œ±} [T.SubformulaClosed] : FilterOf (FinestFilterationModel M T) M T where
  def_box := by
    intro Qx Qy rQxQy;
    obtain ‚ü®x, y, rfl, rfl, hxy‚ü© := rQxQy;
    simp_all [Satisfies];

abbrev CoarsestFilterationFrame (M : Model Œ±) (T : Theory Œ±) [T.SubformulaClosed] : Kripke.Frame where
  World := FilterEqvQuotient M T
  Rel Qx Qy :=
    Quotient.lift‚ÇÇ (Œª x y => ‚àÄ œÜ, ‚ñ°œÜ ‚àà T ‚Üí (x ‚äß ‚ñ°œÜ ‚Üí y ‚äß œÜ)) (by
      intro x‚ÇÅ y‚ÇÅ x‚ÇÇ y‚ÇÇ hx hy;
      simp;
      constructor;
      . intro h œÜ hp sp‚ÇÇ; exact hy œÜ |>.mp $ h œÜ hp $ hx (‚ñ°œÜ) hp |>.mpr sp‚ÇÇ;
      . intro h œÜ hp sp‚ÇÅ; exact hy œÜ |>.mpr $ h œÜ hp $ hx (‚ñ°œÜ) hp |>.mp sp‚ÇÅ;
    ) Qx Qy

abbrev CoarsestFilterationModel (M : Model Œ±) (T : Theory Œ±) [T.SubformulaClosed] : Kripke.Model Œ± where
  Frame := CoarsestFilterationFrame M T
  Valuation := StandardFilterationValuation M T

instance CoarsestFilterationModel.filterOf {M} {T : Theory Œ±} [T.SubformulaClosed] : FilterOf (CoarsestFilterationModel M T) M T where
  def_box := by tauto

section

variable {M} {T : Theory Œ±} [T.SubformulaClosed] {FM : Kripke.Model Œ±}

lemma reflexive_filteration_model (h_filter : FilterOf FM M T) (hRefl : Reflexive M.Frame) : Reflexive FM.Frame := by
  intro Qx;
  obtain ‚ü®x, hx‚ü© := Quotient.exists_rep (cast (h_filter.def_world) Qx);
  convert h_filter.def_rel‚ÇÅ $ hRefl x <;> simp_all;

lemma serial_filteration_model (h_filter : FilterOf FM M T) (hSerial : Serial M.Frame) : Serial FM.Frame := by
  intro Qx;
  obtain ‚ü®x, hx‚ü© := Quotient.exists_rep (cast (h_filter.def_world) Qx);
  obtain ‚ü®y, Rxy‚ü© := hSerial x;
  use (cast (h_filter.def_world.symm) ‚ü¶y‚üß);
  convert h_filter.def_rel‚ÇÅ $ Rxy;
  simp_all;

lemma symmetric_finest_filteration_model (hSymm : Symmetric M.Frame) : Symmetric (FinestFilterationModel M T).Frame := by
  intro Qx Qy RQxQy;
  obtain ‚ü®x, y, hx, hy, h‚ü© := RQxQy; subst_vars;
  use y, x; simp;
  exact hSymm h;

end

end


section

variable {M : Model Œ±} {T : Theory Œ±} [T.SubformulaClosed]
         (FM : Model Œ±) (filterOf : FilterOf FM M T)

theorem filteration {x : M.World} {œÜ : Formula Œ±} (hs : œÜ ‚àà T := by trivial) : x ‚äß œÜ ‚Üî (cast (filterOf.def_world.symm) ‚ü¶x‚üß) ‚äß œÜ := by
  induction œÜ using Formula.rec' generalizing x with
  | hatom a =>
    have := filterOf.def_valuation (cast filterOf.def_world.symm ‚ü¶x‚üß) a;
    simp_all [Satisfies];
  | hbox œÜ ihp =>
    constructor;
    . intro h Qy rQxQy;
      obtain ‚ü®y, ey‚ü© := Quotient.exists_rep (cast (filterOf.def_world) Qy);
      have this := filterOf.def_box rQxQy; simp [‚Üêey] at this;
      simpa [ey] using ihp (by trivial) |>.mp $ @this œÜ hs h;
    . intro h y rxy;
      have rQxQy := filterOf.def_rel‚ÇÅ rxy;
      exact ihp (by trivial) |>.mpr $ h _ rQxQy;
  | himp œÜ œà ihp ihq =>
    constructor;
    . rintro hxy hp;
      exact (ihq (by trivial) |>.mp $ hxy (ihp (by trivial) |>.mpr hp));
    . rintro hxy hp;
      exact (ihq (by trivial) |>.mpr $ hxy (ihp (by trivial) |>.mp hp));
  | _ => trivial

end

instance K_finite_complete [DecidableEq Œ±] : Complete (Hilbert.K Œ±) (AllFrameClass.{u}Íü≥#Œ±) := ‚ü®by
  intro œÜ hp;
  apply K_complete.complete;
  intro F _ V x;
  let M : Kripke.Model Œ± := ‚ü®F, V‚ü©;
  let FM := CoarsestFilterationModel M ‚ÜëœÜ.subformulae;

  apply filteration FM (CoarsestFilterationModel.filterOf) (by aesop) |>.mpr;
  apply hp (by
    suffices Finite (FilterEqvQuotient M œÜ.subformulae) by simp; use ‚ü®FM.Frame‚ü©;
    apply FilterEqvQuotient.finite;
    simp;
  ) FM.Valuation
‚ü©

instance  [DecidableEq Œ±] : FiniteFrameProperty (Hilbert.K Œ±) AllFrameClass where


instance KTB_finite_complete [DecidableEq Œ±] [Inhabited Œ±] : Complete (Hilbert.KTB Œ±) (ReflexiveSymmetricFrameClass.{u}Íü≥#Œ±) := ‚ü®by
  intro œÜ hp;
  apply KTB_complete.complete;
  intro F ‚ü®F_refl, F_symm‚ü© V x;
  let M : Kripke.Model Œ± := ‚ü®F, V‚ü©;
  let FM := FinestFilterationModel M œÜ.subformulae;
  apply filteration FM (FinestFilterationModel.filterOf) (by aesop) |>.mpr;
  apply hp (by
    suffices Finite (FilterEqvQuotient M œÜ.subformulae) by
      use ‚ü®FM.Frame‚ü©;
      refine ‚ü®‚ü®?_, ?_‚ü©, ?_‚ü©;
      . apply reflexive_filteration_model (FinestFilterationModel.filterOf);
        exact F_refl;
      . apply symmetric_finest_filteration_model;
        exact F_symm;
      . rfl;
    apply FilterEqvQuotient.finite;
    simp;
  ) FM.Valuation
‚ü©

instance [DecidableEq Œ±] [Inhabited Œ±] : FiniteFrameProperty (Hilbert.KTB Œ±) ReflexiveSymmetricFrameClass where

section

open Kripke.Frame (TransitiveClosure)

variable {M : Model Œ±} {T : Theory Œ±} [T.SubformulaClosed]

abbrev FinestFilterationTransitiveClosureModel (M : Model Œ±) (T : Theory Œ±) [T.SubformulaClosed] : Kripke.Model Œ± where
  Frame := (FinestFilterationFrame M T)^+
  Valuation := StandardFilterationValuation M T

namespace FinestFilterationTransitiveClosureModel

instance filterOf (M_trans : Transitive M.Frame) : FilterOf (FinestFilterationTransitiveClosureModel M T) M T where
  def_rel‚ÇÅ := by
    intro x y hxy;
    apply TransitiveClosure.single;
    tauto;
  def_box := by
    intro Qx Qy RQxQy;
    induction RQxQy using Relation.TransGen.head_induction_on with
    | base rxy =>
      obtain ‚ü®x, y, rfl, rfl, rxy‚ü© := rxy;
      intro œÜ _ hpx;
      exact hpx _ rxy;
    | ih ha hxy hyz =>
      obtain ‚ü®x, y, rfl, rfl, rxy‚ü© := ha;
      obtain ‚ü®w, z, _, rfl, _‚ü© := hxy;
      . intro œÜ hp hpx;
        apply hyz œÜ hp;
        intro v ryv;
        exact hpx _ (M_trans rxy ryv);
      . rename_i h;
        obtain ‚ü®w, z, rfl, rfl, _‚ü© := h;
        intro œÜ hp hpx;
        apply hyz œÜ hp;
        intro v ryv;
        exact hpx _ (M_trans rxy ryv);

lemma rel_transitive : Transitive (FinestFilterationTransitiveClosureModel M T).Frame := Frame.TransitiveClosure.rel_transitive

lemma rel_symmetric (M_symm : Symmetric M.Frame) : Symmetric (FinestFilterationTransitiveClosureModel M T).Frame :=
  Frame.TransitiveClosure.rel_symmetric $ symmetric_finest_filteration_model M_symm

lemma rel_reflexive (M_trans : Transitive M.Frame) (M_refl : Reflexive M.Frame) : Reflexive (FinestFilterationTransitiveClosureModel M T).Frame := by
  exact reflexive_filteration_model (filterOf M_trans) M_refl;

end FinestFilterationTransitiveClosureModel

end

open FinestFilterationTransitiveClosureModel in
instance S4_finite_complete [Inhabited Œ±] [DecidableEq Œ±] : Complete (Hilbert.S4 Œ±) (PreorderFrameClass.{u}Íü≥#Œ±) := ‚ü®by
  intro œÜ hp;
  apply S4_complete.complete;
  intro F ‚ü®F_refl, F_trans‚ü© V x;
  let M : Kripke.Model Œ± := ‚ü®F, V‚ü©;
  let FM := FinestFilterationTransitiveClosureModel M œÜ.subformulae;
  apply @filteration Œ± M œÜ.subformulae _ FM ?filterOf x œÜ (by simp) |>.mpr;
  apply hp (by
    suffices Finite (FilterEqvQuotient M œÜ.subformulae) by
      use ‚ü®FM.Frame‚ü©;
      refine ‚ü®‚ü®?_, rel_transitive‚ü©, rfl‚ü©;
      . exact rel_reflexive (by apply F_trans) F_refl;
    apply FilterEqvQuotient.finite;
    simp;
  ) FM.Valuation;
  . apply FinestFilterationTransitiveClosureModel.filterOf;
    exact F_trans;
‚ü©

instance [Inhabited Œ±] [DecidableEq Œ±] : FiniteFrameProperty (Hilbert.S4 Œ±) PreorderFrameClass where


open FinestFilterationTransitiveClosureModel in
instance KT4B_finite_complete [Inhabited Œ±] [DecidableEq Œ±] : Complete (Hilbert.KT4B Œ±) (EquivalenceFrameClass.{u}Íü≥#Œ±) := ‚ü®by
  intro œÜ hp;
  apply KT4B_complete.complete;
  intro F ‚ü®F_refl, F_trans, F_symm‚ü© V x;
  let M : Kripke.Model Œ± := ‚ü®F, V‚ü©;
  let FM := FinestFilterationTransitiveClosureModel M œÜ.subformulae;
  apply @filteration Œ± M œÜ.subformulae _ FM ?filterOf x œÜ (by simp) |>.mpr;
  apply hp (by
    suffices Finite (FilterEqvQuotient M œÜ.subformulae) by
      use ‚ü®FM.Frame‚ü©;
      refine ‚ü®‚ü®?refl, rel_transitive, ?symm‚ü©, rfl‚ü©;
      . exact rel_reflexive (by apply F_trans) F_refl;
      . exact rel_symmetric F_symm;
    apply FilterEqvQuotient.finite;
    simp;
  ) FM.Valuation;
  . apply FinestFilterationTransitiveClosureModel.filterOf
    exact F_trans;
‚ü©

instance [Inhabited Œ±] [DecidableEq Œ±] : FiniteFrameProperty (Hilbert.KT4B Œ±) EquivalenceFrameClass where
-- MEMO: `ùêíùüì =‚Çõ ùêäùêìùüíùêÅ`„Å†„Åã„ÇâÊ±∫ÂÆöÂèØËÉΩÊÄß„Å®„ÅÑ„ÅÜÈù¢„Åß„ÅØ`ùêíùüì`„ÇÇÊ±∫ÂÆöÂèØËÉΩÔºé

end Kripke

end LO.Modal
