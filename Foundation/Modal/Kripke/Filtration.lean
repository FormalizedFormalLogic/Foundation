import Mathlib.Data.Set.Finite.Powerset
import Foundation.Modal.Kripke.Closure
import Foundation.Modal.Kripke.Rooted
import Foundation.Modal.Kripke.AxiomPoint3
import Foundation.Modal.Kripke.AxiomWeakPoint3

universe u v

namespace LO.Modal

namespace Kripke

open FormulaSet.IsSubformulaClosed
open Formula (atom)
open Formula.Kripke

def filterEquiv (M : Kripke.Model) (T : FormulaSet ‚Ñï) [T.IsSubformulaClosed] (x y : M.World) := ‚àÄ œÜ, (_ : œÜ ‚àà T) ‚Üí x ‚äß œÜ ‚Üî y ‚äß œÜ

variable (M : Kripke.Model) (T : FormulaSet ‚Ñï) [T.IsSubformulaClosed]

lemma filterEquiv.equivalence : Equivalence (filterEquiv M T) where
  refl := by intro x œÜ _; rfl;
  symm := by intro x y h œÜ hp; exact h _ hp |>.symm;
  trans := by
    intro x y z exy eyz;
    intro œÜ hp;
    exact Iff.trans (exy œÜ hp) (eyz œÜ hp)

def FilterEqvSetoid : Setoid (M.World) := ‚ü®filterEquiv M T, filterEquiv.equivalence M T‚ü©

abbrev FilterEqvQuotient := Quotient (FilterEqvSetoid M T)


namespace FilterEqvQuotient

variable {M T} {x y : M.World}

lemma iff_of_eq (h : (‚ü¶x‚üß : FilterEqvQuotient M T) = ‚ü¶y‚üß) (hœÜ : œÜ ‚àà T) : x ‚äß œÜ ‚Üî y ‚äß œÜ := by
  apply @Quotient.eq_iff_equiv.mp h;
  assumption;

lemma finite (T_finite : T.Finite) : Finite (FilterEqvQuotient M T) := by
  have : Finite (ùí´ T) := Set.Finite.powerset T_finite
  let f : FilterEqvQuotient M T ‚Üí ùí´ T :=
    Œª (X : FilterEqvQuotient M T) => Quotient.lift (Œª x => ‚ü®{ œÜ ‚àà T | x ‚äß œÜ }, (by simp_all)‚ü©) (by
      intro x y hxy;
      suffices {œÜ | œÜ ‚àà T ‚àß Satisfies M x œÜ} = {œÜ | œÜ ‚àà T ‚àß Satisfies M y œÜ} by simpa;
      apply Set.eq_of_subset_of_subset;
      . rintro œÜ ‚ü®hp, hx‚ü©; exact ‚ü®hp, (hxy œÜ hp).mp hx‚ü©;
      . rintro œÜ ‚ü®hp, hy‚ü©; exact ‚ü®hp, (hxy œÜ hp).mpr hy‚ü©;
      ) X
  have hf : Function.Injective f := by
    intro X Y h;
    obtain ‚ü®x, rfl‚ü© := Quotient.exists_rep X;
    obtain ‚ü®y, rfl‚ü© := Quotient.exists_rep Y;
    simp [f] at h;
    apply Quotient.eq''.mpr;
    intro œÜ hp;
    constructor;
    . intro hpx;
      have : ‚àÄ a ‚àà T, x ‚äß a ‚Üí a ‚àà T ‚àß y ‚äß a := by simpa using h.subset;
      exact this œÜ hp hpx |>.2;
    . intro hpy;
      have := h.symm.subset;
      simp only [Set.setOf_subset_setOf, and_imp, f] at this;
      exact this œÜ hp hpy |>.2;
  exact Finite.of_injective f hf

instance : Nonempty (FilterEqvQuotient M T) := ‚ü®‚ü¶M.toFrame.world_nonempty.some‚üß‚ü©

end FilterEqvQuotient


class FilterOf (FM : Model) (M : outParam Kripke.Model) (T : outParam (FormulaSet ‚Ñï)) [T.IsSubformulaClosed] : Prop where
  def_world : FM.World = FilterEqvQuotient M T := by rfl
  def_rel_forth : ‚àÄ {x y : M}, x ‚â∫ y ‚Üí (cast def_world.symm ‚ü¶x‚üß) ‚â∫ (cast def_world.symm ‚ü¶y‚üß)
  def_rel_back : ‚àÄ {x y : M}, (cast def_world.symm ‚ü¶x‚üß) ‚â∫ (cast def_world.symm ‚ü¶y‚üß) ‚Üí ‚àÄ œÜ, ‚ñ°œÜ ‚àà T ‚Üí (x ‚äß ‚ñ°œÜ ‚Üí y ‚äß œÜ)
  def_valuation X a : (ha : (atom a) ‚àà T) ‚Üí
    FM X a ‚Üî Quotient.lift (Œª x => M x a) (by
      intro x y h;
      apply eq_iff_iff.mpr;
      constructor;
      . intro hx; exact h a ha |>.mp hx;
      . intro hy; exact h a ha |>.mpr hy;
    ) (cast def_world X) := by tauto

attribute [simp] FilterOf.def_world



theorem filtration
  {M : Model} (FM : Kripke.Model)
  {T : outParam (FormulaSet ‚Ñï)} [T.IsSubformulaClosed]
  (filterOf : FilterOf FM M T)
  {x : M.World} {œÜ : Formula ‚Ñï} (hs : œÜ ‚àà T)
  : x ‚äß œÜ ‚Üî (cast (filterOf.def_world.symm) ‚ü¶x‚üß) ‚äß œÜ := by
  induction œÜ generalizing x with
  | hatom a =>
    have := filterOf.def_valuation (cast filterOf.def_world.symm ‚ü¶x‚üß) a;
    simp_all [Satisfies];
  | hbox œÜ ihœÜ =>
    constructor;
    . rintro h Y RXY;
      obtain ‚ü®y, ey‚ü© := Quotient.exists_rep (cast (filterOf.def_world) Y);
      suffices Satisfies FM (cast filterOf.def_world.symm ‚ü¶y‚üß) œÜ by simp_all;
      apply ihœÜ (of_mem_box hs) |>.mp;
      apply @filterOf.def_rel_back x y (by simp_all) <;>
      . assumption;
    . intro h y rxy;
      apply ihœÜ (of_mem_box hs) |>.mpr;
      apply h;
      apply filterOf.def_rel_forth rxy;
  | himp œÜ œà ihp ihq =>
    constructor;
    . rintro hxy hp;
      exact ihq (of_mem_imp‚ÇÇ hs) |>.mp $ hxy (ihp (of_mem_imp‚ÇÅ hs) |>.mpr hp);
    . rintro hxy hp;
      exact ihq (of_mem_imp‚ÇÇ hs) |>.mpr $ hxy (ihp (of_mem_imp‚ÇÅ hs) |>.mp hp);
  | _ => trivial



namespace FilterOf

variable {FM : Model} {M : outParam _} {T : outParam (FormulaSet ‚Ñï)} [T.IsSubformulaClosed]

lemma isReflexive (filterOf : FilterOf FM M T) [M.IsReflexive] : FM.IsReflexive where
  refl := by
    intro X;
    obtain ‚ü®x, hx‚ü© := Quotient.exists_rep (cast (filterOf.def_world) X);
    convert filterOf.def_rel_forth $ IsRefl.refl x <;> simp_all;

lemma isSerial (filterOf : FilterOf FM M T) [M.IsSerial] : FM.IsSerial where
  serial := by
    intro X;
    obtain ‚ü®x, hx‚ü© := Quotient.exists_rep (cast (filterOf.def_world) X);
    obtain ‚ü®y, Rxy‚ü© : ‚àÉ y, x ‚â∫ y := IsSerial.serial x;
    use (cast (filterOf.def_world.symm) ‚ü¶y‚üß);
    simpa [hx] using filterOf.def_rel_forth Rxy;


end FilterOf


abbrev standardFiltrationValuation (X : FilterEqvQuotient M T) (a : ‚Ñï) := (ha : (atom a) ‚àà T) ‚Üí Quotient.lift (Œª x => M x a) (by
  intro x y h;
  apply eq_iff_iff.mpr;
  constructor;
  . intro hx; exact h a ha |>.mp hx;
  . intro hy; exact h a ha |>.mpr hy;
) X


variable
  {M FM : Model}
  {T : FormulaSet ‚Ñï} [T.IsSubformulaClosed]


abbrev coarsestFiltrationFrame (M : Model) (T : FormulaSet ‚Ñï) [T.IsSubformulaClosed] : Kripke.Frame where
  World := FilterEqvQuotient M T
  Rel := Quotient.lift‚ÇÇ (Œª x y => ‚àÄ œÜ, ‚ñ°œÜ ‚àà T ‚Üí (x ‚äß ‚ñ°œÜ ‚Üí y ‚äß œÜ)) (by
    intro x‚ÇÅ y‚ÇÅ x‚ÇÇ y‚ÇÇ hx hy;
    apply eq_iff_iff.mpr;
    constructor;
    . intro h œÜ hp sp‚ÇÇ; exact hy œÜ (of_mem_box hp) |>.mp $ h œÜ hp $ hx (‚ñ°œÜ) hp |>.mpr sp‚ÇÇ;
    . intro h œÜ hp sp‚ÇÅ; exact hy œÜ (of_mem_box hp) |>.mpr $ h œÜ hp $ hx (‚ñ°œÜ) hp |>.mp sp‚ÇÅ;
  )

abbrev coarsestFiltrationModel (M : Model) (T : FormulaSet ‚Ñï) [T.IsSubformulaClosed] : Kripke.Model where
  toFrame := coarsestFiltrationFrame M T
  Val := standardFiltrationValuation M T

namespace coarsestFiltrationModel

instance filterOf : FilterOf (coarsestFiltrationModel M T) M T where
  def_rel_forth := by tauto
  def_rel_back := by tauto
  def_valuation := by tauto

lemma isFinite (T_finite : T.Finite) : (coarsestFiltrationModel M T).IsFinite where world_finite := FilterEqvQuotient.finite T_finite
instance [M.IsReflexive] : (coarsestFiltrationModel M T).IsReflexive := coarsestFiltrationModel.filterOf.isReflexive
instance [M.IsSerial] : (coarsestFiltrationModel M T).IsSerial := coarsestFiltrationModel.filterOf.isSerial

end coarsestFiltrationModel



abbrev finestFiltrationFrame (M : Model) (T : outParam (FormulaSet ‚Ñï)) [T.IsSubformulaClosed] : Kripke.Frame where
  World := FilterEqvQuotient M T
  Rel X Y := ‚àÉ x y, X = ‚ü¶x‚üß ‚àß Y = ‚ü¶y‚üß ‚àß x ‚â∫ y

abbrev finestFiltrationModel (M : Model) (T : outParam (FormulaSet ‚Ñï)) [T.IsSubformulaClosed] : Kripke.Model where
  toFrame := finestFiltrationFrame M T
  Val := standardFiltrationValuation M T


namespace finestFiltrationModel

instance filterOf : FilterOf (finestFiltrationModel M T) M T where
  def_rel_forth := by tauto;
  def_rel_back := by
    simp only [cast_eq];
    rintro x y ‚ü®x', y', hx, hy, Rx'y'‚ü© œÜ hœÜ hœÜx;
    have : x' ‚äß ‚ñ°œÜ := FilterEqvQuotient.iff_of_eq hx hœÜ |>.mp hœÜx;
    have : y' ‚äß œÜ := this _ Rx'y';
    exact FilterEqvQuotient.iff_of_eq hy (of_mem_box hœÜ) |>.mpr this;

lemma isFinite (T_finite : T.Finite) : (finestFiltrationModel M T).IsFinite where
  world_finite := FilterEqvQuotient.finite T_finite
instance isReflexive [M.IsReflexive] : (finestFiltrationFrame M T).IsReflexive := finestFiltrationModel.filterOf.isReflexive
instance isSerial [M.IsSerial] : (finestFiltrationFrame M T).IsSerial := finestFiltrationModel.filterOf.isSerial
instance isSymmetric [M.IsSymmetric] : (finestFiltrationModel M T).IsSymmetric where
  symm := by
    rintro _ _ ‚ü®x, y, rfl, rfl, Rxy‚ü©;
    use y, x;
    refine ‚ü®by trivial, by trivial, IsSymm.symm _ _ Rxy‚ü©;

end finestFiltrationModel


abbrev finestFiltrationTransitiveClosureModel (M : Model) (T : outParam (FormulaSet ‚Ñï)) [T.IsSubformulaClosed] : Kripke.Model where
  toFrame := (finestFiltrationFrame M T)^+
  Val := standardFiltrationValuation M T

namespace finestFiltrationTransitiveClosureModel

open Relation in
instance filterOf [trans : M.IsTransitive] : FilterOf (finestFiltrationTransitiveClosureModel M T) M T where
  def_rel_forth := by
    intro x y hxy;
    apply Relation.TransGen.single;
    dsimp [finestFiltrationTransitiveClosureModel, finestFiltrationFrame];
    tauto;
  def_rel_back := by
    rintro x y RXY œÜ hœÜ hx;
    simp only [cast_eq] at RXY;
    replace ‚ü®n, RXY‚ü© := HRel.TransGen.exists_iterate.mp RXY;
    induction n using PNat.recOn generalizing x with
    | one =>
      simp only [PNat.val_ofNat, HRel.iterate.iff_succ, HRel.iterate.iff_zero, exists_eq_right] at RXY;
      obtain ‚ü®u, v, exu, eyv, Ruv‚ü© := RXY;
      have : u ‚äß ‚ñ°œÜ := FilterEqvQuotient.iff_of_eq exu hœÜ |>.mp hx;
      have : v ‚äß œÜ := this _ Ruv;
      exact FilterEqvQuotient.iff_of_eq eyv (of_mem_box hœÜ) |>.mpr this;
    | succ n ih =>
      obtain ‚ü®U, RXU, RUY‚ü© := RXY;
      obtain ‚ü®u, rfl‚ü© := Quotient.exists_rep U;
      apply @ih u ?_ RUY;
      obtain ‚ü®w, v, exw, euv, Rwv‚ü© := RXU;
      apply FilterEqvQuotient.iff_of_eq euv (by assumption) |>.mpr;
      intro z Rvz;
      apply FilterEqvQuotient.iff_of_eq exw (by assumption) |>.mp hx;
      exact M.trans Rwv Rvz;

lemma isFinite (T_finite : T.Finite) : (finestFiltrationTransitiveClosureModel M T).IsFinite where
  world_finite := FilterEqvQuotient.finite T_finite

instance isTransitive : (finestFiltrationTransitiveClosureModel M T).IsTransitive := by simp
instance isSerial [trans : M.IsTransitive] [serial : M.IsSerial] : (finestFiltrationTransitiveClosureModel M T).IsSerial := finestFiltrationTransitiveClosureModel.filterOf.isSerial
instance isSymmetric [symm : M.IsSymmetric] : (finestFiltrationTransitiveClosureModel M T).IsSymmetric := by simp
instance isReflexive [preorder : M.IsPreorder] : (finestFiltrationTransitiveClosureModel M T).IsReflexive := by simp
instance isPreorder [preorder : M.IsPreorder] : (finestFiltrationTransitiveClosureModel M T).IsPreorder where
instance isEquiv [equiv : M.IsEquivalence] : (finestFiltrationTransitiveClosureModel M T).IsEquivalence where

instance rooted_isPiecewiseStronglyConvergent [preorder : M.IsPreorder] [ps_convergent : M.IsPiecewiseStronglyConvergent] : (finestFiltrationTransitiveClosureModel (M‚Üær) T).IsPiecewiseStronglyConvergent where
  ps_convergent := by
    rintro X ‚ü®y, (rfl | Rry)‚ü© ‚ü®z, (rfl | Rrz)‚ü© RXY RXZ;
    . simp only [and_self];
      use ‚ü¶‚ü®z, by tauto‚ü©‚üß;
      apply Relation.TransGen.single;
      suffices z ‚â∫ z by tauto;
      apply M.refl;
    . use ‚ü¶‚ü®z, by tauto‚ü©‚üß;
      constructor;
      . apply Relation.TransGen.single;
        suffices y ‚â∫ z by tauto;
        exact HRel.TransGen.unwrap Rrz;
      . apply Relation.TransGen.single;
        suffices z ‚â∫ z by tauto;
        apply IsRefl.refl ;
    . use ‚ü¶‚ü®y, by tauto‚ü©‚üß;
      constructor;
      . apply Relation.TransGen.single;
        suffices y ‚â∫ y by tauto;
        apply IsRefl.refl;
      . apply Relation.TransGen.single;
        suffices z ‚â∫ y by tauto;
        exact HRel.TransGen.unwrap Rry;
    . replace Rry := HRel.TransGen.unwrap Rry;
      replace Rrz := HRel.TransGen.unwrap Rrz;
      obtain ‚ü®u, Ruy, Ruz‚ü© := M.ps_convergent Rry Rrz;
      use ‚ü¶‚ü®u, by
        right;
        apply Relation.TransGen.single;
        exact IsTrans.trans _ _ _ Rry Ruy;
      ‚ü©‚üß;
      constructor;
      . exact Relation.TransGen.single $ by tauto;
      . exact Relation.TransGen.single $ by tauto;

instance rooted_isPiecewiseStronglyConnected [preorder : M.IsPreorder] [ps_connected : M.IsPiecewiseStronglyConnected] : (finestFiltrationTransitiveClosureModel (M‚Üær) T).IsPiecewiseStronglyConnected where
  ps_connected := by
    rintro X ‚ü®y, (rfl | Rry)‚ü© ‚ü®z, (rfl | Rrz)‚ü© RXY RXZ;
    . simp only [or_self];
      apply Relation.TransGen.single;
      suffices z ‚â∫ z by tauto;
      apply IsRefl.refl;
    . left;
      apply Relation.TransGen.single;
      suffices y ‚â∫ z by tauto;
      exact Rrz.unwrap;
    . right;
      apply Relation.TransGen.single;
      suffices z ‚â∫ y by tauto;
      exact Rry.unwrap;
    . replace Rry := Rry.unwrap;
      replace Rrz := Rrz.unwrap;
      rcases M.ps_connected Rry Rrz with (Ryz | Rrw);
      . left;
        apply Relation.TransGen.single;
        tauto;
      . right;
        apply Relation.TransGen.single;
        tauto;



end finestFiltrationTransitiveClosureModel


end Kripke

end LO.Modal
