import Foundation.Modal.Tableau
import Foundation.Modal.Kripke.Basic

namespace LO.Modal

open Entailment
open Formula
open Kripke
open MaximalConsistentTableau

variable {S} [Entailment (Formula ‚Ñï) S]
variable {ùì¢ : S} [Entailment.Consistent ùì¢] [Entailment.K ùì¢]

namespace Kripke


section

abbrev canonicalFrame (ùì¢ : S) [Entailment.Consistent ùì¢] [Entailment.K ùì¢] : Kripke.Frame where
  World := MaximalConsistentTableau ùì¢
  Rel t‚ÇÅ t‚ÇÇ := t‚ÇÅ.1.1.prebox ‚äÜ t‚ÇÇ.1.1

abbrev canonicalModel (ùì¢ : S) [Entailment.Consistent ùì¢] [Entailment.K ùì¢] : Model where
  toFrame := canonicalFrame ùì¢
  Val t a := (atom a) ‚àà t.1.1

@[reducible]
instance : Semantics (Formula ‚Ñï) (canonicalModel ùì¢).World := Formula.Kripke.Satisfies.semantics (M := canonicalModel ùì¢)

end


section lemmata

variable {œÜ œà : Formula ‚Ñï}
variable {t : (canonicalModel ùì¢).World}

lemma truthlemma : ((œÜ ‚àà t.1.1) ‚Üî t ‚äß œÜ) ‚àß ((œÜ ‚àà t.1.2) ‚Üî ¬¨t ‚äß œÜ) := by
  induction œÜ generalizing t with
  | hatom =>
    simp_all only [Semantics.Realize, Satisfies, true_and];
    exact iff_not_mem‚ÇÅ_mem‚ÇÇ.symm;
  | hfalsum => simp [Semantics.Realize, Satisfies];
  | himp œÜ œà ihœÜ ihœà =>
    constructor;
    . constructor;
      . intro hœÜœà hœÜ;
        rcases iff_mem‚ÇÅ_imp.mp hœÜœà with (hœÜ | hœà);
        . have := ihœÜ.2.1 hœÜ; contradiction;
        . exact ihœà.1.1 hœà;
      . intro hœÜœà;
        rcases Satisfies.imp_def‚ÇÇ.mp hœÜœà with (hœÜ | hœà);
        . apply iff_mem‚ÇÅ_imp.mpr;
          left;
          exact ihœÜ.2.2 hœÜ;
        . apply iff_mem‚ÇÅ_imp.mpr;
          right;
          exact ihœà.1.2 hœà;
    . constructor;
      . intro hœÜœà;
        rcases iff_mem‚ÇÇ_imp.mp hœÜœà with ‚ü®hœÜ, hœà‚ü©;
        apply Satisfies.imp_def‚ÇÇ.not.mpr;
        push_neg;
        constructor;
        . exact ihœÜ.1.mp hœÜ;
        . exact ihœà.2.mp hœà;
      . intro hœÜœà;
        apply iff_mem‚ÇÇ_imp.mpr;
        replace hœÜœà := Satisfies.imp_def‚ÇÇ.not.mp hœÜœà;
        push_neg at hœÜœà;
        rcases hœÜœà with ‚ü®hœÜ, hœà‚ü©;
        constructor;
        . exact ihœÜ.1.mpr hœÜ;
        . exact ihœà.2.mpr hœà;
  | hbox œÜ ihœÜ =>
    constructor;
    . constructor;
      . intro h t' Rtt';
        apply ihœÜ.1.1;
        exact iff_mem‚ÇÅ_box.mp h Rtt';
      . intro h;
        apply iff_mem‚ÇÅ_box.mpr;
        intro t' Rtt';
        apply ihœÜ.1.2;
        exact h t' Rtt';
    . constructor;
      . intro h;
        apply Satisfies.box_def.not.mpr;
        push_neg;
        obtain ‚ü®t', Rtt', ht'‚ü© := iff_mem‚ÇÇ_box.mp h;
        use t';
        constructor;
        . exact Rtt';
        . exact ihœÜ.2.mp ht';
      . intro h;
        apply iff_mem‚ÇÇ_box.mpr;
        replace h := Satisfies.box_def.not.mp h;
        push_neg at h;
        obtain ‚ü®t', Rtt', ht'‚ü© := h;
        use t';
        constructor;
        . exact Rtt';
        . exact ihœÜ.2.mpr ht';

lemma truthlemma‚ÇÅ : (œÜ ‚àà t.1.1) ‚Üî t ‚äß œÜ := truthlemma.1

lemma truthlemma‚ÇÇ : (œÜ ‚àà t.1.2) ‚Üî ¬¨t ‚äß œÜ := truthlemma.2

lemma iff_valid_on_canonicalModel_deducible : (canonicalModel ùì¢) ‚äß œÜ ‚Üî ùì¢ ‚ä¢ œÜ := by
  constructor;
  . contrapose;
    intro h;
    have : Tableau.Consistent ùì¢ (‚àÖ, {œÜ}) := by
      apply Tableau.iff_consistent_empty_singleton‚ÇÇ (ùì¢ := ùì¢) (œÜ := œÜ) |>.mpr;
      exact h;
    obtain ‚ü®t, ht‚ü© := lindenbaum this;
    apply ValidOnModel.not_of_exists_world;
    use t;
    apply truthlemma‚ÇÇ.mp;
    apply ht.2;
    tauto_set;
  . intro h t;
    exact truthlemma‚ÇÅ.mp $ MaximalConsistentTableau.iff_provable_mem‚ÇÅ.mp h t;

end lemmata


class Canonical (ùì¢ : S) [Entailment.Consistent ùì¢] [Entailment.K ùì¢] (C : FrameClass) : Prop where
  canonical : (Kripke.canonicalFrame ùì¢) ‚àà C

instance [Canonical ùì¢ C] : Complete ùì¢ C := ‚ü®by
  contrapose;
  intro h;
  apply not_validOnFrameClass_of_exists_model;
  use (canonicalModel ùì¢);
  constructor;
  . exact Canonical.canonical;
  . exact iff_valid_on_canonicalModel_deducible.not.mpr h;
‚ü©


namespace canonicalModel

open Formula.Kripke.Satisfies

variable {x y : (canonicalModel ùì¢).World}

lemma def_rel_box_mem‚ÇÅ : x ‚â∫ y ‚Üî x.1.1.prebox ‚äÜ y.1.1 := by simp [Frame.Rel'];

lemma def_rel_box_satisfies : x ‚â∫ y ‚Üî ‚àÄ {œÜ}, x ‚äß ‚ñ°œÜ ‚Üí y ‚äß œÜ := by
  constructor;
  . intro h œÜ hœÜ;
    exact truthlemma‚ÇÅ.mp $  def_rel_box_mem‚ÇÅ.mp h (truthlemma‚ÇÅ.mpr hœÜ);
  . intro h;
    apply def_rel_box_mem‚ÇÅ.mpr;
    intro œÜ hœÜ;
    exact truthlemma‚ÇÅ.mpr $ h $ truthlemma‚ÇÅ.mp hœÜ

lemma def_multirel_multibox_satisfies : x ‚â∫^[n] y ‚Üî (‚àÄ {œÜ}, x ‚äß ‚ñ°^[n]œÜ ‚Üí y ‚äß œÜ) := by
  constructor;
  . intro h œÜ hœÜ;
    exact Satisfies.multibox_def.mp hœÜ h;
  . induction n generalizing x y with
    | zero =>
      suffices (‚àÄ {œÜ : Formula ‚Ñï}, x ‚äß œÜ ‚Üí y ‚äß œÜ) ‚Üí x = y by simpa;
      intro h;
      apply intro_equality;
      . intro œÜ hœÜ; exact truthlemma‚ÇÅ.mpr $ h $ truthlemma‚ÇÅ.mp hœÜ;
      . intro œÜ hœÜ; exact truthlemma‚ÇÇ.mpr $ h $ Satisfies.not_def.mpr $ truthlemma‚ÇÇ.mp hœÜ;
    | succ n ih =>
      intro h;
      obtain ‚ü®t, ht‚ü© := lindenbaum (ùì¢ := ùì¢) (t‚ÇÄ := ‚ü®{ œÜ | x ‚äß ‚ñ°œÜ }, Set.multibox n { œÜ | ¬¨y ‚äß œÜ }‚ü©) $ by
        intro Œì Œî hŒì hŒî;
        by_contra! hC;
        have : ùì¢ ‚ä¢ ‚ñ°Œì.conj ‚ûù ‚ñ°Œî.disj := imply_box_distribute'! hC;
        have : ‚ñ°Œî.disj ‚àà x.1.1 := mdp_mem‚ÇÅ_provable this $ by
          apply truthlemma‚ÇÅ.mpr;
          intro y Rxy;
          apply Satisfies.fconj_def.mpr;
          intro œÜ hœÜ;
          apply hŒì hœÜ y Rxy;
        have : x ‚äß ‚ñ°Œî.disj := truthlemma‚ÇÅ.mp this;
        have : x ‚äß ‚ñ°^[(n + 1)](Œî.premultibox n |>.disj) := by
          suffices x ‚äß ‚ñ°‚ñ°^[n](Finset.premultibox n Œî).disj by simpa;
          intro y Rxy;
          apply multibox_def.mpr;
          intro z Ryz;
          obtain ‚ü®œà, hœà‚ÇÅ, hœà‚ÇÇ‚ü© := Satisfies.fdisj_def.mp $ this y Rxy;
          obtain ‚ü®Œæ, _, rfl‚ü© := by simpa using hŒî hœà‚ÇÅ;
          apply Satisfies.fdisj_def.mpr;
          use Œæ;
          constructor;
          . simpa;
          . exact Satisfies.multibox_def.mp hœà‚ÇÇ Ryz;
        have : y ‚äß (Œî.premultibox n |>.disj) := h this;
        obtain ‚ü®œà, hœà‚ÇÅ, hœà‚ÇÇ‚ü© := fdisj_def.mp this;
        have : ¬¨y ‚äß œà := by simpa using @hŒî (‚ñ°^[n]œà) (by simpa using hœà‚ÇÅ);
        contradiction;
      use t;
      constructor;
      . intro œÜ hœÜ;
        apply ht.1;
        exact truthlemma‚ÇÅ.mp hœÜ;
      . apply ih;
        intro œÜ hœÜ;
        simpa using (Set.compl_subset_compl.mpr ht.2) $ iff_not_mem‚ÇÇ_mem‚ÇÅ.mpr $ truthlemma‚ÇÅ.mpr hœÜ

lemma def_multirel_multibox_mem‚ÇÅ : x ‚â∫^[n] y ‚Üî (x.1.1.premultibox n ‚äÜ y.1.1) := ‚ü®
  fun h _ hœÜ => truthlemma‚ÇÅ.mpr $ def_multirel_multibox_satisfies.mp h $ truthlemma‚ÇÅ.mp hœÜ,
  fun h => def_multirel_multibox_satisfies.mpr fun hœÜ => truthlemma‚ÇÅ.mp (h $ truthlemma‚ÇÅ.mpr hœÜ)
‚ü©

lemma def_multirel_multibox_mem‚ÇÇ : x ‚â∫^[n] y ‚Üî (y.1.2 ‚äÜ x.1.2.premultibox n) := by
  apply Iff.trans def_multirel_multibox_mem‚ÇÅ;
  constructor;
  . intro h œÜ;
    contrapose!;
    intro hœÜ;
    apply iff_not_mem‚ÇÇ_mem‚ÇÅ.mpr;
    apply h;
    apply iff_not_mem‚ÇÇ_mem‚ÇÅ.mp;
    assumption;
  . intro h œÜ;
    contrapose!;
    intro hœÜ;
    apply iff_not_mem‚ÇÅ_mem‚ÇÇ.mpr;
    apply h;
    apply iff_not_mem‚ÇÅ_mem‚ÇÇ.mp;
    assumption;

lemma def_rel_box_mem‚ÇÇ : x ‚â∫ y ‚Üî (y.1.2 ‚äÜ x.1.2.prebox) := by
  simpa using def_multirel_multibox_mem‚ÇÇ (n := 1);

lemma def_multirel_multidia_satisfies : x ‚â∫^[n] y ‚Üî (‚àÄ {œÜ}, y ‚äß œÜ ‚Üí x ‚äß ‚óá^[n]œÜ) := by
  constructor;
  . intro h œÜ hœÜ;
    apply Formula.Kripke.Satisfies.multidia_def.mpr;
    use y;
  . intro h;
    apply def_multirel_multibox_satisfies.mpr;
    intro œÜ;
    contrapose;
    intro hœÜ;
    apply Satisfies.not_def.mp;
    have : x ‚äß ‚àº‚ñ°^[n](‚àº‚àºœÜ) := multidia_dual.mp $ h (œÜ := ‚àºœÜ) (Satisfies.not_def.mp hœÜ);
    revert this;
    apply intro_neg_semiequiv;
    apply intro_multibox_semiequiv;
    intro _ _;
    apply negneg_def.mpr;

lemma def_multirel_multidia_mem‚ÇÅ : x ‚â∫^[n] y ‚Üî (y.1.1 ‚äÜ x.1.1.premultidia n) := ‚ü®
  fun h _ hœÜ => truthlemma‚ÇÅ.mpr $ def_multirel_multidia_satisfies.mp h (truthlemma‚ÇÅ.mp hœÜ),
  fun h => def_multirel_multidia_satisfies.mpr fun hœÜ => truthlemma‚ÇÅ.mp $ h (truthlemma‚ÇÅ.mpr hœÜ)
‚ü©

lemma def_rel_dia_mem‚ÇÅ : x ‚â∫ y ‚Üî (y.1.1 ‚äÜ x.1.1.predia) := by
  simpa using def_multirel_multidia_mem‚ÇÅ (n := 1);

lemma def_multirel_multidia_mem‚ÇÇ : x ‚â∫^[n] y ‚Üî (x.1.2.premultidia n ‚äÜ y.1.2) := by
  constructor;
  . intro Rxy œÜ;
    contrapose;
    intro hœÜ;
    apply iff_not_mem‚ÇÇ_mem‚ÇÅ.mpr;
    apply def_multirel_multidia_mem‚ÇÅ.mp Rxy;
    exact iff_not_mem‚ÇÇ_mem‚ÇÅ.mp hœÜ;
  . intro H;
    apply def_multirel_multidia_mem‚ÇÅ.mpr;
    intro œÜ;
    contrapose;
    intro hœÜ;
    exact iff_not_mem‚ÇÅ_mem‚ÇÇ.mpr $ @H œÜ (iff_not_mem‚ÇÅ_mem‚ÇÇ.mp hœÜ);

lemma def_rel_dia_mem‚ÇÇ : x ‚â∫ y ‚Üî (x.1.2.predia ‚äÜ y.1.2) := by
  simpa using def_multirel_multidia_mem‚ÇÇ (n := 1);

end canonicalModel

end Kripke

end LO.Modal
