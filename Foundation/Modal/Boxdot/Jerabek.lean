/-
  Je≈ô√°bek's proof of boxdot conjecture.

  References:
  - E. Je≈ô√°bek - "Cluster Expansion and the Boxdot Conjecture": https://arxiv.org/abs/1308.0994
-/
import Foundation.Modal.Boxdot.Basic
import Foundation.Modal.Kripke.Logic.KTB
import Foundation.Modal.Kripke.Logic.S5
import Foundation.Modal.Kripke.Logic.S4McK
import Foundation.Modal.Logic.Global

namespace LO.Modal

namespace Kripke

variable {F : Frame}

def Frame.twice (F : Frame) : Frame where
  World := F.World √ó Bool
  Rel := Œª (x, _) (y, _) => x ‚â∫ y

local postfix:100 "√ó2" => Frame.twice

instance [F.IsReflexive] : F√ó2.IsReflexive where
  refl := by rintro ‚ü®x, i‚ü©; simp [Frame.twice];

instance [F.IsTransitive] : F√ó2.IsTransitive where
  trans := by
    rintro ‚ü®x, i‚ü© ‚ü®y, j‚ü© ‚ü®z, k‚ü© Rxy Ryj;
    simp only [Frame.twice] at Rxy Ryj;
    exact F.trans Rxy Ryj;

instance [F.IsSymmetric] : F√ó2.IsSymmetric where
  symm := by
    rintro ‚ü®x, i‚ü© ‚ü®y, j‚ü© Rxy;
    simp only [Frame.twice] at Rxy;
    exact F.symm Rxy;

instance [F.IsPiecewiseStronglyConvergent] : F√ó2.IsPiecewiseStronglyConvergent := by
  constructor;
  rintro ‚ü®x, i‚ü© ‚ü®y, j‚ü© ‚ü®z, k‚ü© Rxy Rxz;
  simp only [Frame.twice] at Rxy Rxz;
  obtain ‚ü®u, Ryu, Rzu‚ü© := F.ps_convergent Rxy Rxz;
  use (u, i);
  constructor <;> simpa [Frame.twice];

instance [F.IsPiecewiseStronglyConnected] : F√ó2.IsPiecewiseStronglyConnected := by
  constructor;
  rintro ‚ü®x, i‚ü© ‚ü®y, j‚ü© ‚ü®z, k‚ü© Rxy Rxz;
  simp only [Frame.twice] at Rxy Rxz;
  rcases F.ps_connected Rxy Rxz with (Ryz | Rzy);
  . left; simpa;
  . right; simpa;


def Frame.twice.PMorphism (F : Frame) : F√ó2 ‚Üí‚Çö F where
  toFun := Prod.fst
  forth := by
    rintro ‚ü®x, _‚ü© ‚ü®y, _‚ü© h;
    simpa using h;
  back := by
    intro ‚ü®x, i‚ü© y Rxy;
    use ‚ü®y, true‚ü©;
    constructor;
    . simp;
    . tauto;

class FrameClass.JerabekAssumption (C : FrameClass) where
  twice : ‚àÄ F ‚àà C, F√ó2 ‚àà C

instance : FrameClass.KT.JerabekAssumption := by
  constructor;
  intro F hF;
  simp_all only [Set.mem_setOf_eq];
  infer_instance;

instance : FrameClass.KTB.JerabekAssumption := by
  constructor;
  intro F hF;
  simp_all only [Set.mem_setOf_eq];
  constructor;

instance : FrameClass.S4.JerabekAssumption := by
  constructor;
  intro F hF;
  simp_all only [Set.mem_setOf_eq];
  constructor;

instance : FrameClass.S4Point2.JerabekAssumption := by
  constructor;
  intro F hF;
  simp_all only [Set.mem_setOf_eq];
  constructor;

instance : FrameClass.S4Point3.JerabekAssumption := by
  constructor;
  intro F hF;
  simp_all only [Set.mem_setOf_eq];
  constructor;

instance : FrameClass.S5.JerabekAssumption := by
  constructor;
  intro F hF;
  simp_all only [Set.mem_setOf_eq];
  constructor;

end Kripke


namespace Formula

variable {Œ± : Type*} {œÜ : Formula _}

def flag (œÜ : Formula Œ±) : Bool ‚Üí Formula Œ±
  | true  => œÜ
  | false => ‚àºœÜ

@[simp]
lemma atom_flag_boxdotTranslated : (flag (.atom a) b)·µá = (flag (.atom a) b) := by
  match b with | true | false => rfl;

end Formula


namespace Logic

variable {Œ±} {L‚ÇÄ L : Logic Œ±}

def boxdot_preimage (L : Logic Œ±) := { œÜ ‚àà L | L ‚ä¢! œÜ·µá }
local postfix:100 "·µá‚Åª¬π" => boxdot_preimage

def BoxdotProperty (L‚ÇÄ : Logic Œ±) := ‚àÄ {L : Logic _}, L.IsNormal ‚Üí L·µá‚Åª¬π = L‚ÇÄ ‚Üí L ‚äÜ L‚ÇÄ

def StrongBoxdotProperty (L‚ÇÄ : Logic Œ±) := ‚àÄ {L : Logic _}, L.IsNormal ‚Üí L·µá‚Åª¬π ‚äÜ L‚ÇÄ ‚Üí L ‚äÜ L‚ÇÄ

lemma BDP_of_SBDP : StrongBoxdotProperty L‚ÇÄ ‚Üí BoxdotProperty L‚ÇÄ := by
  intro hSBDP;
  intro L _ hL;
  apply hSBDP;
  . assumption;
  . rw [hL];

end Logic

section



open LO.Entailment LO.Modal.Entailment
open GlobalConsequence
open Formula (atom flag boxdotTranslate)
open Formula.Kripke
open Kripke


def Formula.Kripke.Satisfies.neither_flag {M : Model} {x : M} {œÜ : Formula ‚Ñï} : ¬¨(x ‚äß œÜ.flag b ‚àß x ‚äß œÜ.flag !b) := by
  match b with
  | true  => simp [Formula.flag];
  | false => simp [Formula.flag];

section

variable {L : Logic ‚Ñï} [L.IsNormal] {n : ‚Ñï} {Œì Œî : Finset (Formula ‚Ñï)} {œÜ : Formula ‚Ñï} {p} {b}

private lemma jerabek_SBDP.lemma‚ÇÅ : Hilbert.K ‚ä¢! (flag (.atom p) b) ‚ãè ‚ñ°œÜ·µá ‚ûù ‚ä°((flag (.atom p) !b) ‚ûù œÜ·µá) := by
  apply Complete.complete (ùìú := Kripke.FrameClass.K);
  intro F hF V x hx;
  replace hF := Set.mem_setOf_eq.mp hF;
  apply Satisfies.and_def.mpr;
  constructor;
  . intro hx‚ÇÅ;
    by_contra hC;
    apply Satisfies.neither_flag;
    constructor;
    . exact Satisfies.and_def.mp hx |>.1;
    . assumption;
  . replace hx := Satisfies.and_def.mp hx |>.2;
    intro y Rxy h;
    apply hx;
    assumption;

private lemma jerabek_SBDP.lemma‚ÇÇ : L ‚ä¢! (flag (.atom p) b) ‚ãè ‚ñ°œÜ·µá ‚ûù ‚ä°((flag (.atom p) !b) ‚ûù œÜ·µá) := by
  apply normal_provable_of_K_provable;
  simpa using lemma‚ÇÅ;

private lemma jerabek_SBDP.lemma‚ÇÉ : L ‚ä¢! (‚ñ°^[n]Œì.conj)·µá ‚ûù ‚ñ°^‚â§[n](Œì.image (¬∑·µá)).conj := by
  apply normal_provable_of_K_provable;
  apply Complete.complete (ùìú := Kripke.FrameClass.K);
  intro F hF V x h;
  apply Satisfies.fconj_def.mpr;
  simp only [Finset.mem_image, Finset.mem_range, forall_exists_index, and_imp, forall_apply_eq_imp_iff‚ÇÇ];
  intro k hk;
  apply Satisfies.multibox_def.mpr;
  intro y Rxy;
  apply Satisfies.fconj_def.mpr;
  simp only [Finset.mem_image, forall_exists_index, and_imp, forall_apply_eq_imp_iff‚ÇÇ];
  intro Œæ hŒæ;
  replace h : Satisfies _ x (‚ñ°^[k]Œì.conj·µá) := Satisfies.fconj_def.mp (Satisfies.iff_boxdotTranslateMultibox_boxdotTranslateBoxlt.mp h) _ ?_;
  . apply Satisfies.fconj_def.mp (Satisfies.boxdotTranslate_fconj‚ÇÇ.mp $ Satisfies.multibox_def.mp h Rxy) _;
    simp only [Finset.mem_image];
    use Œæ;
  . simp only [Finset.mem_image, Finset.mem_range];
    use k;

end

/--
  Every Logic `L‚ÇÄ` which is `Modal.KT ‚™Ø L‚ÇÄ` and sound and complete to frame class `C` satisfies Je≈ô√°bek's assumption, has strong boxdot property.
-/
theorem jerabek_SBDP
  (L‚ÇÄ : Logic ‚Ñï) [hKT : Modal.KT ‚™Ø L‚ÇÄ]
  (C : Kripke.FrameClass) [C.JerabekAssumption]
  [sound : Sound L‚ÇÄ C] [complete : Complete L‚ÇÄ C]
  : L‚ÇÄ.StrongBoxdotProperty := by
  intro L _;
  contrapose!;
  intro hL;
  obtain ‚ü®œÜ, hœÜL, hœÜL‚ÇÄ‚ü© := Set.not_subset.mp hL;
  apply Set.not_subset.mpr;

  let q := Formula.freshAtom œÜ;
  let X‚ÇÄ := œÜ.subformulas.prebox.image (Œª œà => ‚ñ°((.atom q) ‚ûù œà) ‚ûù œà);
  let X‚ÇÅ := œÜ.subformulas.prebox.image (Œª œà => ‚ñ°(‚àº(.atom q) ‚ûù œà) ‚ûù œà);
  let X := X‚ÇÄ ‚à™ X‚ÇÅ;
  let XB := X.image (¬∑·µá);

  have Claim1 : ‚àÄ œà ‚àà œÜ.subformulas.prebox, (L, XB.toSet) ‚ä¢! ‚ñ°œà·µá ‚ûù œà·µá := by
    intro œà hœà;
    have H‚ÇÅ : ‚àÄ b, (L, XB.toSet) ‚ä¢! (flag (.atom q) b) ‚ãè ‚ñ°œà·µá ‚ûù ‚ä°((flag (.atom q) !b) ‚ûù œà·µá) := by
      intro b;
      apply GlobalConsequence.thm!;
      apply jerabek_SBDP.lemma‚ÇÇ;
    have H‚ÇÇ : ‚àÄ b, (L, XB.toSet) ‚ä¢! ‚ä°((flag (.atom q) b) ‚ûù œà·µá) ‚ûù œà·µá := by
      intro b;
      suffices (L, XB.toSet) ‚ä¢! (‚ñ°((flag (.atom q) b) ‚ûù œà) ‚ûù œà)·µá by
        simpa only [Formula.boxdotTranslate, Formula.atom_flag_boxdotTranslated] using this;
      apply GlobalConsequence.ctx!;
      simp only [Finset.coe_image, Set.mem_image, Finset.mem_coe, XB];
      use (‚ñ°((flag (atom q) b) ‚ûù œà) ‚ûù œà);
      constructor;
      . match b with | true | false => simpa [X, X‚ÇÄ, X‚ÇÅ, flag] using hœà;
      . rfl;
    have H‚ÇÉ : ‚àÄ b, (L, XB.toSet) ‚ä¢! (flag (.atom q) b) ‚ûù (‚ñ°œà·µá ‚ûù œà·µá) := by
      intro b;
      cl_prover [(H‚ÇÅ b), (H‚ÇÇ !b)];
    have H‚ÇÑ : (L, XB.toSet) ‚ä¢!  atom q ‚ûù ‚ñ°œà·µá ‚ûù œà·µá := H‚ÇÉ true;
    have H‚ÇÖ : (L, XB.toSet) ‚ä¢! ‚àºatom q ‚ûù ‚ñ°œà·µá ‚ûù œà·µá := H‚ÇÉ false;
    cl_prover [H‚ÇÑ, H‚ÇÖ];
  have Claim2 : ‚àÄ œà ‚àà œÜ.subformulas, (L, XB.toSet) ‚ä¢! œà ‚≠§ œà·µá := by
    intro œà hœà;
    induction œà with
    | hfalsum => simp [Formula.boxdotTranslate];
    | hatom a => simp [Formula.boxdotTranslate];
    | himp œà‚ÇÅ œà‚ÇÇ ihœà‚ÇÅ ihœà‚ÇÇ =>
      replace ihœà‚ÇÅ := ihœà‚ÇÅ (by grind);
      replace ihœà‚ÇÇ := ihœà‚ÇÇ (by grind);
      dsimp [Formula.boxdotTranslate];
      cl_prover [ihœà‚ÇÅ, ihœà‚ÇÇ];
    | hbox œà ihœà =>
      replace ihœà : (L, XB.toSet) ‚ä¢! œà ‚≠§ œà·µá := ihœà (by grind);
      have H‚ÇÅ : (L, XB.toSet) ‚ä¢! ‚ñ°œà ‚≠§ ‚ñ°œà·µá := box_congruence! ihœà;
      have H‚ÇÇ : (L, XB.toSet) ‚ä¢! ‚ñ°œà·µá ‚≠§ ‚ä°œà·µá := by
        apply Entailment.E!_intro;
        . have : (L, XB.toSet) ‚ä¢! ‚ñ°œà·µá ‚ûù œà·µá := Claim1 œà (by simpa);
          cl_prover [this];
        . cl_prover;
      cl_prover [H‚ÇÅ, H‚ÇÇ];
  have : (L, XB.toSet) ‚ä¢! œÜ·µá := by
    have h‚ÇÅ : (L, XB.toSet) ‚ä¢! œÜ ‚ûù œÜ·µá := C_of_E_mp! $ Claim2 œÜ (by grind);
    have h‚ÇÇ : (L, XB.toSet) ‚ä¢! œÜ := by
      apply GlobalConsequence.thm!;
      simpa using hœÜL;
    exact h‚ÇÅ ‚®Ä h‚ÇÇ;
  obtain ‚ü®Œì, n, hŒì, hœÜ‚ü© := GlobalConsequence.iff_finite_boxlt_provable.mp this;
  replace hœÜ : L ‚ä¢! (‚ñ°^‚â§[n]XB.conj) ‚ûù œÜ·µá := C!_trans (boxlt_fconj_regularity_of_subset hŒì) hœÜ;
  let œá := (‚ñ°^[n](X.conj) ‚ûù œÜ);
  have hœá : L ‚ä¢! œá·µá := by apply C!_trans jerabek_SBDP.lemma‚ÇÉ hœÜ;
  use œá;
  constructor;
  . constructor;
    . suffices L ‚ä¢! œá by simpa;
      apply dhyp!;
      simpa using hœÜL;
    . assumption;
  . suffices L‚ÇÄ ‚ä¨ (‚ñ°^[n]X.conj) ‚ûù œÜ by simpa;
    apply sound.not_provable_of_countermodel;
    apply not_validOnFrameClass_of_exists_model_world;

    have : ¬¨C ‚äß œÜ := complete.exists_countermodel_of_not_provable (by simpa using hœÜL‚ÇÄ);
    obtain ‚ü®M, x, hMC, hF‚ü© := Kripke.exists_model_world_of_not_validOnFrameClass this;
    let M‚ÇÇ : Kripke.Model := {
      toFrame := M.toFrame.twice
      Val := Œª ‚ü®w, i‚ü© a =>
        if   a = q then i = true
        else M.Val w a
    }
    have : M.IsReflexive := by
      apply reflexive_of_validate_AxiomT;
      apply sound.sound;
      . apply hKT.pbl;
        simp;
      . assumption;

    -- Memo: BdRV Prop 2.14
    have H2 : ‚àÄ œà ‚àà œÜ.subformulas, ‚àÄ w : M.World, ‚àÄ b : Bool, Satisfies M‚ÇÇ (w, b) œà ‚Üî Satisfies M w œà := by
      intro œà hœà w b;
      induction œà generalizing w b with
      | hfalsum => simp [Satisfies];
      | hatom a =>
        have : a ‚â† q := Formula.ne_freshAtom_of_mem_subformulas hœà |>.symm;
        simp [Satisfies, M‚ÇÇ, this];
      | himp œà‚ÇÅ œà‚ÇÇ ihœà‚ÇÅ ihœà‚ÇÇ =>
        replace ihœà‚ÇÅ := ihœà‚ÇÅ (by grind);
        replace ihœà‚ÇÇ := ihœà‚ÇÇ (by grind);
        simp [Satisfies, ihœà‚ÇÅ, ihœà‚ÇÇ]
      | hbox œà ihœà =>
        replace ihœà := ihœà (by grind);
        constructor;
        . intro h v Rwv;
          apply ihœà v _ |>.mp;
          apply h (v, b);
          simpa [Frame.Rel', M‚ÇÇ, Frame.twice]
        . intro h v Rwv;
          apply ihœà v.1 v.2 |>.mpr;
          apply h;
          simpa [Frame.Rel', M‚ÇÇ, Frame.twice] using Rwv;

    use M‚ÇÇ, (x, true);
    constructor;
    . exact Kripke.FrameClass.JerabekAssumption.twice (C := C) _ hMC;
    . apply Satisfies.not_imp_def.mpr;
      constructor;
      . have : M‚ÇÇ ‚äß X.conj := by
          intro x;
          apply Satisfies.fconj_def.mpr;
          rintro œà hœà;
          rcases (by simpa [X, X‚ÇÄ, X‚ÇÅ] using hœà) with (‚ü®œà, _, rfl‚ü© | ‚ü®œà, _, rfl‚ü©);
          . intro hœà‚ÇÅ;
            by_cases hœà : Satisfies M x.1 œà;
            . exact H2 _ (by grind) _ _ |>.mpr hœà;
            . exfalso;
              apply hœà;
              apply H2 _ (by grind) _ true |>.mp;
              apply hœà‚ÇÅ (x.1, true);
              . simp [Frame.Rel', M‚ÇÇ, Frame.twice];
              . simp [Satisfies, M‚ÇÇ];
          . intro hœà‚ÇÅ;
            by_cases hœà : Satisfies M x.1 œà;
            . exact H2 _ (by grind) _ _ |>.mpr hœà;
            . exfalso;
              apply hœà;
              apply H2 _ (by grind) _ false |>.mp;
              apply hœà‚ÇÅ (x.1, false);
              . simp [Frame.Rel', M‚ÇÇ, Frame.twice];
              . simp [Satisfies, M‚ÇÇ];
        apply ValidOnModel.multinec n this;
      . exact H2 œÜ (by grind) x _ |>.not.mpr hF;

/--
  Every Logic `L‚ÇÄ` which is `Modal.KT ‚™Ø L‚ÇÄ` and sound and complete to frame class `C` satisfies Je≈ô√°bek's assumption, has boxdot property.
-/
theorem jerabek_BDP
  (L‚ÇÄ : Logic ‚Ñï) [Modal.KT ‚™Ø L‚ÇÄ]
  (C : Kripke.FrameClass) [C.JerabekAssumption]
  [Sound L‚ÇÄ C] [Complete L‚ÇÄ C]
  : L‚ÇÄ.BoxdotProperty := Logic.BDP_of_SBDP $ jerabek_SBDP L‚ÇÄ C

/-- `Modal.KT` has boxdot property. This is original boxdot conjecture. -/
theorem KT.BDP : Modal.KT.BoxdotProperty := jerabek_BDP Modal.KT Kripke.FrameClass.KT
alias boxdot_conjecture := KT.BDP

/-- `Modal.KTB` has boxdot property. -/
theorem KTB.BDP : Modal.KTB.BoxdotProperty := jerabek_BDP Modal.KTB Kripke.FrameClass.KTB

/-- `Modal.S4` has boxdot property. -/
theorem S4.BDP : Modal.S4.BoxdotProperty := jerabek_BDP Modal.S4 Kripke.FrameClass.S4

/-- `Modal.S4Point2` has boxdot property. -/
theorem S4Point2.BDP : Modal.S4Point2.BoxdotProperty := jerabek_BDP Modal.S4Point2 Kripke.FrameClass.S4Point2

/-- `Modal.S4Point3` has boxdot property. -/
theorem S4Point3.BDP : Modal.S4Point3.BoxdotProperty := jerabek_BDP Modal.S4Point3 Kripke.FrameClass.S4Point3

/-- `Modal.S5` has boxdot property. -/
theorem S5.BDP : Modal.S5.BoxdotProperty := jerabek_BDP Modal.S5 Kripke.FrameClass.S5

end

end LO.Modal
