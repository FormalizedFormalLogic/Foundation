import Foundation.Modal.Boxdot.Basic
import Foundation.Modal.Kripke.Closure
import Foundation.Modal.Kripke.Grz.Completeness
import Foundation.Modal.Kripke.GL.Completeness


namespace LO.System

open FiniteContext

variable {S F : Type*} [BasicModalLogicalConnective F] [DecidableEq F] [System F S]
variable {ùì¢ : S}
variable [System.GL ùì¢]

noncomputable def lem‚ÇÅ_boxdot_Grz_of_L : ùì¢ ‚ä¢ (‚ä°(‚ä°(œÜ ‚ûù ‚ä°œÜ) ‚ûù œÜ)) ‚ûù (‚ñ°(œÜ ‚ûù ‚ä°œÜ) ‚ûù œÜ) := by
  have : ùì¢ ‚ä¢ (‚ñ°(œÜ ‚ûù ‚ä°œÜ) ‚ãè ‚àºœÜ) ‚ûù ‚ä°(œÜ ‚ûù ‚ä°œÜ) := by
    apply deduct';
    apply and‚ÇÉ';
    . exact (of efq_imply_not‚ÇÅ) ‚®Ä and‚ÇÇ;
    . exact (of (impId _)) ‚®Ä and‚ÇÅ;
  have : ùì¢ ‚ä¢ ‚àº‚ä°(œÜ ‚ûù ‚ä°œÜ) ‚ûù (‚àº‚ñ°(œÜ ‚ûù ‚ä°œÜ) ‚ãé œÜ) := impTrans'' (contra‚ÇÄ' this) $ impTrans'' demorgan‚ÇÑ (orReplaceRight dne);
  have : ùì¢ ‚ä¢ (‚àº‚ä°(œÜ ‚ûù ‚ä°œÜ) ‚ãé œÜ) ‚ûù (‚àº‚ñ°(œÜ ‚ûù ‚ä°œÜ) ‚ãé œÜ) := or‚ÇÉ'' this or‚ÇÇ;
  have : ùì¢ ‚ä¢ ‚àº‚ä°(œÜ ‚ûù ‚ä°œÜ) ‚ãé œÜ ‚ûù ‚ñ°(œÜ ‚ûù ‚ä°œÜ) ‚ûù œÜ := impTrans'' this implyOfNotOr;
  have : ùì¢ ‚ä¢ (‚ä°(œÜ ‚ûù ‚ä°œÜ) ‚ûù œÜ) ‚ûù (‚ñ°(œÜ ‚ûù ‚ä°œÜ) ‚ûù œÜ) := impTrans'' NotOrOfImply this;
  exact impTrans'' boxdotAxiomT this;

noncomputable def boxdot_Grz_of_L : ùì¢ ‚ä¢ ‚ä°(‚ä°(œÜ ‚ûù ‚ä°œÜ) ‚ûù œÜ) ‚ûù œÜ := by
  have : ùì¢ ‚ä¢ ‚ñ°(‚ä°(œÜ ‚ûù ‚ä°œÜ) ‚ûù œÜ) ‚ûù ‚ñ°‚ä°(œÜ ‚ûù ‚ä°œÜ) ‚ûù ‚ñ°œÜ := axiomK;
  have : ùì¢ ‚ä¢ ‚ñ°(‚ä°(œÜ ‚ûù ‚ä°œÜ) ‚ûù œÜ) ‚ûù ‚ñ°(œÜ ‚ûù ‚ä°œÜ) ‚ûù ‚ñ°œÜ := impTrans'' this $ implyLeftReplace $ imply_Box_BoxBoxdot;
  have : ùì¢ ‚ä¢ ‚ñ°(‚ä°(œÜ ‚ûù ‚ä°œÜ) ‚ûù œÜ) ‚ûù ‚ñ°(œÜ ‚ûù ‚ä°œÜ) ‚ûù (œÜ ‚ûù ‚ä°œÜ) := by
    apply deduct'; apply deduct; apply deduct;
    exact and‚ÇÉ' FiniteContext.byAxm $ (of this) ‚®Ä (FiniteContext.byAxm) ‚®Ä (FiniteContext.byAxm);
  have : ùì¢ ‚ä¢ ‚ñ°‚ñ°(‚ä°(œÜ ‚ûù ‚ä°œÜ) ‚ûù œÜ) ‚ûù ‚ñ°(‚ñ°(œÜ ‚ûù ‚ä°œÜ) ‚ûù (œÜ ‚ûù ‚ä°œÜ)) := implyBoxDistribute' this;
  have : ùì¢ ‚ä¢ ‚ñ°(‚ä°(œÜ ‚ûù ‚ä°œÜ) ‚ûù œÜ) ‚ûù ‚ñ°(‚ñ°(œÜ ‚ûù ‚ä°œÜ) ‚ûù (œÜ ‚ûù ‚ä°œÜ)) := impTrans'' axiomFour this;
  have : ùì¢ ‚ä¢ ‚ñ°(‚ä°(œÜ ‚ûù ‚ä°œÜ) ‚ûù œÜ) ‚ûù ‚ñ°(œÜ ‚ûù ‚ä°œÜ) := impTrans'' this axiomL;
  have : ùì¢ ‚ä¢ ‚ä°(‚ä°(œÜ ‚ûù ‚ä°œÜ) ‚ûù œÜ) ‚ûù ‚ñ°(œÜ ‚ûù ‚ä°œÜ) := impTrans'' boxdotBox this;
  exact mdp‚ÇÅ lem‚ÇÅ_boxdot_Grz_of_L this;
@[simp] lemma boxdot_Grz_of_L! : ùì¢ ‚ä¢! ‚ä°(‚ä°(œÜ ‚ûù ‚ä°œÜ) ‚ûù œÜ) ‚ûù œÜ := ‚ü®boxdot_Grz_of_L‚ü©

end LO.System


namespace LO.Modal

namespace Kripke

open Relation (ReflGen)
open Formula.Kripke

lemma mem_reflClosure_GrzFiniteFrameClass_of_mem_GLFiniteFrameClass (hF : F ‚àà TransitiveIrreflexiveFiniteFrameClass) : ‚ü®F.toFrame^=‚ü© ‚àà ReflexiveTransitiveAntiSymmetricFiniteFrameClass := by
  obtain ‚ü®F_trans, F_irrefl‚ü© := hF;
  refine ‚ü®?F_refl, ?F_trans, ?F_antisymm‚ü©;
  . intro x; apply ReflGen.refl;
  . rintro x y z (rfl | Rxy) (rfl | Ryz);
    . apply ReflGen.refl;
    . apply ReflGen.single Ryz;
    . apply ReflGen.single Rxy;
    . apply ReflGen.single $ F_trans Rxy Ryz;
  . simp;
    rintro x y (rfl | Rxy) (rfl | Ryx);
    . rfl;
    . rfl;
    . rfl;
    . have := F_trans Rxy Ryx;
      have := F_irrefl x;
      contradiction;

lemma mem_irreflClosure_GLFiniteFrameClass_of_mem_GrzFiniteFrameClass (hF : F ‚àà ReflexiveTransitiveAntiSymmetricFiniteFrameClass) : ‚ü®F.toFrame^‚â†‚ü© ‚àà TransitiveIrreflexiveFiniteFrameClass := by
  obtain ‚ü®_, F_trans, F_antisymm‚ü© := hF;
  refine ‚ü®?F_trans, ?F_irrefl‚ü©;
  . rintro x y z ‚ü®nexy, Rxy‚ü© ‚ü®_, Ryz‚ü©;
    constructor;
    . by_contra; subst_vars;
      have := F_antisymm Rxy Ryz;
      contradiction;
    . exact F_trans Rxy Ryz;
  . simp;

variable {œÜ : Formula ‚Ñï}

lemma iff_boxdot_reflexive_closure : (Satisfies ‚ü®F, V‚ü© x (œÜ·µá)) ‚Üî (Satisfies ‚ü®F^=, V‚ü© x œÜ) := by
  induction œÜ using Formula.rec' generalizing x with
  | hatom œÜ => simp [Satisfies];
  | hbox œÜ ih =>
    simp [Formula.BoxdotTranslation, Box.boxdot, Satisfies];
    constructor;
    . rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©;
      intro y Rxy;
      rcases (Relation.reflGen_iff _ _ _ |>.mp Rxy) with (rfl | Rxy);
      . apply ih.mp h‚ÇÅ;
      . exact ih.mp $ h‚ÇÇ y Rxy;
    . rintro h;
      constructor;
      . exact ih.mpr $ @h x ReflGen.refl;
      . intro y Rxy;
        apply ih.mpr;
        exact @h y (ReflGen.single Rxy);
  | _ => simp_all [Satisfies];

lemma iff_frame_boxdot_reflexive_closure {F : Frame} : (F ‚äß (œÜ·µá)) ‚Üî ((F^=) ‚äß œÜ) := by
  constructor;
  . intro h V x; apply iff_boxdot_reflexive_closure.mp; exact h V x;
  . intro h V x; apply iff_boxdot_reflexive_closure.mpr; exact h V x;

lemma iff_reflexivize_irreflexivize {F : Frame} (F_Refl : Reflexive F) {x : F.World} {V} : (Satisfies ‚ü®F, V‚ü© x œÜ) ‚Üî (Satisfies ‚ü®F^‚â†^=, V‚ü© x œÜ) := by
  induction œÜ using Formula.rec' generalizing x with
  | hatom œÜ => rfl;
  | hfalsum => rfl;
  | himp œÜ œà ihp ihq =>
    constructor;
    . intro h hp;
      apply ihq.mp;
      exact h $ ihp.mpr hp;
    . intro h hp;
      apply ihq.mpr;
      exact h $ ihp.mp hp;
  | hbox œÜ ihp =>
    constructor;
    . intro h y Rxy;
      apply ihp (x := y) |>.mp;
      exact h y $ by
        induction Rxy with
        | refl => apply F_Refl
        | single h => exact h.2;
    . intro h y Rxy;
      by_cases e : x = y;
      . subst e;
        apply ihp.mpr;
        exact h x ReflGen.refl;
      . apply ihp (x := y) |>.mpr;
        exact h y $ by
          exact ReflGen.single ‚ü®(by simpa), Rxy‚ü©;

end Kripke


namespace Hilbert

open Kripke
open Formula.Kripke
open Formula (BoxdotTranslation)
open Hilbert.Kripke
open Modal.Kripke


variable {œÜ : Formula ‚Ñï}

open System in
lemma boxdotTranslatedGL_of_Grz : (Hilbert.Grz ‚Ñï) ‚ä¢! œÜ ‚Üí (Hilbert.GL ‚Ñï) ‚ä¢! œÜ·µá := boxdotTranslated $ by
  intro œÜ hp;
  rcases hp with (‚ü®_, _, rfl‚ü© | ‚ü®_, rfl‚ü©);
  . dsimp [BoxdotTranslation]; exact boxdot_axiomK!;
  . dsimp [BoxdotTranslation]; exact boxdot_Grz_of_L!

lemma Grz_of_boxdotTranslatedGL : (Hilbert.GL ‚Ñï) ‚ä¢! œÜ·µá ‚Üí (Hilbert.Grz ‚Ñï) ‚ä¢! œÜ := by
  contrapose;
  intro h;
  apply (not_imp_not.mpr $ Hilbert.GL.Kripke.finite_sound.sound);
  have := (not_imp_not.mpr $ Hilbert.Grz.Kripke.complete |>.complete) h;
  simp [FiniteFrameClass.toFrameClass] at this;
  obtain ‚ü®F, FF, ‚ü®FF_refl, FF_trans, FF_antisymm, rfl, hFF‚ü©‚ü© := this;
  simp;
  use FF.toFrame^‚â†;
  constructor;
  . use ‚ü®FF.toFrame^‚â†‚ü©;
    simp [Transitive];
    rintro x y z ‚ü®hxy, Rxy‚ü© ‚ü®hyz, Ryz‚ü©;
    constructor;
    . by_contra hC; subst hC;
      have :=FF_antisymm Rxy Ryz;
      contradiction;
    . exact FF_trans Rxy Ryz;
  . apply Kripke.iff_frame_boxdot_reflexive_closure.not.mpr;
    simp_all [ValidOnFrame, ValidOnModel];
    obtain ‚ü®V, x, h‚ü© := hFF;
    use V, x;
    exact iff_reflexivize_irreflexivize FF_refl |>.not.mp h;

theorem iff_Grz_boxdotTranslatedGL : (Hilbert.GL ‚Ñï) ‚ä¢! œÜ·µá ‚Üî (Hilbert.Grz ‚Ñï) ‚ä¢! œÜ := by
  constructor;
  . apply Grz_of_boxdotTranslatedGL;
  . apply boxdotTranslatedGL_of_Grz;

instance : BoxdotProperty (Hilbert.GL ‚Ñï) (Hilbert.Grz ‚Ñï) := ‚ü®iff_Grz_boxdotTranslatedGL‚ü©

end Hilbert

end LO.Modal
