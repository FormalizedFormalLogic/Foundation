import Foundation.ProvabilityLogic.S.Completeness

namespace LO

namespace Modal.Logic

open Kripke Formula.Kripke

variable {A : Formula _}

lemma iff_provable_rflSubformula_GL_provable_S : (A.rflSubformula.conj ‚ûù A) ‚àà Logic.GL ‚Üî A ‚àà Logic.S := ProvabilityLogic.GL_S_TFAE (T := ùêàùö∫‚ÇÅ) |>.out 0 1

lemma iff_provable_boxdot_GL_provable_boxdot_S : A·µá ‚àà Logic.GL ‚Üî A·µá ‚àà Logic.S := by
  constructor;
  . apply Logic.GL_subset_S;
  . intro h;
    replace h := iff_provable_rflSubformula_GL_provable_S.mpr h;
    replace h := Hilbert.GL.Kripke.iff_provable_satisfies_FiniteTransitiveTree.mp h;
    apply Hilbert.GL.Kripke.iff_provable_satisfies_FiniteTransitiveTree.mpr;
    intro M r _;
    obtain ‚ü®i, hi‚ü© := Kripke.Model.extendRoot.inr_satisfies_axiomT_set (M := M) (Œì := A·µá.subformulas.prebox)
    let M‚ÇÅ := M.extendRoot r ‚ü®A·µá.subformulas.prebox.card + 1, by omega‚ü©;
    let i‚ÇÅ : M‚ÇÅ.World := Sum.inl i;
    refine Model.extendRoot.inl_satisfies_boxdot_iff.mpr
      $ Model.pointGenerate.modal_equivalent_at_root (r := i‚ÇÅ) |>.mp
      $ @h (M‚ÇÅ‚Üæi‚ÇÅ) Model.pointGenerate.root ?_ ?_;
    . apply Frame.isFiniteTree_iff _ _ |>.mpr
      constructor;
      . apply Frame.pointGenerate.isFinite (finite := Frame.extendRoot.isFinite)
      . apply Frame.isTree_iff _ _ |>.mpr;
        refine ‚ü®?_, ?_, ?_‚ü©;
        . apply Frame.pointGenerate.instIsRooted;
        . apply Frame.pointGenerate.isAsymm (assym := Frame.extendRoot.isAsymm);
        . apply Frame.pointGenerate.isTrans (trans := Frame.extendRoot.isTrans);
    . apply @Model.pointGenerate.modal_equivalent_at_root (r := i‚ÇÅ) |>.mpr
      apply Satisfies.fconj_def.mpr;
      intro B hB;
      apply Satisfies.fconj_def.mp hi;
      simp only [Finset.mem_image, Finset.eq_prebox_premultibox_one, Finset.mem_preimage, Function.iterate_one] at hB ‚ä¢;
      obtain ‚ü®C, hC, rfl‚ü© := hB;
      use C;

end Modal.Logic


end LO
