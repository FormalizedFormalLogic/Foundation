import Foundation.Modal.Hilbert.ConsistentTheory

namespace LO.Modal

variable {H : Hilbert Œ±}

namespace Formula

def complement : Formula Œ± ‚Üí Formula Œ±
  | ‚àºœÜ => œÜ
  | œÜ  => ‚àºœÜ
prefix:80 "-" => complement

namespace complement

variable {œÜ œà : Formula Œ±}

@[simp] lemma neg_def : -(‚àºœÜ) = œÜ := by
  induction œÜ using Formula.rec' <;> simp_all [complement]

@[simp] lemma bot_def : -(‚ä• : Formula Œ±) = ‚àº(‚ä•) := by simp only [complement, imp_inj, and_true]; rfl;

@[simp] lemma box_def : -(‚ñ°œÜ) = ‚àº(‚ñ°œÜ) := by simp only [complement, imp_inj, and_true]; rfl;

lemma imp_def‚ÇÅ (hq : œà ‚â† ‚ä•) : -(œÜ ‚ûù œà) = ‚àº(œÜ ‚ûù œà) := by
  simp only [complement];
  split;
  . rename_i h; simp [imp_eq, falsum_eq, hq] at h;
  . rfl;

lemma imp_def‚ÇÇ (hq : œà = ‚ä•) : -(œÜ ‚ûù œà) = œÜ := by
  subst_vars;
  apply neg_def;

lemma resort_box (h : -œÜ = ‚ñ°œà) : œÜ = ‚àº‚ñ°œà := by
  simp [complement] at h;
  split at h;
  . subst_vars; rfl;
  . contradiction;

lemma or [DecidableEq Œ±] (œÜ : Formula Œ±) : -œÜ = ‚àºœÜ ‚à® ‚àÉ œà, ‚àºœà = œÜ := by
  induction œÜ using Formula.cases_neg with
  | himp _ _ hn => simp [imp_def‚ÇÅ hn];
  | hfalsum => simp;
  | hneg => simp;
  | hatom a => simp [complement];
  | hbox œÜ => simp [complement]; rfl;

end complement

end Formula

section

variable [System (Formula Œ±) S] {ùì¢ : S}
variable [System.ModusPonens ùì¢]
variable {œÜ œà : Formula Œ±}

lemma complement_derive_bot [DecidableEq Œ±] (hp : ùì¢ ‚ä¢! œÜ) (hcp : ùì¢ ‚ä¢! -œÜ) : ùì¢ ‚ä¢! ‚ä• := by
  induction œÜ using Formula.cases_neg with
  | hfalsum => assumption;
  | hatom a =>
    simp [Formula.complement] at hcp;
    exact hcp ‚®Ä hp;
  | hneg =>
    simp [Formula.complement] at hcp;
    exact hp ‚®Ä hcp;
  | himp œÜ œà h =>
    simp [Formula.complement.imp_def‚ÇÅ h] at hcp;
    exact hcp ‚®Ä hp;
  | hbox œÜ =>
    simp [Formula.complement] at hcp;
    exact hcp ‚®Ä hp;

lemma neg_complement_derive_bot [DecidableEq Œ±] (hp : ùì¢ ‚ä¢! ‚àºœÜ) (hcp : ùì¢ ‚ä¢! ‚àº(-œÜ)) : ùì¢ ‚ä¢! ‚ä• := by
  induction œÜ using Formula.cases_neg with
  | hfalsum =>
    simp [Formula.complement] at hcp;
    exact hcp ‚®Ä hp;
  | hatom a =>
    simp [Formula.complement] at hcp;
    exact hcp ‚®Ä hp;
  | hneg =>
    simp [Formula.complement] at hcp;
    exact hp ‚®Ä hcp;
  | himp œÜ œà h =>
    simp [Formula.complement.imp_def‚ÇÅ h] at hcp;
    exact hcp ‚®Ä hp;
  | hbox œÜ =>
    simp [Formula.complement] at hcp;
    exact hcp ‚®Ä hp;

end


namespace Formulae

variable [DecidableEq Œ±]

def complementary (P : Formulae Œ±) : Formulae Œ± := P ‚à™ (P.image (Formula.complement))
postfix:80 "‚Åª" => Formulae.complementary

variable {P P‚ÇÅ P‚ÇÇ : Formulae Œ±} {œÜ œà œá: Formula Œ±}

lemma complementary_mem (h : œÜ ‚àà P) : œÜ ‚àà P‚Åª := by simp [complementary]; tauto;
macro_rules | `(tactic| trivial) => `(tactic| apply complementary_mem $ by assumption)

lemma complementary_comp (h : œÜ ‚àà P) : -œÜ ‚àà P‚Åª := by simp [complementary]; tauto;
macro_rules | `(tactic| trivial) => `(tactic| apply complementary_comp $ by assumption)

lemma complementary_mem_box (hi : ‚àÄ {œà œá}, œà ‚ûù œá ‚àà P ‚Üí œà ‚àà P := by trivial) : ‚ñ°œÜ ‚àà P‚Åª ‚Üí ‚ñ°œÜ ‚àà P := by
  simp [complementary];
  intro h;
  rcases h with (h | ‚ü®œà, hq, eq‚ü©);
  . assumption;
  . replace eq := Formula.complement.resort_box eq;
    subst eq;
    exact hi hq;

class ComplementaryClosed (P : Formulae Œ±) (S : Formulae Œ±) : Prop where
  subset : P ‚äÜ S‚Åª
  either : ‚àÄ œÜ ‚àà S, œÜ ‚àà P ‚à® -œÜ ‚àà P

def SubformulaeComplementaryClosed (P : Formulae Œ±) (œÜ : Formula Œ±) : Prop := P.ComplementaryClosed œÜ.subformulae



section Consistent

def Consistent (H : Hilbert Œ±) (P : Formulae Œ±) : Prop := P *‚ä¨[H] ‚ä•

open Theory

omit [DecidableEq Œ±] in
@[simp]
lemma iff_theory_consistent_formulae_consistent {P : Formulae Œ±} : Theory.Consistent H P ‚Üî Formulae.Consistent H P := by
  simp [Consistent, Theory.Consistent]

omit [DecidableEq Œ±] in
@[simp]
lemma empty_conisistent [System.Consistent H] : Formulae.Consistent H ‚àÖ := by
  rw [‚Üêiff_theory_consistent_formulae_consistent];
  convert Theory.emptyset_consistent (Œ± := Œ±);
  . simp;
  . assumption;

lemma provable_iff_insert_neg_not_consistent : ‚ÜëP *‚ä¢[H]! œÜ ‚Üî ¬¨(Formulae.Consistent H (insert (‚àºœÜ) P)) := by
  rw [‚Üêiff_theory_consistent_formulae_consistent];
  simpa only [Finset.coe_insert, not_not] using Theory.provable_iff_insert_neg_not_consistent;

lemma neg_provable_iff_insert_not_consistent : ‚ÜëP *‚ä¢[H]! ‚àºœÜ ‚Üî ¬¨(Formulae.Consistent H (insert (œÜ) P)) := by
  rw [‚Üêiff_theory_consistent_formulae_consistent];
  simpa only [Finset.coe_insert, not_not] using Theory.neg_provable_iff_insert_not_consistent;

lemma unprovable_iff_singleton_neg_consistent : H ‚ä¨ œÜ ‚Üî Formulae.Consistent H ({‚àºœÜ}) := by
  rw [‚Üêiff_theory_consistent_formulae_consistent];
  simpa using Theory.unprovable_iff_singleton_neg_consistent;

lemma unprovable_iff_singleton_compl_consistent : H ‚ä¨ œÜ ‚Üî Formulae.Consistent H ({-œÜ}) := by
  rcases (Formula.complement.or œÜ) with (hp | ‚ü®œà, rfl‚ü©);
  . rw [hp];
    convert Theory.unprovable_iff_singleton_neg_consistent (H := H) (œÜ := œÜ);
    simp;
  . simp only [Formula.complement];
    convert Theory.unprovable_iff_singleton_consistent (H := H) (œÜ := œà);
    simp;

lemma provable_iff_singleton_compl_inconsistent : H ‚ä¢! œÜ ‚Üî ¬¨(Formulae.Consistent H ({-œÜ})) := by
  constructor;
  . contrapose; push_neg; apply unprovable_iff_singleton_compl_consistent.mpr;
  . contrapose; push_neg; apply unprovable_iff_singleton_compl_consistent.mp;

lemma intro_union_consistent
  (h : ‚àÄ {Œì‚ÇÅ Œì‚ÇÇ : List (Formula Œ±)}, (‚àÄ œÜ ‚àà Œì‚ÇÅ, œÜ ‚àà P‚ÇÅ) ‚àß (‚àÄ œÜ ‚àà Œì‚ÇÇ, œÜ ‚àà P‚ÇÇ) ‚Üí H ‚ä¨ ‚ãÄŒì‚ÇÅ ‚ãè ‚ãÄŒì‚ÇÇ ‚ûù ‚ä•)
  : Formulae.Consistent H (P‚ÇÅ ‚à™ P‚ÇÇ) := by
  rw [‚Üêiff_theory_consistent_formulae_consistent];
  simpa using Theory.intro_union_consistent h;

lemma intro_triunion_consistent
  (h : ‚àÄ {Œì‚ÇÅ Œì‚ÇÇ Œì‚ÇÉ : List (Formula Œ±)}, (‚àÄ œÜ ‚àà Œì‚ÇÅ, œÜ ‚àà P‚ÇÅ) ‚àß (‚àÄ œÜ ‚àà Œì‚ÇÇ, œÜ ‚àà P‚ÇÇ) ‚àß (‚àÄ œÜ ‚àà Œì‚ÇÉ, œÜ ‚àà P‚ÇÉ) ‚Üí H ‚ä¨ ‚ãÄŒì‚ÇÅ ‚ãè ‚ãÄŒì‚ÇÇ ‚ãè ‚ãÄŒì‚ÇÉ ‚ûù ‚ä•)
  : Formulae.Consistent H (P‚ÇÅ ‚à™ P‚ÇÇ ‚à™ P‚ÇÉ) := by
  rw [‚Üêiff_theory_consistent_formulae_consistent];
  convert Theory.intro_triunion_consistent h;
  ext;
  constructor;
  . simp only [Finset.coe_union, Set.mem_union, Finset.mem_coe];
    rintro ((hp‚ÇÅ | hp‚ÇÇ) | hp‚ÇÉ);
    . left; left; assumption;
    . left; right; assumption;
    . right; assumption;
  . simp only [Set.mem_union, Finset.coe_union, Finset.mem_coe];
    rintro ((hp‚ÇÅ | hp‚ÇÇ) | hp‚ÇÉ);
    . left; left; assumption;
    . left; right; assumption;
    . right; assumption;


namespace exists_consistent_complementary_closed

open Classical

variable (H)

noncomputable def next (œÜ : Formula Œ±) (P : Formulae Œ±) : Formulae Œ± :=
  if Formulae.Consistent H (insert œÜ P) then insert œÜ P else insert (-œÜ) P

noncomputable def enum (P : Formulae Œ±) : (List (Formula Œ±)) ‚Üí Formulae Œ±
  | [] => P
  | œà :: qs => next H œà (enum P qs)
local notation:max t"[" l "]" => enum H t l

lemma next_consistent
  (P_consis : Formulae.Consistent H P) (œÜ : Formula Œ±)
  : Formulae.Consistent H (next H œÜ P) := by
  simp only [next];
  split;
  . simpa;
  . rename_i h;
    by_contra hC;
    have h‚ÇÅ := Formulae.neg_provable_iff_insert_not_consistent (H := H) (P := P) (œÜ := œÜ) |>.mpr h;
    have h‚ÇÇ := Formulae.neg_provable_iff_insert_not_consistent (H := H) (P := P) (œÜ := -œÜ) |>.mpr hC;
    have := neg_complement_derive_bot h‚ÇÅ h‚ÇÇ;
    contradiction;

lemma enum_consistent
  (P_consis : Formulae.Consistent H P)
  {l : List (Formula Œ±)}
  : Formulae.Consistent H (P[l]) := by
  induction l with
  | nil => exact P_consis;
  | cons œà qs ih =>
    simp only [enum];
    apply next_consistent;
    exact ih;

@[simp] lemma enum_nil {P : Formulae Œ±} : (P[[]]) = P := by simp [enum]

lemma enum_subset_step {l : List (Formula Œ±)} : (P[l]) ‚äÜ (P[(œà :: l)]) := by
  simp [enum, next];
  split <;> simp;

lemma enum_subset {l : List (Formula Œ±)} : P ‚äÜ P[l] := by
  induction l with
  | nil => simp;
  | cons œà qs ih => exact Set.Subset.trans ih $ by apply enum_subset_step;

lemma either {l : List (Formula Œ±)} (hp : œÜ ‚àà l) : œÜ ‚àà P[l] ‚à® -œÜ ‚àà P[l] := by
  induction l with
  | nil => simp_all;
  | cons œà qs ih =>
    simp at hp;
    simp [enum, next];
    rcases hp with (rfl | hp);
    . split <;> simp [Finset.mem_insert];
    . split <;> {
        simp [Finset.mem_insert];
        rcases (ih hp) with (_ | _) <;> tauto;
      }

lemma subset {l : List (Formula Œ±)} {œÜ : Formula Œ±} (h : œÜ ‚àà P[l])
  : œÜ ‚àà P ‚à® œÜ ‚àà l ‚à® (‚àÉ œà ‚àà l, -œà = œÜ)  := by
  induction l generalizing œÜ with
  | nil => simp_all;
  | cons œà qs ih =>
    simp_all [enum, next];
    split at h;
    . rcases Finset.mem_insert.mp h with (rfl | h)
      . tauto;
      . rcases ih h <;> tauto;
    . rcases Finset.mem_insert.mp h with (rfl | h)
      . tauto;
      . rcases ih h <;> tauto;

end exists_consistent_complementary_closed

open exists_consistent_complementary_closed in
lemma exists_consistent_complementary_closed
  (S : Formulae Œ±)
  (h_sub : P ‚äÜ S‚Åª) (P_consis : Formulae.Consistent H P)
  : ‚àÉ P', P ‚äÜ P' ‚àß Formulae.Consistent H P' ‚àß P'.ComplementaryClosed S := by
  use exists_consistent_complementary_closed.enum H P S.toList;
  refine ‚ü®?_, ?_, ?_, ?_‚ü©;
  . apply enum_subset;
  . exact enum_consistent H P_consis;
  . simp [Formulae.complementary];
    intro œÜ hp;
    simp only [Finset.mem_union, Finset.mem_image];
    rcases subset H hp with (h | h | ‚ü®œà, hq‚ÇÅ, hq‚ÇÇ‚ü©);
    . replace h := h_sub h;
      simp [complementary] at h;
      rcases h with (_ | ‚ü®a, b, rfl‚ü©);
      . tauto;
      . right; use a;
    . left; exact Finset.mem_toList.mp h;
    . right;
      use œà;
      constructor;
      . exact Finset.mem_toList.mp hq‚ÇÅ;
      . assumption;
  . intro œÜ hp;
    exact either H (by simpa);

end Consistent

end Formulae


variable [DecidableEq Œ±]

structure ComplementaryClosedConsistentFormulae (H) (S : Formulae Œ±) where
  formulae : Formulae Œ±
  consistent : formulae.Consistent H
  closed : formulae.ComplementaryClosed S
alias CCF := ComplementaryClosedConsistentFormulae

namespace ComplementaryClosedConsistentFormulae

open System
open Formula (atom)
variable {H : Hilbert Œ±}

lemma lindenbaum
  (S : Formulae Œ±)
  {X : Formulae Œ±} (X_sub : X ‚äÜ S‚Åª) (X_consis : X.Consistent H)
  : ‚àÉ X' : CCF H S, X ‚äÜ X'.formulae := by
  obtain ‚ü®X', ‚ü®X'_sub, x, b‚ü©‚ü© := Formulae.exists_consistent_complementary_closed S X_sub X_consis;
  use ‚ü®X', (by assumption), (by assumption)‚ü©;

noncomputable instance [System.Consistent H] : Inhabited (CCF H S) := ‚ü®lindenbaum (X := ‚àÖ) S (by simp) (by simp) |>.choose‚ü©

variable {S} {X X‚ÇÅ X‚ÇÇ : CCF H S}

@[simp] lemma unprovable_falsum : X.formulae *‚ä¨[H] ‚ä• := X.consistent

lemma mem_compl_of_not_mem (hs : œà ‚àà S) : œà ‚àâ X.formulae ‚Üí -œà ‚àà X.formulae := by
  intro h;
  rcases X.closed.either œà (by assumption) with (h | h);
  . contradiction;
  . assumption;

lemma mem_of_not_mem_compl (hs : œà ‚àà S) : -œà ‚àâ X.formulae ‚Üí œà ‚àà X.formulae := by
  apply Not.imp_symm;
  exact mem_compl_of_not_mem hs;

lemma membership_iff (hq_sub : œà ‚àà S) : (œà ‚àà X.formulae) ‚Üî (X.formulae *‚ä¢[H]! œà) := by
  constructor;
  . intro h; exact Context.by_axm! h;
  . intro hp;
    suffices -œà ‚àâ X.formulae by
      apply or_iff_not_imp_right.mp $ ?_;
      assumption;
      exact X.closed.either œà hq_sub;
    by_contra hC;
    have hnp : X.formulae *‚ä¢[H]! -œà := Context.by_axm! hC;
    have := complement_derive_bot hp hnp;
    simpa;

lemma mem_verum (h : ‚ä§ ‚àà S) : ‚ä§ ‚àà X.formulae := by
  apply membership_iff h |>.mpr;
  exact verum!;

@[simp]
lemma mem_falsum : ‚ä• ‚àâ X.formulae := Theory.not_mem_falsum_of_consistent X.consistent

lemma iff_mem_compl (hq_sub : œà ‚àà S) : (œà ‚àà X.formulae) ‚Üî (-œà ‚àâ X.formulae) := by
  constructor;
  . intro hq; replace hq := membership_iff hq_sub |>.mp hq;
    by_contra hnq;
    induction œà using Formula.cases_neg with
    | hfalsum => exact unprovable_falsum hq;
    | hatom a =>
      simp only [Formula.complement] at hnq;
      have : ‚ÜëX.formulae *‚ä¢[H]! ‚àº(atom a) := Context.by_axm! hnq;
      have : ‚ÜëX.formulae *‚ä¢[H]! ‚ä• := complement_derive_bot hq this;
      simpa;
    | hbox œà =>
      simp only [Formula.complement] at hnq;
      have : ‚ÜëX.formulae *‚ä¢[H]! ‚àº(‚ñ°œà) := Context.by_axm! hnq;
      have : ‚ÜëX.formulae *‚ä¢[H]! ‚ä• := complement_derive_bot hq this;
      simpa;
    | hneg œà =>
      simp only [Formula.complement] at hnq;
      have : ‚ÜëX.formulae *‚ä¢[H]! œà := Context.by_axm! hnq;
      have : ‚ÜëX.formulae *‚ä¢[H]! ‚ä• := complement_derive_bot hq this;
      simpa;
    | himp œà œá h =>
      simp only [Formula.complement.imp_def‚ÇÅ h] at hnq;
      have : ‚ÜëX.formulae *‚ä¢[H]! ‚àº(œà ‚ûù œá) := Context.by_axm! hnq;
      have : ‚ÜëX.formulae *‚ä¢[H]! ‚ä• := this ‚®Ä hq;
      simpa;
  . intro h; exact mem_of_not_mem_compl (by assumption) h;

lemma iff_mem_imp
  (hsub_qr : (œà ‚ûù œá) ‚àà S) (hsub_q : œà ‚àà S := by trivial)  (hsub_r : œá ‚àà S := by trivial)
  : ((œà ‚ûù œá) ‚àà X.formulae) ‚Üî (œà ‚àà X.formulae) ‚Üí (-œá ‚àâ X.formulae) := by
  constructor;
  . intro hqr hq;
    apply iff_mem_compl hsub_r |>.mp;
    replace hqr := membership_iff hsub_qr |>.mp hqr;
    replace hq := membership_iff hsub_q |>.mp hq;
    exact membership_iff hsub_r |>.mpr $ hqr ‚®Ä hq;
  . intro hqr; replace hqr := not_or_of_imp hqr
    rcases hqr with (hq | hr);
    . apply membership_iff hsub_qr |>.mpr;
      replace hq := mem_compl_of_not_mem hsub_q hq;
      induction œà using Formula.cases_neg with
      | hfalsum => exact efq!;
      | hatom a => exact efq_of_neg! $ Context.by_axm! (by simpa using hq);
      | hbox œà => exact efq_of_neg! $ Context.by_axm! (by simpa using hq);
      | hneg œà =>
        simp only [Formula.complement.neg_def] at hq;
        exact efq_of_neg‚ÇÇ! $ Context.by_axm! hq;
      | himp œà œá h =>
        simp only [Formula.complement.imp_def‚ÇÅ h] at hq;
        exact efq_of_neg! $ Context.by_axm! (by simpa using hq);
    . apply membership_iff (by assumption) |>.mpr;
      exact imply‚ÇÅ'! $ membership_iff (by assumption) |>.mp $ iff_mem_compl (by assumption) |>.mpr hr;

lemma iff_not_mem_imp
  (hsub_qr : (œà ‚ûù œá) ‚àà S) (hsub_q : œà ‚àà S := by trivial)  (hsub_r : œá ‚àà S := by trivial)
  : ((œà ‚ûù œá) ‚àâ X.formulae) ‚Üî (œà ‚àà X.formulae) ‚àß (-œá ‚àà X.formulae) := by
  simpa using @iff_mem_imp Œ± _ H S X œà œá hsub_qr hsub_q hsub_r |>.not;

lemma equality_def : X‚ÇÅ = X‚ÇÇ ‚Üî X‚ÇÅ.formulae = X‚ÇÇ.formulae := by
  constructor;
  . intro h; cases h; rfl;
  . intro h; cases X‚ÇÅ; cases X‚ÇÇ; simp_all;

instance : Finite (CCF H S) := by
  let f : CCF H S ‚Üí (Finset.powerset (S‚Åª)) := Œª X => ‚ü®X.formulae, by simpa using X.closed.subset‚ü©
  have hf : Function.Injective f := by
    intro X‚ÇÅ X‚ÇÇ h;
    apply equality_def.mpr;
    simpa [f] using h;
  exact Finite.of_injective f hf;

end ComplementaryClosedConsistentFormulae


end LO.Modal
