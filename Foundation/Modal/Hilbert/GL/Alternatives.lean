import Foundation.Modal.Hilbert.WellKnown
import Foundation.Modal.Entailment.GL
import Mathlib.Tactic.TFAE


namespace LO.Entailment

open FiniteContext

variable {S F : Type*} [BasicModalLogicalConnective F] [DecidableEq F] [Entailment F S]
variable {ùì¢ : S}

protected class Modal.K4Loeb (ùì¢ : S) extends Entailment.Modal.K4 ùì¢, LoebRule ùì¢

namespace K4Loeb

variable [Entailment.Modal.K4Loeb ùì¢]

protected def axiomL : ùì¢ ‚ä¢ Axioms.L œÜ := by
  dsimp [Axioms.L];
  generalize e : ‚ñ°(‚ñ°œÜ ‚ûù œÜ) ‚ûù ‚ñ°œÜ = œà;
  have d‚ÇÅ : [‚ñ°(‚ñ°œÜ ‚ûù œÜ), ‚ñ°œà] ‚ä¢[ùì¢] ‚ñ°‚ñ°(‚ñ°œÜ ‚ûù œÜ) ‚ûù ‚ñ°‚ñ°œÜ := FiniteContext.weakening (by aesop) $ deductInv' axiomK;
  have d‚ÇÇ : [‚ñ°(‚ñ°œÜ ‚ûù œÜ), ‚ñ°œà] ‚ä¢[ùì¢] ‚ñ°‚ñ°œÜ ‚ûù ‚ñ°œÜ := FiniteContext.weakening (by aesop) $ deductInv' axiomK;
  have d‚ÇÉ : ùì¢ ‚ä¢ ‚ñ°(‚ñ°œÜ ‚ûù œÜ) ‚ûù ‚ñ°‚ñ°(‚ñ°œÜ ‚ûù œÜ) := axiomFour;
  have : ùì¢ ‚ä¢ ‚ñ°œà ‚ûù œà := by
    nth_rw 2 [‚Üêe]; apply deduct'; apply deduct;
    exact d‚ÇÇ ‚®Ä (d‚ÇÅ ‚®Ä ((of d‚ÇÉ) ‚®Ä (FiniteContext.byAxm)));
  exact loeb this;
instance : HasAxiomL ùì¢ := ‚ü®fun _ ‚Ü¶ K4Loeb.axiomL‚ü©

end K4Loeb


protected class Modal.K4Henkin (ùì¢ : S) extends Entailment.Modal.K4 ùì¢, HenkinRule ùì¢

namespace K4Henkin

variable [Entailment.Modal.K4Henkin ùì¢]

instance : LoebRule ùì¢ where
  loeb h := h ‚®Ä (henkin $ E_intro (axiomK' $ nec h) axiomFour);

end K4Henkin


protected class Modal.K4H (ùì¢ : S) extends Entailment.Modal.K4 ùì¢, HasAxiomH ùì¢

namespace K4H

variable [Entailment.Modal.K4H ùì¢]

instance : HenkinRule ùì¢ where
  henkin h := (K_left h) ‚®Ä (axiomH ‚®Ä nec h);

end K4H

end LO.Entailment



namespace LO.Modal

namespace Hilbert

open Entailment

variable {Œ± : Type*}

protected structure WithLoebRule (Œ± : Type*) where
  axioms : Set (Formula Œ±)

namespace WithLoebRule

abbrev axiomInstances (H : Hilbert.WithLoebRule Œ±) : Set (Formula Œ±) := { œÜ‚ü¶s‚üß | (œÜ ‚àà H.axioms) (s : Substitution Œ±) }

inductive Deduction (H : Hilbert.WithLoebRule Œ±) : (Formula Œ±) ‚Üí Type _
  | maxm {œÜ}      : œÜ ‚àà H.axiomInstances ‚Üí Deduction H œÜ
  | mdp {œÜ œà}     : Deduction H (œÜ ‚ûù œà) ‚Üí Deduction H œÜ ‚Üí Deduction H œà
  | nec {œÜ}       : Deduction H œÜ ‚Üí Deduction H (‚ñ°œÜ)
  | loeb {œÜ}      : Deduction H (‚ñ°œÜ ‚ûù œÜ) ‚Üí Deduction H œÜ
  | imply‚ÇÅ œÜ œà    : Deduction H $ Axioms.Imply‚ÇÅ œÜ œà
  | imply‚ÇÇ œÜ œà œá  : Deduction H $ Axioms.Imply‚ÇÇ œÜ œà œá
  | ec œÜ œà        : Deduction H $ Axioms.ElimContra œÜ œà

namespace Deduction

variable {H H‚ÇÅ H‚ÇÇ : Hilbert.WithLoebRule Œ±}

instance : Entailment (Formula Œ±) (Hilbert.WithLoebRule Œ±) := ‚ü®Deduction‚ü©

instance : Entailment.Lukasiewicz H where
  mdp := mdp
  imply‚ÇÅ := imply‚ÇÅ
  imply‚ÇÇ := imply‚ÇÇ
  elimContra := ec

instance : Entailment.Cl H where

instance : Entailment.HasDiaDuality H := inferInstance

instance : Entailment.Necessitation H := ‚ü®nec‚ü©

instance : Entailment.LoebRule H := ‚ü®loeb‚ü©

lemma maxm! {œÜ} (h : œÜ ‚àà H.axiomInstances) : H ‚ä¢! œÜ := ‚ü®maxm h‚ü©

noncomputable def rec!
  {motive      : (œÜ : Formula Œ±) ‚Üí H ‚ä¢! œÜ ‚Üí Sort*}
  (maxm       : ‚àÄ {œÜ}, (h : œÜ ‚àà H.axiomInstances) ‚Üí motive œÜ (maxm! h))
  (mdp        : ‚àÄ {œÜ œà}, {hpq : H ‚ä¢! œÜ ‚ûù œà} ‚Üí {hp : H ‚ä¢! œÜ} ‚Üí motive (œÜ ‚ûù œà) hpq ‚Üí motive œÜ hp ‚Üí motive œà (mdp! hpq hp))
  (nec        : ‚àÄ {œÜ}, {hp : H ‚ä¢! œÜ} ‚Üí (ihp : motive œÜ hp) ‚Üí motive (‚ñ°œÜ) (nec! hp))
  (loeb       : ‚àÄ {œÜ}, {hp : H ‚ä¢! ‚ñ°œÜ ‚ûù œÜ} ‚Üí (ihp : motive (‚ñ°œÜ ‚ûù œÜ) hp) ‚Üí motive œÜ (loeb! hp))
  (imply‚ÇÅ     : ‚àÄ {œÜ œà}, motive (Axioms.Imply‚ÇÅ œÜ œà) $ ‚ü®imply‚ÇÅ œÜ œà‚ü©)
  (imply‚ÇÇ     : ‚àÄ {œÜ œà œá}, motive (Axioms.Imply‚ÇÇ œÜ œà œá) $ ‚ü®imply‚ÇÇ œÜ œà œá‚ü©)
  (ec : ‚àÄ {œÜ œà}, motive (Axioms.ElimContra œÜ œà) $ ‚ü®ec œÜ œà‚ü©)
  : ‚àÄ {œÜ}, (d : H ‚ä¢! œÜ) ‚Üí motive œÜ d := by
  intro œÜ d;
  induction d.some with
  | maxm h => exact maxm h
  | mdp hpq hp ihpq ihp => exact mdp (ihpq ‚ü®hpq‚ü©) (ihp ‚ü®hp‚ü©)
  | nec hp ih => exact nec (ih ‚ü®hp‚ü©)
  | loeb hp ih => exact loeb (ih ‚ü®hp‚ü©)
  | _ => aesop;

def subst! {œÜ} (s) (h : H ‚ä¢! œÜ) : H ‚ä¢! œÜ‚ü¶s‚üß := by
  induction h using Deduction.rec! with
  | imply‚ÇÅ => simp;
  | imply‚ÇÇ => simp;
  | ec => simp;
  | mdp ihœÜœà ihœÜ => exact ihœÜœà ‚®Ä ihœÜ;
  | nec ihœÜ => exact nec! ihœÜ;
  | loeb ihœÜ => exact loeb! ihœÜ;
  | maxm h =>
    obtain ‚ü®œà, h, ‚ü®s', rfl‚ü©‚ü© := h;
    apply maxm!;
    use œà;
    constructor;
    . assumption;
    . use s' ‚àò s;
      simp;

end Deduction


section

open Deduction

variable {H : Hilbert.WithLoebRule Œ±} [DecidableEq Œ±]

class HasK (H : Hilbert.WithLoebRule Œ±) where
  p : Œ±
  q : Œ±
  ne_pq : p ‚â† q := by trivial;
  mem_K : Axioms.K (.atom p) (.atom q) ‚àà H.axioms := by tauto;

instance [hK : H.HasK] : Entailment.HasAxiomK H where
  K œÜ œà := by
    apply maxm;
    use Axioms.K (.atom hK.p) (.atom hK.q);
    constructor;
    . exact hK.mem_K;
    . use (Œª b => if hK.p = b then œÜ else if hK.q = b then œà else (.atom b));
      simp [hK.ne_pq];

class HasFour (H : Hilbert.WithLoebRule Œ±) where
  p : Œ±
  mem_Four : Axioms.Four (.atom p) ‚àà H.axioms := by tauto;

instance [hFour : H.HasFour] : Entailment.HasAxiomFour H where
  Four œÜ := by
    apply maxm;
    use Axioms.Four (.atom hFour.p);
    constructor;
    . exact hFour.mem_Four;
    . use (Œª b => if hFour.p = b then œÜ else (.atom b));
      simp;

end

end WithLoebRule


protected structure WithHenkinRule (Œ± : Type*) where
  axioms : Set (Formula Œ±)

namespace WithHenkinRule

abbrev axiomInstances (H : Hilbert.WithHenkinRule Œ±) : Set (Formula Œ±) := { œÜ‚ü¶s‚üß | (œÜ ‚àà H.axioms) (s : Substitution Œ±) }

inductive Deduction (H : Hilbert.WithHenkinRule Œ±) : (Formula Œ±) ‚Üí Type _
  | maxm {œÜ}      : œÜ ‚àà H.axiomInstances ‚Üí Deduction H œÜ
  | mdp {œÜ œà}     : Deduction H (œÜ ‚ûù œà) ‚Üí Deduction H œÜ ‚Üí Deduction H œà
  | nec {œÜ}       : Deduction H œÜ ‚Üí Deduction H (‚ñ°œÜ)
  | henkin {œÜ}    : Deduction H (‚ñ°œÜ ‚≠§ œÜ) ‚Üí Deduction H œÜ
  | imply‚ÇÅ œÜ œà    : Deduction H $ Axioms.Imply‚ÇÅ œÜ œà
  | imply‚ÇÇ œÜ œà œá  : Deduction H $ Axioms.Imply‚ÇÇ œÜ œà œá
  | ec œÜ œà        : Deduction H $ Axioms.ElimContra œÜ œà

namespace Deduction

variable {H H‚ÇÅ H‚ÇÇ : Hilbert.WithHenkinRule Œ±}

instance : Entailment (Formula Œ±) (Hilbert.WithHenkinRule Œ±) := ‚ü®Deduction‚ü©

instance : Entailment.Lukasiewicz H where
  mdp := mdp
  imply‚ÇÅ := imply‚ÇÅ
  imply‚ÇÇ := imply‚ÇÇ
  elimContra := ec

instance : Entailment.Cl H where

instance : Entailment.HasDiaDuality H := inferInstance

instance : Entailment.Necessitation H := ‚ü®nec‚ü©

instance : Entailment.HenkinRule H := ‚ü®henkin‚ü©

lemma maxm! {œÜ} (h : œÜ ‚àà H.axiomInstances) : H ‚ä¢! œÜ := ‚ü®maxm h‚ü©

noncomputable def rec!
  {motive      : (œÜ : Formula Œ±) ‚Üí H ‚ä¢! œÜ ‚Üí Sort*}
  (maxm       : ‚àÄ {œÜ}, (h : œÜ ‚àà H.axiomInstances) ‚Üí motive œÜ (maxm! h))
  (mdp        : ‚àÄ {œÜ œà}, {hpq : H ‚ä¢! œÜ ‚ûù œà} ‚Üí {hp : H ‚ä¢! œÜ} ‚Üí motive (œÜ ‚ûù œà) hpq ‚Üí motive œÜ hp ‚Üí motive œà (mdp! hpq hp))
  (nec        : ‚àÄ {œÜ}, {hp : H ‚ä¢! œÜ} ‚Üí (ihp : motive œÜ hp) ‚Üí motive (‚ñ°œÜ) (nec! hp))
  (henkin     : ‚àÄ {œÜ}, {hp : H ‚ä¢! ‚ñ°œÜ ‚≠§ œÜ} ‚Üí (ihp : motive (‚ñ°œÜ ‚≠§ œÜ) hp) ‚Üí motive œÜ (henkin! hp))
  (imply‚ÇÅ     : ‚àÄ {œÜ œà}, motive (Axioms.Imply‚ÇÅ œÜ œà) $ ‚ü®imply‚ÇÅ œÜ œà‚ü©)
  (imply‚ÇÇ     : ‚àÄ {œÜ œà œá}, motive (Axioms.Imply‚ÇÇ œÜ œà œá) $ ‚ü®imply‚ÇÇ œÜ œà œá‚ü©)
  (ec : ‚àÄ {œÜ œà}, motive (Axioms.ElimContra œÜ œà) $ ‚ü®ec œÜ œà‚ü©)
  : ‚àÄ {œÜ}, (d : H ‚ä¢! œÜ) ‚Üí motive œÜ d := by
  intro œÜ d;
  induction d.some with
  | maxm h => exact maxm h
  | mdp hpq hp ihpq ihp => exact mdp (ihpq ‚ü®hpq‚ü©) (ihp ‚ü®hp‚ü©)
  | nec hp ih => exact nec (ih ‚ü®hp‚ü©)
  | henkin hp ih => exact henkin (ih ‚ü®hp‚ü©)
  | _ => aesop;

lemma subst! {œÜ} (s) (h : H ‚ä¢! œÜ) : H ‚ä¢! œÜ‚ü¶s‚üß := by
  induction h using Deduction.rec! with
  | imply‚ÇÅ => simp;
  | imply‚ÇÇ => simp;
  | ec => simp;
  | mdp ihœÜœà ihœÜ => exact ihœÜœà ‚®Ä ihœÜ;
  | nec ihœÜ => exact nec! ihœÜ;
  | henkin ihœÜ => exact henkin! ihœÜ;
  | maxm h =>
    obtain ‚ü®œà, h, ‚ü®s', rfl‚ü©‚ü© := h;
    apply maxm!;
    use œà;
    constructor;
    . assumption;
    . use s' ‚àò s;
      simp;

end Deduction

section

open Deduction

variable {H : Hilbert.WithHenkinRule Œ±} [DecidableEq Œ±]

class HasK (H : Hilbert.WithHenkinRule Œ±) where
  p : Œ±
  q : Œ±
  ne_pq : p ‚â† q := by trivial;
  mem_K : Axioms.K (.atom p) (.atom q) ‚àà H.axioms := by tauto;

instance [hK : H.HasK] : Entailment.HasAxiomK H where
  K œÜ œà := by
    apply maxm;
    use Axioms.K (.atom hK.p) (.atom hK.q);
    constructor;
    . exact hK.mem_K;
    . use (Œª b => if hK.p = b then œÜ else if hK.q = b then œà else (.atom b));
      simp [hK.ne_pq];

class HasFour (H : Hilbert.WithHenkinRule Œ±) where
  p : Œ±
  mem_Four : Axioms.Four (.atom p) ‚àà H.axioms := by tauto;

instance [hFour : H.HasFour] : Entailment.HasAxiomFour H where
  Four œÜ := by
    apply maxm;
    use Axioms.Four (.atom hFour.p);
    constructor;
    . exact hFour.mem_Four;
    . use (Œª b => if hFour.p = b then œÜ else (.atom b));
      simp;

end

end WithHenkinRule


protected abbrev K4H : Hilbert ‚Ñï := ‚ü®{Axioms.K (.atom 0) (.atom 1), Axioms.Four (.atom 0), Axioms.H (.atom 0)}‚ü©
instance : (Hilbert.K4H).HasK where p := 0; q := 1;
instance : (Hilbert.K4H).HasFour where p := 0
instance : (Hilbert.K4H).HasH where p := 0
instance : Entailment.Modal.K4H (Hilbert.K4H) where

protected abbrev K4Loeb : Hilbert.WithLoebRule ‚Ñï := ‚ü®{Axioms.K (.atom 0) (.atom 1), Axioms.Four (.atom 0)}‚ü©
instance : (Hilbert.K4Loeb).HasK where p := 0; q := 1;
instance : (Hilbert.K4Loeb).HasFour where p := 0
instance : Entailment.Modal.K4Loeb (Hilbert.K4Loeb) where

protected abbrev K4Henkin : Hilbert.WithHenkinRule ‚Ñï := ‚ü®{Axioms.K (.atom 0) (.atom 1), Axioms.Four (.atom 0)}‚ü©
instance : (Hilbert.K4Henkin).HasK where p := 0; q := 1;
instance : (Hilbert.K4Henkin).HasFour where p := 0
instance : Entailment.Modal.K4Henkin (Hilbert.K4Henkin) where

theorem provable_GL_TFAE : [
    Hilbert.GL ‚ä¢! œÜ,
    Hilbert.K4Loeb ‚ä¢! œÜ,
    Hilbert.K4Henkin ‚ä¢! œÜ,
    Hilbert.K4H ‚ä¢! œÜ
  ].TFAE := by
  tfae_have 1 ‚Üí 2 := by
    clear * -;
    intro h;
    induction h using Hilbert.Deduction.rec! with
    | maxm h =>  rcases (by simpa using h) with (‚ü®_, rfl‚ü© | ‚ü®_, rfl‚ü©) <;> simp only [axiomK!, axiomL!];
    | mdp ihœÜœà ihœÜ => exact ihœÜœà ‚®Ä ihœÜ;
    | nec ihœÜ => exact nec! ihœÜ;
    | _ => simp;
  tfae_have 2 ‚Üí 3 := by
    clear * -;
    intro h;
    induction h using Hilbert.WithLoebRule.Deduction.rec! with
    | maxm h => apply Hilbert.WithHenkinRule.Deduction.maxm! h;
    | mdp ihœÜœà ihœÜ => exact ihœÜœà ‚®Ä ihœÜ;
    | nec ihœÜ => exact nec! ihœÜ;
    | loeb ihœÜ => exact loeb! ihœÜ;
    | _ => simp;
  tfae_have 3 ‚Üí 4 := by
    clear * -;
    intro h;
    induction h using Hilbert.WithHenkinRule.Deduction.rec! with
    | maxm h => rcases (by simpa using h) with (‚ü®_, rfl‚ü© | ‚ü®_, rfl‚ü©) <;> simp only [axiomK!, axiomFour!];
    | mdp ihœÜœà ihœÜ => exact ihœÜœà ‚®Ä ihœÜ;
    | nec ihœÜ => exact nec! ihœÜ;
    | henkin ihœÜ => exact henkin! ihœÜ;
    | _ => simp;
  tfae_have 4 ‚Üí 1 := by
    clear * -;
    intro h;
    induction h using Hilbert.Deduction.rec! with
    | maxm h => rcases (by simpa using h) with (‚ü®_, rfl‚ü© | ‚ü®_, rfl‚ü© | ‚ü®_, rfl‚ü©) <;> simp only [axiomK!, axiomFour!, axiomH!];
    | mdp ihœÜœà ihœÜ => exact ihœÜœà ‚®Ä ihœÜ;
    | nec ihœÜ => exact nec! ihœÜ;
    | _ => simp;
  tfae_finish;

end Hilbert

end LO.Modal
