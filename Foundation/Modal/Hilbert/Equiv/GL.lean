import Foundation.Modal.Hilbert.WeakerThan.K4_GL


namespace LO.System

open FiniteContext

variable {S F : Type*} [BasicModalLogicalConnective F] [DecidableEq F] [System F S]
variable {ùì¢ : S}

protected class K4Loeb (ùì¢ : S) extends System.K4 ùì¢, LoebRule ùì¢

namespace K4Loeb

variable [System.K4Loeb ùì¢]

protected def axiomL : ùì¢ ‚ä¢ Axioms.L œÜ := by
  dsimp [Axioms.L];
  generalize e : ‚ñ°(‚ñ°œÜ ‚ûù œÜ) ‚ûù ‚ñ°œÜ = œà;
  have d‚ÇÅ : [‚ñ°(‚ñ°œÜ ‚ûù œÜ), ‚ñ°œà] ‚ä¢[ùì¢] ‚ñ°‚ñ°(‚ñ°œÜ ‚ûù œÜ) ‚ûù ‚ñ°‚ñ°œÜ := FiniteContext.weakening (by aesop) $ deductInv' axiomK;
  have d‚ÇÇ : [‚ñ°(‚ñ°œÜ ‚ûù œÜ), ‚ñ°œà] ‚ä¢[ùì¢] ‚ñ°‚ñ°œÜ ‚ûù ‚ñ°œÜ := FiniteContext.weakening (by aesop) $ deductInv' axiomK;
  have d‚ÇÉ : ùì¢ ‚ä¢ ‚ñ°(‚ñ°œÜ ‚ûù œÜ) ‚ûù ‚ñ°‚ñ°(‚ñ°œÜ ‚ûù œÜ) := axiomFour;
  have : ùì¢ ‚ä¢ ‚ñ°œà ‚ûù œà := by
    nth_rw 2 [‚Üêe]; apply deduct'; apply deduct;
    exact d‚ÇÇ ‚®Ä (d‚ÇÅ ‚®Ä ((of d‚ÇÉ) ‚®Ä (FiniteContext.byAxm)));
  exact loeb this;
instance : HasAxiomL ùì¢ := ‚ü®fun _ ‚Ü¶ K4Loeb.axiomL‚ü©

end K4Loeb


protected class K4Henkin (ùì¢ : S) extends System.K4 ùì¢, HenkinRule ùì¢

namespace K4Henkin

variable [System.K4Henkin ùì¢]

instance : LoebRule ùì¢ where
  loeb h := h ‚®Ä (henkin $ iffIntro (axiomK' $ nec h) axiomFour);

end K4Henkin


protected class K4H (ùì¢ : S) extends System.K4 ùì¢, HasAxiomH ùì¢

namespace K4H

variable [System.K4H ùì¢]

instance : HenkinRule ùì¢ where
  henkin h := (and‚ÇÅ' h) ‚®Ä (axiomH ‚®Ä nec h);

end K4H

end LO.System


namespace LO.Modal.Hilbert

open System

section

protected abbrev K4H (Œ±) : Hilbert Œ± := Hilbert.ExtK $ ùü∞ ‚à™ ùóõ
instance : System.K4H (Hilbert.K4H Œ±) where
  Four _ := Deduction.maxm $ Set.mem_of_subset_of_mem (by rfl) (by simp)
  H _ := Deduction.maxm $ Set.mem_of_subset_of_mem (by rfl) (by simp)

protected abbrev K4Loeb (Œ±) : Hilbert Œ± := ‚ü®ùóû ‚à™ ùü∞, ‚üÆNec‚üØ ‚à™ ‚üÆLoeb‚üØ‚ü©
instance : (Hilbert.K4Loeb Œ±).HasAxiomK where
instance : (Hilbert.K4Loeb Œ±).HasNecessitation where
instance : (Hilbert.K4Loeb Œ±).HasLoebRule where
instance : System.K4Loeb (Hilbert.K4Loeb Œ±) where
  Four _ := Deduction.maxm $ Set.mem_of_subset_of_mem (by rfl) (by simp)

protected abbrev K4Henkin (Œ±) : Hilbert Œ± := ‚ü®ùóû ‚à™ ùü∞, ‚üÆNec‚üØ ‚à™ ‚üÆHenkin‚üØ‚ü©
instance : (Hilbert.K4Henkin Œ±).HasAxiomK  where
instance : (Hilbert.K4Henkin Œ±).HasNecessitation where
instance : (Hilbert.K4Henkin Œ±).HasHenkinRule where
instance : System.K4Henkin (Hilbert.K4Henkin Œ±) where
  Four _ := Deduction.maxm $ Set.mem_of_subset_of_mem (by rfl) (by simp)

end

variable [DecidableEq Œ±]

lemma GL_weakerThan_K4Loeb : (Hilbert.GL Œ±) ‚â§‚Çõ (Hilbert.K4Loeb Œ±) := by
  apply System.weakerThan_iff.mpr;
  intro œÜ h;
  induction h using Deduction.inducition_with_necOnly! with
  | hMaxm hp =>
    rcases hp with (hK | hL)
    . obtain ‚ü®_, _, rfl‚ü© := hK; exact axiomK!;
    . obtain ‚ü®_, rfl‚ü© := hL; exact axiomL!;
  | hMdp ihpq ihp => exact ihpq ‚®Ä ihp;
  | hNec ihp => exact nec! ihp;
  | hImply‚ÇÅ => exact imply‚ÇÅ!;
  | hImply‚ÇÇ => exact imply‚ÇÇ!;
  | hElimContra => exact elim_contra!

lemma K4Loeb_weakerThan_K4Henkin : (Hilbert.K4Loeb Œ±) ‚â§‚Çõ (Hilbert.K4Henkin Œ±) := by
  apply System.weakerThan_iff.mpr;
  intro œÜ h;
  induction h using Deduction.inducition! with
  | hMaxm hp =>
    rcases hp with (hK | hFour)
    . obtain ‚ü®_, _, rfl‚ü© := hK; exact axiomK!;
    . obtain ‚ü®_, rfl‚ü© := hFour; exact axiomFour!;
  | hMdp ihpq ihp => exact ihpq ‚®Ä ihp;
  | hRules rl hrl hant ihp =>
    rcases hrl with (hNec | hLoeb);
    . obtain ‚ü®œÜ, rfl‚ü© := hNec; exact nec! $ ihp $ by simp_all only [List.mem_singleton, forall_eq];
    . obtain ‚ü®œÜ, rfl‚ü© := hLoeb; exact loeb! $ ihp $ by simp_all only [List.mem_singleton, forall_eq];
  | hImply‚ÇÅ => exact imply‚ÇÅ!;
  | hImply‚ÇÇ => exact imply‚ÇÇ!;
  | hElimContra => exact elim_contra!

lemma K4Henkin_weakerThan_K4H : (Hilbert.K4Henkin Œ±) ‚â§‚Çõ (Hilbert.K4H Œ±) := by
  apply System.weakerThan_iff.mpr;
  intro œÜ h;
  induction h using Deduction.inducition! with
  | hMaxm hp =>
    rcases hp with (hK | hFour)
    . obtain ‚ü®_, _, rfl‚ü© := hK; exact axiomK!;
    . obtain ‚ü®_, rfl‚ü© := hFour; exact axiomFour!;
  | hMdp ihpq ihp => exact ihpq ‚®Ä ihp;
  | hRules rl hrl hant ihp =>
    rcases hrl with (hNec | hHenkin);
    . obtain ‚ü®œÜ, rfl‚ü© := hNec; exact nec! $ ihp $ by simp_all only [List.mem_singleton, forall_eq];
    . obtain ‚ü®œÜ, rfl‚ü© := hHenkin; exact henkin! $ ihp $ by simp_all only [List.mem_singleton, forall_eq];
  | hImply‚ÇÅ => exact imply‚ÇÅ!;
  | hImply‚ÇÇ => exact imply‚ÇÇ!;
  | hElimContra => exact elim_contra!

lemma K4Henkin_weakerThan_GL : (Hilbert.K4H Œ±) ‚â§‚Çõ (Hilbert.GL Œ±) := by
  apply normal_weakerThan_of_maxm;
  intro œÜ hp;
  rcases hp with hK | hFour | hH
  . obtain ‚ü®_, _, rfl‚ü© := hK; exact axiomK!;
  . obtain ‚ü®_, _, rfl‚ü© := hFour; exact axiomFour!;
  . obtain ‚ü®_, _, rfl‚ü© := hH; exact axiomH!;


theorem GL_equiv_K4Loeb : (Hilbert.GL Œ±) =‚Çõ (Hilbert.K4Loeb Œ±) := by
  apply Equiv.antisymm_iff.mpr;
  constructor;
  . exact GL_weakerThan_K4Loeb;
  . exact WeakerThan.trans (K4Loeb_weakerThan_K4Henkin) $ WeakerThan.trans K4Henkin_weakerThan_K4H K4Henkin_weakerThan_GL


end LO.Modal.Hilbert
