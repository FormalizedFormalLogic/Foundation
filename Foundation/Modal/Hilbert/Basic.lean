import Foundation.Modal.Formula
import Foundation.Modal.System.K
import Foundation.Logic.HilbertStyle.Lukasiewicz

namespace LO.Modal

open System

variable {Œ± : Type*}

section

/-- instance of inference rule -/
structure Hilbert.InferenceRule (Œ± : Type*) where
  antecedents : List (Formula Œ±)
  consequence : Formula Œ±
  /--
  Empty antecedent rule can be simply regarded as axiom rule.
  However, union of all these rules including to `Hilbert.rules` would be too complex for implementation and induction,
  so more than one antecedent is required.
  -/
  antecedents_nonempty : antecedents ‚â† [] := by simp

namespace Hilbert.InferenceRule

abbrev Necessitation (œÜ : Formula Œ±) : InferenceRule Œ± := ‚ü®[œÜ], ‚ñ°œÜ, by simp‚ü©
abbrev Necessitation.set : Set (InferenceRule Œ±) := { Necessitation œÜ | œÜ }
notation "‚üÆNec‚üØ" => Necessitation.set

abbrev LoebRule (œÜ : Formula Œ±) : InferenceRule Œ± := ‚ü®[‚ñ°œÜ ‚ûù œÜ], œÜ, by simp‚ü©
abbrev LoebRule.set : Set (InferenceRule Œ±) := { LoebRule œÜ | œÜ }
notation "‚üÆLoeb‚üØ" => LoebRule.set

abbrev HenkinRule (œÜ : Formula Œ±) : InferenceRule Œ± := ‚ü®[‚ñ°œÜ ‚≠§ œÜ], œÜ, by simp‚ü©
abbrev HenkinRule.set : Set (InferenceRule Œ±) := { HenkinRule œÜ | œÜ }
notation "‚üÆHenkin‚üØ" => HenkinRule.set

end Hilbert.InferenceRule

end


structure Hilbert (Œ± : Type*) where
  axioms : FormulaSet Œ±
  rules : Set (Hilbert.InferenceRule Œ±)


variable {H H‚ÇÅ H‚ÇÇ : Hilbert Œ±}

inductive Hilbert.Deduction (H : Hilbert Œ±) : (Formula Œ±) ‚Üí Type _
  | maxm {œÜ}     : œÜ ‚àà H.axioms ‚Üí Deduction H œÜ
  | rule {rl}    : rl ‚àà H.rules ‚Üí (‚àÄ {œÜ}, œÜ ‚àà rl.antecedents ‚Üí Deduction H œÜ) ‚Üí Deduction H rl.consequence
  | mdp {œÜ œà}    : Deduction H (œÜ ‚ûù œà) ‚Üí Deduction H œÜ ‚Üí Deduction H œà
  | imply‚ÇÅ œÜ œà   : Deduction H $ Axioms.Imply‚ÇÅ œÜ œà
  | imply‚ÇÇ œÜ œà œá : Deduction H $ Axioms.Imply‚ÇÇ œÜ œà œá
  | ec œÜ œà       : Deduction H $ Axioms.ElimContra œÜ œà

namespace Hilbert.Deduction

instance : System (Formula Œ±) (Hilbert Œ±) := ‚ü®Deduction‚ü©

instance : System.Lukasiewicz H where
  mdp := mdp
  imply‚ÇÅ := imply‚ÇÅ
  imply‚ÇÇ := imply‚ÇÇ
  elim_contra := ec

instance : System.Classical H where

instance : System.HasDiaDuality H := inferInstance

lemma maxm! {œÜ} (h : œÜ ‚àà H.axioms) : H ‚ä¢! œÜ := ‚ü®maxm h‚ü©

end Hilbert.Deduction


namespace Hilbert

open Deduction

class HasNecessitation (H : Hilbert Œ±) where
  has_necessitation : ‚üÆNec‚üØ ‚äÜ H.rules := by aesop

instance [HasNecessitation H] : System.Necessitation H where
  nec := @Œª œÜ d => rule (show { antecedents := [œÜ], consequence := ‚ñ°œÜ } ‚àà H.rules by apply HasNecessitation.has_necessitation; simp_all) (by aesop);


class HasLoebRule (H : Hilbert Œ±) where
  has_loeb : ‚üÆLoeb‚üØ ‚äÜ H.rules := by aesop

instance [HasLoebRule H] : System.LoebRule H where
  loeb := @Œª œÜ d => rule (show { antecedents := [‚ñ°œÜ ‚ûù œÜ], consequence := œÜ } ‚àà H.rules by apply HasLoebRule.has_loeb; simp_all) (by aesop);


class HasHenkinRule (H : Hilbert Œ±) where
  has_henkin : ‚üÆHenkin‚üØ ‚äÜ H.rules := by aesop

instance [HasHenkinRule H] : System.HenkinRule H where
  henkin := @Œª œÜ d => rule (show { antecedents := [‚ñ°œÜ ‚≠§ œÜ], consequence := œÜ } ‚àà H.rules by apply HasHenkinRule.has_henkin; simp_all) (by aesop);


class HasNecOnly (H : Hilbert Œ±) where
  has_necessitation_only : H.rules = ‚üÆNec‚üØ := by rfl

instance [h : HasNecOnly H] : H.HasNecessitation where
  has_necessitation := by rw [h.has_necessitation_only]


class HasAxiomK (H : Hilbert Œ±) where
  has_axiomK : ùóû ‚äÜ H.axioms := by aesop

instance [HasAxiomK H] : System.HasAxiomK H where
  K _ _ := maxm (by apply HasAxiomK.has_axiomK; simp_all)

class IsNormal (H : Hilbert Œ±) extends H.HasNecOnly, H.HasAxiomK where

instance {H : Hilbert Œ±} [H.IsNormal] : System.K H where


namespace Deduction

variable {H : Hilbert Œ±}

noncomputable def inducition!
  {motive  : (œÜ : Formula Œ±) ‚Üí H ‚ä¢! œÜ ‚Üí Sort*}
  (hRules  : (r : InferenceRule Œ±) ‚Üí (hr : r ‚àà H.rules) ‚Üí
             (hant : ‚àÄ {œÜ}, œÜ ‚àà r.antecedents ‚Üí H ‚ä¢! œÜ) ‚Üí
             (ih : ‚àÄ {œÜ}, (hp : œÜ ‚àà r.antecedents) ‚Üí
             motive œÜ (hant hp)) ‚Üí motive r.consequence ‚ü®rule hr (Œª hp => (hant hp).some)‚ü©)
  (hMaxm     : ‚àÄ {œÜ}, (h : œÜ ‚àà H.axioms) ‚Üí motive œÜ ‚ü®maxm h‚ü©)
  (hMdp      : ‚àÄ {œÜ œà}, {hpq : H ‚ä¢! œÜ ‚ûù œà} ‚Üí {hp : H ‚ä¢! œÜ} ‚Üí motive (œÜ ‚ûù œà) hpq ‚Üí motive œÜ hp ‚Üí motive œà ‚ü®mdp hpq.some hp.some‚ü©)
  (hImply‚ÇÅ     : ‚àÄ {œÜ œà}, motive (œÜ ‚ûù œà ‚ûù œÜ) $ ‚ü®imply‚ÇÅ œÜ œà‚ü©)
  (hImply‚ÇÇ     : ‚àÄ {œÜ œà œá}, motive ((œÜ ‚ûù œà ‚ûù œá) ‚ûù (œÜ ‚ûù œà) ‚ûù œÜ ‚ûù œá) $ ‚ü®imply‚ÇÇ œÜ œà œá‚ü©)
  (hElimContra : ‚àÄ {œÜ œà}, motive (Axioms.ElimContra œÜ œà) $ ‚ü®ec œÜ œà‚ü©)
  : ‚àÄ {œÜ}, (d : H ‚ä¢! œÜ) ‚Üí motive œÜ d := by
  intro œÜ d;
  induction d.some with
  | maxm h => exact hMaxm h
  | mdp hpq hp ihpq ihp => exact hMdp (ihpq ‚ü®hpq‚ü©) (ihp ‚ü®hp‚ü©)
  | rule hr h ih => apply hRules _ hr; intro œÜ hp; exact ih hp ‚ü®h hp‚ü©;
  | imply‚ÇÅ => exact hImply‚ÇÅ
  | imply‚ÇÇ => exact hImply‚ÇÇ
  | ec => exact hElimContra

/-- Useful induction for normal modal logic. -/
noncomputable def inducition_with_necOnly! [H.HasNecOnly]
  {motive  : (œÜ : Formula Œ±) ‚Üí H ‚ä¢! œÜ ‚Üí Prop}
  (hMaxm   : ‚àÄ {œÜ}, (h : œÜ ‚àà H.axioms) ‚Üí motive œÜ ‚ü®maxm h‚ü©)
  (hMdp    : ‚àÄ {œÜ œà}, {hpq : H ‚ä¢! œÜ ‚ûù œà} ‚Üí {hp : H ‚ä¢! œÜ} ‚Üí motive (œÜ ‚ûù œà) hpq ‚Üí motive œÜ hp ‚Üí motive œà (hpq ‚®Ä hp))
  (hNec    : ‚àÄ {œÜ}, {hp : H ‚ä¢! œÜ} ‚Üí (ihp : motive œÜ hp) ‚Üí motive (‚ñ°œÜ) (System.nec! hp))
  (hImply‚ÇÅ   : ‚àÄ {œÜ œà}, motive (œÜ ‚ûù œà ‚ûù œÜ) $ ‚ü®imply‚ÇÅ œÜ œà‚ü©)
  (hImply‚ÇÇ   : ‚àÄ {œÜ œà œá}, motive ((œÜ ‚ûù œà ‚ûù œá) ‚ûù (œÜ ‚ûù œà) ‚ûù œÜ ‚ûù œá) $ ‚ü®imply‚ÇÇ œÜ œà œá‚ü©)
  (hElimContra : ‚àÄ {œÜ œà}, motive (Axioms.ElimContra œÜ œà) $ ‚ü®ec œÜ œà‚ü©)
  : ‚àÄ {œÜ}, (d : H ‚ä¢! œÜ) ‚Üí motive œÜ d := by
  intro œÜ d;
  induction d using Deduction.inducition! with
  | hMaxm h => exact hMaxm h
  | hMdp ihpq ihp => exact hMdp (ihpq) (ihp);
  | hRules rl hrl hant ih =>
    rw [HasNecOnly.has_necessitation_only] at hrl;
    obtain ‚ü®œÜ, rfl‚ü© := hrl;
    exact @hNec œÜ (hant (by simp)) $ ih (by simp);
  | hImply‚ÇÅ => exact hImply‚ÇÅ
  | hImply‚ÇÇ => exact hImply‚ÇÇ
  | hElimContra => exact hElimContra

end Deduction

variable {H H‚ÇÅ H‚ÇÇ : Hilbert Œ±}

abbrev theorems (H : Hilbert Œ±) := System.theory H

abbrev Consistent (H : Hilbert Œ±) := System.Consistent H

lemma normal_weakerThan_of_maxm [H‚ÇÅ.IsNormal] [H‚ÇÇ.IsNormal]
  (hMaxm : ‚àÄ {œÜ : Formula Œ±}, œÜ ‚àà H‚ÇÅ.axioms ‚Üí H‚ÇÇ ‚ä¢! œÜ)
  : H‚ÇÅ ‚â§‚Çõ H‚ÇÇ := by
  apply System.weakerThan_iff.mpr;
  intro œÜ h;
  induction h using Deduction.inducition_with_necOnly! with
  | hMaxm hp => exact hMaxm hp;
  | hMdp ihpq ihp => exact ihpq ‚®Ä ihp;
  | hNec ihp => exact nec! ihp;
  | hImply‚ÇÅ => exact imply‚ÇÅ!;
  | hImply‚ÇÇ => exact imply‚ÇÇ!;
  | hElimContra => exact elim_contra!

lemma normal_weakerThan_of_subset [H‚ÇÅ.IsNormal] [H‚ÇÇ.IsNormal] (hSubset : H‚ÇÅ.axioms ‚äÜ H‚ÇÇ.axioms)
  : H‚ÇÅ ‚â§‚Çõ H‚ÇÇ := by
  apply normal_weakerThan_of_maxm;
  intro œÜ hp;
  exact ‚ü®Deduction.maxm $ hSubset hp‚ü©;

end Hilbert

end LO.Modal
