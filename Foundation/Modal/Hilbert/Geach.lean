import Foundation.Modal.Hilbert.Systems


namespace LO.Modal

variable {Ax : Theory Œ±}

open System

protected abbrev Hilbert.Geach (Œ±) (l : List GeachConfluent.Taple) : Hilbert Œ± := Hilbert.ExtK (ùóöùó≤(l))

abbrev Hilbert.IsGeach (L : Hilbert Œ±) (ts : List GeachConfluent.Taple) : Prop := L = Hilbert.Geach _ ts


namespace Hilbert.IsGeach

lemma ax {H : Hilbert Œ±} (geach : H.IsGeach ts) : H.axioms = (ùóû ‚à™ ùóöùó≤(ts)) := by simp_all;

end Hilbert.IsGeach


namespace Hilbert

instance K.is_geach : (Hilbert.K Œ±).IsGeach [] := by simp;

instance K4.is_geach : (Hilbert.K4 Œ±).IsGeach [‚ü®0, 2, 1, 0‚ü©] := by simp;

instance K45.is_geach : (Hilbert.K45 Œ±).IsGeach [‚ü®0, 2, 1, 0‚ü©, ‚ü®1, 1, 0, 1‚ü©] := by simp;

instance K5.is_geach : (Hilbert.K5 Œ±).IsGeach [‚ü®1, 1, 0, 1‚ü©] := by simp;

instance KB4.is_geach : (Hilbert.KB4 Œ±).IsGeach [‚ü®0, 1, 0, 1‚ü©, ‚ü®0, 2, 1, 0‚ü©] := by simp;

instance KB5.is_geach : (Hilbert.KB5 Œ±).IsGeach [‚ü®0, 1, 0, 1‚ü©, ‚ü®1, 1, 0, 1‚ü©] := by simp;

instance KD.is_geach : (Hilbert.KD Œ±).IsGeach [‚ü®0, 0, 1, 1‚ü©] := by simp;

instance KB.is_geach : (Hilbert.KB Œ±).IsGeach [‚ü®0, 1, 0, 1‚ü©] := by simp;

instance KD4.is_geach : (Hilbert.KD4 Œ±).IsGeach [‚ü®0, 0, 1, 1‚ü©, ‚ü®0, 2, 1, 0‚ü©] := by simp;

instance KD45.is_geach : (Hilbert.KD45 Œ±).IsGeach [‚ü®0, 0, 1, 1‚ü©,  ‚ü®0, 2, 1, 0‚ü©, ‚ü®1, 1, 0, 1‚ü©] := by simp [Set.union_assoc];

instance KD5.is_geach : (Hilbert.KD5 Œ±).IsGeach [‚ü®0, 0, 1, 1‚ü©, ‚ü®1, 1, 0, 1‚ü©] := by simp;

instance KDB.is_geach : (Hilbert.KDB Œ±).IsGeach [‚ü®0, 0, 1, 1‚ü©, ‚ü®0, 1, 0, 1‚ü©] := by simp;

instance KT.is_geach : (Hilbert.KT Œ±).IsGeach [‚ü®0, 0, 1, 0‚ü©] := by simp;

instance KT4B.is_geach : (Hilbert.KT4B Œ±).IsGeach [‚ü®0, 0, 1, 0‚ü©, ‚ü®0, 2, 1, 0‚ü©, ‚ü®0, 1, 0, 1‚ü©] := by simp [Set.union_assoc];

instance KTB.is_geach : (Hilbert.KTB Œ±).IsGeach [‚ü®0, 0, 1, 0‚ü©, ‚ü®0, 1, 0, 1‚ü©] := by simp;

instance S4.is_geach : (Hilbert.S4 Œ±).IsGeach [‚ü®0, 0, 1, 0‚ü©, ‚ü®0, 2, 1, 0‚ü©] := by simp;

instance S4Dot2.is_geach : (Hilbert.S4Dot2 Œ±).IsGeach [‚ü®0, 0, 1, 0‚ü©, ‚ü®0, 2, 1, 0‚ü©, ‚ü®1, 1, 1, 1‚ü©] := by simp [Set.union_assoc];

instance S5.is_geach : (Hilbert.S5 Œ±).IsGeach [‚ü®0, 0, 1, 0‚ü©, ‚ü®1, 1, 0, 1‚ü©] := by simp;

instance Triv.is_geach : (Hilbert.Triv Œ±).IsGeach [‚ü®0, 0, 1, 0‚ü©, ‚ü®0, 1, 0, 0‚ü©] := by simp;

end Hilbert

end LO.Modal
