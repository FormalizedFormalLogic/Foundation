import Foundation.Logic.HilbertStyle.Lukasiewicz
import Foundation.Vorspiel.Collection
import Foundation.Modal.System

namespace LO.Modal

inductive Formula (Œ± : Type u) : Type u where
  | atom   : Œ± ‚Üí Formula Œ±
  | falsum : Formula Œ±
  | imp    : Formula Œ± ‚Üí Formula Œ± ‚Üí Formula Œ±
  | box    : Formula Œ± ‚Üí Formula Œ±
  deriving DecidableEq

namespace Formula

abbrev neg (p : Formula Œ±) : Formula Œ± := imp p falsum

abbrev verum : Formula Œ± := imp falsum falsum

abbrev top : Formula Œ± := imp falsum falsum

abbrev or (p q : Formula Œ±) : Formula Œ± := imp (neg p) q

abbrev and (p q : Formula Œ±) : Formula Œ± := neg (imp p (neg q))

abbrev dia (p : Formula Œ±) : Formula Œ± := neg (box (neg p))

variable {Œ± : Type u}

instance : BasicModalLogicalConnective (Formula Œ±) where
  tilde := neg
  arrow := imp
  wedge := and
  vee := or
  top := verum
  bot := falsum
  box := box
  dia := dia

instance : LukasiewiczAbbrev (Formula Œ±) where
  top := rfl
  neg := rfl
  or := rfl
  and := rfl
instance : DiaAbbrev (Formula Œ±) := ‚ü®rfl‚ü©

section ToString

variable [ToString Œ±]

def toStr : Formula Œ± ‚Üí String
  -- | ‚ä§       => "\\top"
  | ‚ä•       => "\\bot"
  | atom a  => "{" ++ toString a ++ "}"
  | ‚ñ°p      => "\\Box " ++ toStr p
  -- | ‚óáp      => "\\Diamond " ++ toStr p
  | p ‚ûù q   => "\\left(" ++ toStr p ++ " \\to " ++ toStr q ++ "\\right)"
  -- | p ‚ãè q   => "\\left(" ++ toStr p ++ " \\land " ++ toStr q ++ "\\right)"
  -- | p ‚ãé q   => "\\left(" ++ toStr p ++ " \\lor "   ++ toStr q ++ "\\right)"

instance : Repr (Formula Œ±) := ‚ü®fun t _ => toStr t‚ü©

instance : ToString (Formula Œ±) := ‚ü®toStr‚ü©

instance : Coe Œ± (Formula Œ±) := ‚ü®atom‚ü©

end ToString

-- @[simp] lemma neg_top : ‚àº(‚ä§ : Formula Œ±) = ‚ä• := rfl

@[simp] lemma neg_bot : ‚àº(‚ä• : Formula Œ±) = ‚ä§ := rfl

-- @[simp] lemma neg_atom (a : Œ±) : ‚àº(atom a) = natom a := rfl

-- @[simp] lemma neg_natom (a : Œ±) : ‚àº(natom a) = atom a := rfl

-- @[simp] lemma neg_and (p q : Formula Œ±) : ‚àº(p ‚ãè q) = ‚àºp ‚ãé ‚àºq := rfl

-- @[simp] lemma neg_or (p q : Formula Œ±) : ‚àº(p ‚ãé q) = ‚àºp ‚ãè ‚àºq := rfl

-- @[simp] lemma neg_neg' (p : Formula Œ±) : ‚àº‚àºp = p := neg_neg p

-- @[simp] lemma neg_box (p : Formula Œ±) : ‚àº(‚ñ°p) = ‚óá(‚àºp) := rfl

-- @[simp] lemma neg_dia (p : Formula Œ±) : ‚àº(‚óáp) = ‚ñ°(‚àºp) := rfl

/-
@[simp] lemma neg_inj (p q : Formula Œ±) : ‚àºp = ‚àºq ‚Üî p = q := by
  constructor
  ¬∑ intro h; simpa using congr_arg (‚àº¬∑) h
  ¬∑ exact congr_arg _
-/

lemma or_eq (p q : Formula Œ±) : or p q = p ‚ãé q := rfl

lemma and_eq (p q : Formula Œ±) : and p q = p ‚ãè q := rfl

lemma imp_eq (p q : Formula Œ±) : imp p q = p ‚ûù q := rfl

lemma neg_eq (p : Formula Œ±) : neg p = ‚àºp := rfl

lemma box_eq (p : Formula Œ±) : box p = ‚ñ°p := rfl

lemma dia_eq (p : Formula Œ±) : dia p = ‚óáp := rfl

lemma iff_eq (p q : Formula Œ±) : p ‚≠§ q = (p ‚ûù q) ‚ãè (q ‚ûù p) := rfl

lemma falsum_eq : (falsum : Formula Œ±) = ‚ä• := rfl

@[simp] lemma and_inj (p‚ÇÅ q‚ÇÅ p‚ÇÇ q‚ÇÇ : Formula Œ±) : p‚ÇÅ ‚ãè p‚ÇÇ = q‚ÇÅ ‚ãè q‚ÇÇ ‚Üî p‚ÇÅ = q‚ÇÅ ‚àß p‚ÇÇ = q‚ÇÇ := by simp[Wedge.wedge]

@[simp] lemma or_inj (p‚ÇÅ q‚ÇÅ p‚ÇÇ q‚ÇÇ : Formula Œ±) : p‚ÇÅ ‚ãé p‚ÇÇ = q‚ÇÅ ‚ãé q‚ÇÇ ‚Üî p‚ÇÅ = q‚ÇÅ ‚àß p‚ÇÇ = q‚ÇÇ := by simp[Vee.vee]

@[simp] lemma imp_inj (p‚ÇÅ q‚ÇÅ p‚ÇÇ q‚ÇÇ : Formula Œ±) : p‚ÇÅ ‚ûù p‚ÇÇ = q‚ÇÅ ‚ûù q‚ÇÇ ‚Üî p‚ÇÅ = q‚ÇÅ ‚àß p‚ÇÇ = q‚ÇÇ := by simp[Arrow.arrow]

@[simp] lemma neg_inj (p q : Formula Œ±) : ‚àºp = ‚àºq ‚Üî p = q := by simp [NegAbbrev.neg];

/-
instance : ModalDeMorgan (Formula Œ±) where
  verum := rfl
  falsum := rfl
  and := by simp
  or := by simp
  imply := by simp[imp_eq]
  neg := by simp
  dia := by simp
  box := by simp
-/

/-- Formula complexity -/
def complexity : Formula Œ± ‚Üí ‚Ñï
| atom _  => 0
| ‚ä•       => 0
| p ‚ûù q   => max p.complexity q.complexity + 1
| ‚ñ°p   => p.complexity + 1

/-- Max numbers of `‚ñ°` -/
def degree : Formula Œ± ‚Üí Nat
  | atom _ => 0
  | ‚ä• => 0
  | p ‚ûù q => max p.degree q.degree
  | ‚ñ°p => p.degree + 1

@[simp] lemma degree_neg (p : Formula Œ±) : degree (‚àºp) = degree p := by induction p <;> simp_all [degree, neg, neg_eq]
@[simp] lemma degree_imp (p q : Formula Œ±) : degree (p ‚ûù q) = max (degree p) (degree q) := by simp [degree, imp_eq]

@[elab_as_elim]
def cases' {C : Formula Œ± ‚Üí Sort w}
    (hfalsum : C ‚ä•)
    (hatom   : ‚àÄ a : Œ±, C (atom a))
    (himp     : ‚àÄ (p q : Formula Œ±), C (p ‚ûù q))
    (hbox    : ‚àÄ (p : Formula Œ±), C (‚ñ°p))
    : (p : Formula Œ±) ‚Üí C p
  | ‚ä•       => hfalsum
  | atom a  => hatom a
  | ‚ñ°p      => hbox p
  | p ‚ûù q   => himp p q

@[elab_as_elim]
def rec' {C : Formula Œ± ‚Üí Sort w}
  (hfalsum : C ‚ä•)
  (hatom   : ‚àÄ a : Œ±, C (atom a))
  (himp    : ‚àÄ (p q : Formula Œ±), C p ‚Üí C q ‚Üí C (p ‚ûù q))
  (hbox    : ‚àÄ (p : Formula Œ±), C p ‚Üí C (‚ñ°p))
  : (p : Formula Œ±) ‚Üí C p
  | ‚ä•      => hfalsum
  | atom a => hatom a
  | p ‚ûù q  => himp p q (rec' hfalsum hatom himp hbox p) (rec' hfalsum hatom himp hbox q)
  | ‚ñ°p     => hbox p (rec' hfalsum hatom himp hbox p)

-- @[simp] lemma complexity_neg (p : Formula Œ±) : complexity (‚àºp) = p.complexity + 1 :=
--   by induction p using rec' <;> try { simp[neg_eq, neg, *]; rfl;}

section Decidable

variable [DecidableEq Œ±]

def hasDecEq : (p q : Formula Œ±) ‚Üí Decidable (p = q)
  | ‚ä•, q => by
    cases q using cases' <;>
    { simp; try { exact isFalse not_false }; try { exact isTrue trivial } }
  | atom a, q => by
    cases q <;> try { simp; exact isFalse not_false }
    simp; exact decEq _ _;
  | p ‚ûù q, r => by
    cases r using cases' <;> try { simp; exact isFalse not_false }
    case himp p' q' =>
      exact match hasDecEq p p' with
      | isTrue hp =>
        match hasDecEq q q' with
        | isTrue hq  => isTrue (hp ‚ñ∏ hq ‚ñ∏ rfl)
        | isFalse hq => isFalse (by simp[hp, hq])
      | isFalse hp => isFalse (by simp[hp])
  | ‚ñ°p, q => by
    cases q <;> try { simp; exact isFalse not_false }
    case box p' =>
      exact match hasDecEq p p' with
      | isTrue hp  => isTrue (hp ‚ñ∏ rfl)
      | isFalse hp => isFalse (by simp[hp, box_eq])
instance : DecidableEq (Formula Œ±) := hasDecEq


end Decidable

def isBox : Formula Œ± ‚Üí Bool
  | box _ => true
  | _  => false


end Formula

abbrev Formulae (Œ±) := Finset (Formula Œ±)

abbrev Theory (Œ±) := Set (Formula Œ±)
instance : Collection (Formula Œ±) (Theory Œ±) := inferInstance

section Subformula

def Formula.subformulae [DecidableEq Œ±] : Formula Œ± ‚Üí Formulae Œ±
  | atom a => {(atom a)}
  | ‚ä•      => {‚ä•}
  | p ‚ûù q  => insert (p ‚ûù q) (p.subformulae ‚à™ q.subformulae)
  | ‚ñ°p     => insert (‚ñ°p) p.subformulae

namespace Formula.subformulae

variable [DecidableEq Œ±]

@[simp] lemma mem_self {p : Formula Œ±} : p ‚àà p.subformulae := by induction p <;> { simp [subformulae]; try tauto; }

variable {p q r : Formula Œ±}

lemma mem_imp (h : (q ‚ûù r) ‚àà p.subformulae) : q ‚àà p.subformulae ‚àß r ‚àà p.subformulae := by
  induction p using Formula.rec' with
  | himp => simp_all [subformulae]; rcases h with ‚ü®_‚ü© | ‚ü®‚ü®_‚ü© | ‚ü®_‚ü©‚ü© <;> simp_all
  | _ => simp_all [subformulae];

lemma mem_imp‚ÇÅ (h : (q ‚ûù r) ‚àà p.subformulae) : q ‚àà p.subformulae := mem_imp h |>.1

lemma mem_imp‚ÇÇ (h : (q ‚ûù r) ‚àà p.subformulae) : r ‚àà p.subformulae := mem_imp h |>.2

lemma mem_box (h : ‚ñ°q ‚àà p.subformulae := by assumption) : q ‚àà p.subformulae := by
  induction p using Formula.rec' <;> {
    simp_all [subformulae];
    try rcases h with (hq | hr); simp_all; simp_all;
  };

-- TODO: add tactic like `subformulae`.
attribute [aesop safe 5 forward]
  mem_imp‚ÇÅ
  mem_imp‚ÇÇ
  mem_box

@[simp]
lemma complexity_lower (h : q ‚àà p.subformulae) : q.complexity ‚â§ p.complexity  := by
  induction p using Formula.rec' with
  | himp p‚ÇÅ p‚ÇÇ ihp‚ÇÅ ihp‚ÇÇ =>
    simp_all [subformulae];
    rcases h with _ | h‚ÇÅ | h‚ÇÇ;
    . subst_vars; simp [Formula.complexity];
    . have := ihp‚ÇÅ h‚ÇÅ; simp [Formula.complexity]; omega;
    . have := ihp‚ÇÇ h‚ÇÇ; simp [Formula.complexity]; omega;
  | hbox p ihp =>
    simp_all [subformulae];
    rcases h with _ | h‚ÇÅ;
    . subst_vars; simp [Formula.complexity];
    . have := ihp h‚ÇÅ; simp [Formula.complexity]; omega;
  | hatom => simp_all [subformulae];
  | hfalsum => simp_all [subformulae, Formula.complexity];

/-
@[simp]
lemma degree_lower (h : q ‚àà p.subformulae) : q.degree ‚â§ p.degree := by
  induction p using Formula.rec' with
  | himp p‚ÇÅ p‚ÇÇ ihp‚ÇÅ ihp‚ÇÇ =>
    simp_all [subformulae];
    rcases h with rfl | h‚ÇÅ | h‚ÇÇ;
    . simp [Formula.degree];
    . have := ihp‚ÇÅ h‚ÇÅ; simp [Formula.degree]; omega;
    . have := ihp‚ÇÇ h‚ÇÇ; simp [Formula.degree]; omega;
  | hbox p ihp =>
    simp_all [subformulae];
    rcases h with _ | h‚ÇÅ;
    . subst_vars; simp [Formula.degree];
    . have := ihp h‚ÇÅ; simp [Formula.degree]; omega;
  | hatom =>
    simp_all [subformulae];
    rcases h with rfl | rfl <;> simp [Formula.degree];
  | hfalsum => simp_all [subformulae, Formula.degree];

lemma sub_of_top (h : p ‚àà ùíÆ ‚ä§) : p = ‚ä§ := by simp_all [subformulae];
lemma sub_of_bot (h : p ‚àà ùíÆ ‚ä•) : p = ‚ä• := by simp_all [subformulae];

-/


end Formula.subformulae


class Formulae.SubformulaClosed (X : Formulae Œ±) where
  imp_closed : ‚àÄ {p q}, p ‚ûù q ‚àà X ‚Üí p ‚àà X ‚àß q ‚àà X
  box_closed : ‚àÄ {p}, ‚ñ°p ‚àà X ‚Üí p ‚àà X

namespace SubformulaClosed

instance [DecidableEq Œ±] {p : Formula Œ±} : Formulae.SubformulaClosed (p.subformulae) where
  imp_closed hpq := ‚ü®Formula.subformulae.mem_imp‚ÇÅ hpq, Formula.subformulae.mem_imp‚ÇÇ hpq‚ü©
  box_closed hp := Formula.subformulae.mem_box hp


variable {p : Formula Œ±} {X : Formulae Œ±} [closed : X.SubformulaClosed]

lemma mem_box (h : ‚ñ°p ‚àà X) : p ‚àà X := closed.box_closed h
macro_rules | `(tactic| trivial) => `(tactic| apply mem_box $ by assumption)

lemma mem_imp (h : p ‚ûù q ‚àà X) : p ‚àà X ‚àß q ‚àà X := closed.imp_closed h

lemma mem_imp‚ÇÅ (h : p ‚ûù q ‚àà X) : p ‚àà X := mem_imp h |>.1
macro_rules | `(tactic| trivial) => `(tactic| apply mem_imp‚ÇÅ $ by assumption)

lemma mem_imp‚ÇÇ (h : p ‚ûù q ‚àà X) : q ‚àà X := mem_imp h |>.2
macro_rules | `(tactic| trivial) => `(tactic| apply mem_imp‚ÇÅ $ by assumption)

attribute [aesop safe 5 forward]
  mem_box
  mem_imp‚ÇÅ
  mem_imp‚ÇÇ

end SubformulaClosed


class Theory.SubformulaClosed (T : Theory Œ±) where
  imp_closed : ‚àÄ {p q}, p ‚ûù q ‚àà T ‚Üí p ‚àà T ‚àß q ‚àà T
  box_closed : ‚àÄ {p}, ‚ñ°p ‚àà T ‚Üí p ‚àà T

namespace Theory.SubformulaClosed

instance {p : Formula Œ±} [DecidableEq Œ±] : Theory.SubformulaClosed (p.subformulae).toSet where
  box_closed := Formulae.SubformulaClosed.box_closed;
  imp_closed := Formulae.SubformulaClosed.imp_closed;

variable {p : Formula Œ±} {T : Theory Œ±} [T_closed : T.SubformulaClosed]

lemma mem_box (h : ‚ñ°p ‚àà T) : p ‚àà T := T_closed.box_closed h
macro_rules | `(tactic| trivial) => `(tactic| apply mem_box $ by assumption)

lemma mem_imp (h : p ‚ûù q ‚àà T) : p ‚àà T ‚àß q ‚àà T := T_closed.imp_closed h

lemma mem_imp‚ÇÅ (h : p ‚ûù q ‚àà T) : p ‚àà T := mem_imp h |>.1
macro_rules | `(tactic| trivial) => `(tactic| apply mem_imp‚ÇÅ $ by assumption)

lemma mem_imp‚ÇÇ (h : p ‚ûù q ‚àà T) : q ‚àà T := mem_imp h |>.2
macro_rules | `(tactic| trivial) => `(tactic| apply mem_imp‚ÇÇ $ by assumption)

end Theory.SubformulaClosed

end Subformula


/-
section Atoms

variable [DecidableEq Œ±]

namespace Formula

def atoms : Formula Œ± ‚Üí Finset (Œ±)
  | .atom a => {a}
  | ‚ä§      => ‚àÖ
  | ‚ä•      => ‚àÖ
  | ‚àºp     => p.atoms
  | ‚ñ°p  => p.atoms
  | p ‚ûù q => p.atoms ‚à™ q.atoms
  | p ‚ãè q  => p.atoms ‚à™ q.atoms
  | p ‚ãé q  => p.atoms ‚à™ q.atoms
prefix:70 "ùíú " => Formula.atoms

@[simp]
lemma mem_atoms_iff_mem_subformulae {a : Œ±} {p : Formula Œ±} : a ‚àà ùíú p ‚Üî (atom a) ‚àà p.subformulae := by
  induction p using Formula.rec' <;> simp_all [subformulae, atoms];

end Formula

end Atoms
-/


namespace Formula

variable {p q r : Formula Œ±}

@[elab_as_elim]
def cases_neg [DecidableEq Œ±] {C : Formula Œ± ‚Üí Sort w}
    (hfalsum : C ‚ä•)
    (hatom   : ‚àÄ a : Œ±, C (atom a))
    (hneg    : ‚àÄ p : Formula Œ±, C (‚àºp))
    (himp    : ‚àÄ (p q : Formula Œ±), q ‚â† ‚ä• ‚Üí C (p ‚ûù q))
    (hbox    : ‚àÄ (p : Formula Œ±), C (‚ñ°p))
    : (p : Formula Œ±) ‚Üí C p
  | ‚ä•       => hfalsum
  | atom a  => hatom a
  | ‚ñ°p      => hbox p
  | ‚àºp      => hneg p
  | p ‚ûù q  => if e : q = ‚ä• then e ‚ñ∏ hneg p else himp p q e

@[elab_as_elim]
def rec_neg [DecidableEq Œ±] {C : Formula Œ± ‚Üí Sort w}
    (hfalsum : C ‚ä•)
    (hatom   : ‚àÄ a : Œ±, C (atom a))
    (hneg    : ‚àÄ p : Formula Œ±, C (p) ‚Üí C (‚àºp))
    (himp    : ‚àÄ (p q : Formula Œ±), q ‚â† ‚ä• ‚Üí C p ‚Üí C q ‚Üí C (p ‚ûù q))
    (hbox    : ‚àÄ (p : Formula Œ±), C (p) ‚Üí C (‚ñ°p))
    : (p : Formula Œ±) ‚Üí C p
  | ‚ä•       => hfalsum
  | atom a  => hatom a
  | ‚ñ°p      => hbox p (rec_neg hfalsum hatom hneg himp hbox p)
  | ‚àºp      => hneg p (rec_neg hfalsum hatom hneg himp hbox p)
  | p ‚ûù q  =>
    if e : q = ‚ä•
    then e ‚ñ∏ hneg p (rec_neg hfalsum hatom hneg himp hbox p)
    else himp p q e (rec_neg hfalsum hatom hneg himp hbox p) (rec_neg hfalsum hatom hneg himp hbox q)


section negated

def negated : Formula Œ± ‚Üí Bool
  | ‚àº_ => True
  | _  => False

@[simp] lemma negated_def : (‚àºp).negated := by simp [negated]

@[simp]
lemma negated_imp : (p ‚ûù q).negated ‚Üî (q = ‚ä•) := by
  simp [negated, Formula.imp_eq];
  split;
  . simp_all [Formula.imp_eq]; rfl;
  . simp_all [Formula.imp_eq]; simpa;

lemma negated_iff [DecidableEq Œ±] : p.negated ‚Üî ‚àÉ q, p = ‚àºq := by
  induction p using Formula.cases_neg with
  | himp => simp [negated_imp, NegAbbrev.neg];
  | _ => simp [negated]

lemma not_negated_iff [DecidableEq Œ±] : ¬¨p.negated ‚Üî ‚àÄ q, p ‚â† ‚àºq := by
  induction p using Formula.cases_neg with
  | himp => simp [negated_imp, NegAbbrev.neg];
  | _ => simp [negated]

@[elab_as_elim]
def rec_negated [DecidableEq Œ±] {C : Formula Œ± ‚Üí Sort w}
    (hfalsum : C ‚ä•)
    (hatom   : ‚àÄ a : Œ±, C (atom a))
    (hneg    : ‚àÄ p : Formula Œ±, C (p) ‚Üí C (‚àºp))
    (himp    : ‚àÄ (p q : Formula Œ±), ¬¨(p ‚ûù q).negated ‚Üí C p ‚Üí C q ‚Üí C (p ‚ûù q))
    (hbox    : ‚àÄ (p : Formula Œ±), C (p) ‚Üí C (‚ñ°p))
    : (p : Formula Œ±) ‚Üí C p
  | ‚ä•       => hfalsum
  | atom a  => hatom a
  | ‚ñ°p      => hbox p (rec_negated hfalsum hatom hneg himp hbox p)
  | ‚àºp      => hneg p (rec_negated hfalsum hatom hneg himp hbox p)
  | p ‚ûù q  => by
    by_cases e : q = ‚ä•
    . exact e ‚ñ∏ hneg p (rec_negated hfalsum hatom hneg himp hbox p)
    . refine himp p q ?_ (rec_negated hfalsum hatom hneg himp hbox p) (rec_negated hfalsum hatom hneg himp hbox q)
      . simpa [negated_imp]

end negated

section Encodable

variable [Encodable Œ±]
open Encodable

def toNat : Formula Œ± ‚Üí ‚Ñï
  | atom a  => (Nat.pair 0 <| encode a) + 1
  | ‚ä•       => (Nat.pair 1 0) + 1
  | ‚ñ°p      => (Nat.pair 2 <| p.toNat) + 1
  | p ‚ûù q   => (Nat.pair 3 <| p.toNat.pair q.toNat) + 1

def ofNat : ‚Ñï ‚Üí Option (Formula Œ±)
  | 0 => none
  | e + 1 =>
    let idx := e.unpair.1
    let c := e.unpair.2
    match idx with
    | 0 => (decode c).map Formula.atom
    | 1 => some ‚ä•
    | 2 =>
      have : c < e + 1 := Nat.lt_succ.mpr $ Nat.unpair_right_le _
      do
        let p <- ofNat c
        return ‚ñ°p
    | 3 =>
      have : c.unpair.1 < e + 1 := Nat.lt_succ.mpr $ le_trans (Nat.unpair_left_le _) $ Nat.unpair_right_le _
      have : c.unpair.2 < e + 1 := Nat.lt_succ.mpr $ le_trans (Nat.unpair_right_le _) $ Nat.unpair_right_le _
      do
        let p <- ofNat c.unpair.1
        let q <- ofNat c.unpair.2
        return p ‚ûù q
    | _ => none

lemma ofNat_toNat : ‚àÄ (p : Formula Œ±), ofNat (toNat p) = some p
  | atom a  => by simp [toNat, ofNat, Nat.unpair_pair, encodek, Option.map_some'];
  | ‚ä•       => by simp [toNat, ofNat]
  | ‚ñ°p      => by simp [toNat, ofNat, ofNat_toNat p]
  | p ‚ûù q   => by simp [toNat, ofNat, ofNat_toNat p, ofNat_toNat q]

instance : Encodable (Formula Œ±) where
  encode := toNat
  decode := ofNat
  encodek := ofNat_toNat

end Encodable

end Formula


end LO.Modal
