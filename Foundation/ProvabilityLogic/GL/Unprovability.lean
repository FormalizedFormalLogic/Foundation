import Foundation.Modal.Logic.GL.Independency
import Foundation.ProvabilityLogic.GL.Completeness

namespace LO.ProvabilityLogic

open Modal.Logic FirstOrder

namespace ProvabilityPredicate

open LO.Entailment

variable {L : Language} [L.DecidableEq] [Semiterm.Operator.GoedelNumber L (Sentence L)] [DecidableEq (Sentence L)]
         {T‚ÇÄ T : Theory L} [T‚ÇÄ ‚™Ø T]
         {ùîÖ : ProvabilityPredicate T‚ÇÄ T}
         {œÉ œÄ : Sentence L}

def indep (ùîÖ : ProvabilityPredicate T‚ÇÄ T) (œÉ : Sentence L) : Sentence L := ‚àº(ùîÖ œÉ) ‚ãè ‚àº(ùîÖ (‚àºœÉ))

lemma indep_distribute [ùîÖ.HBL2] (h : T ‚ä¢!. œÉ ‚≠§ œÄ) :
    T ‚ä¢!. ùîÖ.indep œÉ ‚ûù ùîÖ.indep œÄ := by
  apply CKK!_of_C!_of_C!;
  . apply contra!;
    apply WeakerThan.pbl (ùì¢ := T‚ÇÄ.toAxiom);
    apply ùîÖ.prov_distribute_imply;
    exact K!_right h;
  . apply contra!;
    apply WeakerThan.pbl (ùì¢ := T‚ÇÄ.toAxiom);
    apply ùîÖ.prov_distribute_imply;
    apply contra!;
    exact K!_left h;

lemma indep_iff_distribute_inside [ùîÖ.HBL2] (h : T ‚ä¢!. œÉ ‚≠§ œÄ) :
    T ‚ä¢!. ùîÖ.indep œÉ ‚≠§ ùîÖ.indep œÄ := by
  apply K!_intro
  . exact indep_distribute $ h;
  . apply indep_distribute;
    exact E!_symm h;

lemma indep_iff_distribute [ùîÖ.HBL2] (h : T ‚ä¢!. œÉ ‚≠§ œÄ) :
    T ‚ä¢!. ùîÖ.indep œÉ ‚Üî T ‚ä¢!. ùîÖ.indep œÄ := by
  constructor;
  . intro H; exact K!_left (indep_iff_distribute_inside h) ‚®Ä H;
  . intro H; exact K!_right (indep_iff_distribute_inside h) ‚®Ä H;

end ProvabilityPredicate

end ProvabilityLogic


namespace ProvabilityLogic

open FirstOrder FirstOrder.Arithmetic
open Modal Logic
open Entailment

variable {T : ArithmeticTheory} [T.Delta1Definable]
         {f : Realization ‚Ñí‚Çí·µ£}
         {A B : Modal.Formula _}


section Corollary

/-- G√∂del's Second Incompleteness Theorem -/
example [ùêàùö∫‚ÇÅ ‚™Ø T] [T.SoundOn (Hierarchy ùö∑ 2)] : T ‚ä¨. T.standardPr.con := by
  have h := GL.arithmetical_completeness_iff (T := T) |>.not.mpr $ GL.unprovable_notbox (œÜ := ‚ä•);
  push_neg at h;
  obtain ‚ü®f, h‚ü© := h;
  exact Realization.iff_interpret_neg.not.mp h;

end Corollary

section Independency

lemma iff_modalConsis_bewConsis_inside :
    T ‚ä¢!. f.interpret T.standardPr (‚àº‚ñ°‚ä•) ‚≠§ T.standardPr.con := by
  apply K!_intro;
  . refine C!_trans (K!_left Realization.iff_interpret_neg_inside) ?_;
    apply contra!;
    simp [Realization.interpret];
  . refine C!_trans ?_ (K!_right Realization.iff_interpret_neg_inside)
    apply contra!;
    simp [Realization.interpret];

variable [ùêàùö∫‚ÇÅ ‚™Ø T]

lemma iff_modalIndep_bewIndep_inside :
    T ‚ä¢!. f.interpret T.standardPr (Modal.independency A) ‚≠§ T.standardPr.indep (f.interpret T.standardPr A) := by
  apply K!_intro;
  . refine C!_trans (K!_left $ Realization.iff_interpret_and_inside) ?_;
    apply CKK!_of_C!_of_C!;
    . apply K!_left Realization.iff_interpret_neg_inside;
    . apply C!_trans (K!_left $ Realization.iff_interpret_neg_inside (A := ‚ñ°(‚àºA))) ?_;
      apply contra!;
      apply WeakerThan.pbl (ùì¢ := ùêàùö∫‚ÇÅ.toAxiom);
      apply T.standardPr.prov_distribute_imply;
      apply K!_right $ Realization.iff_interpret_neg_inside;
  . refine C!_trans ?_ (K!_right $ Realization.iff_interpret_and_inside);
    apply CKK!_of_C!_of_C!;
    . exact C!_trans (K!_right $ Realization.iff_interpret_neg_inside (A := ‚ñ°A)) C!_id;
    . apply C!_trans ?_ (K!_right $ Realization.iff_interpret_neg_inside (A := ‚ñ°(‚àºA)));
      apply contra!;
      apply WeakerThan.pbl (ùì¢ := ùêàùö∫‚ÇÅ.toAxiom);
      apply T.standardPr.prov_distribute_imply;
      apply K!_left $ Realization.iff_interpret_neg_inside;

lemma iff_modalIndep_bewIndep :
    T ‚ä¢!. f.interpret T.standardPr (Modal.independency A) ‚Üî T ‚ä¢!. T.standardPr.indep (f.interpret T.standardPr A) := by
  constructor;
  . intro h; exact (K!_left iff_modalIndep_bewIndep_inside) ‚®Ä h;
  . intro h; exact (K!_right iff_modalIndep_bewIndep_inside) ‚®Ä h;

lemma iff_not_modalIndep_not_bewIndep_inside :
    T ‚ä¢!. ‚àºf.interpret T.standardPr (Modal.independency A) ‚≠§ ‚àºT.standardPr.indep (f.interpret T.standardPr A) :=
  ENN!_of_E! iff_modalIndep_bewIndep_inside

lemma iff_not_modalIndep_not_bewIndep :
    T ‚ä¢!. ‚àºf.interpret T.standardPr (Modal.independency A) ‚Üî T ‚ä¢!. ‚àºT.standardPr.indep (f.interpret T.standardPr A) := by
  constructor;
  . intro h; exact (K!_left iff_not_modalIndep_not_bewIndep_inside) ‚®Ä h;
  . intro h; exact (K!_right iff_not_modalIndep_not_bewIndep_inside) ‚®Ä h;

variable [T.SoundOn (Hierarchy ùö∑ 2)]

lemma unprovable_independency_of_consistency :
    T ‚ä¨. T.standardPr.indep (T.standardPr.con) := by
  let g : Realization ‚Ñí‚Çí·µ£ := Œª _ => ‚ä•;
  suffices T ‚ä¨. g.interpret T.standardPr (Modal.independency (‚àº‚ñ°‚ä•)) by
    have H‚ÇÅ := iff_modalIndep_bewIndep (f := g) (T := T) (A := ‚àº‚ñ°‚ä•);
    have H‚ÇÇ := T.standardPr.indep_iff_distribute (T := T)
      (œÉ := g.interpret T.standardPr (‚àº‚ñ°‚ä•))
      (œÄ := T.standardPr.con)
      iff_modalConsis_bewConsis_inside;
    exact Iff.trans H‚ÇÅ H‚ÇÇ |>.not.mp this;
  have h := GL.arithmetical_completeness_iff (T := T) |>.not.mpr $ GL.unprovable_independency (œÜ := ‚àº‚ñ°‚ä•);
  push_neg at h;
  obtain ‚ü®f, h‚ü© := h;
  congr;

lemma unrefutable_independency_of_consistency :
    T ‚ä¨. ‚àºT.standardPr.indep (T.standardPr.con) := by
  let g : Realization ‚Ñí‚Çí·µ£ := Œª _ => ‚ä•;
  suffices T ‚ä¨. ‚àºg.interpret T.standardPr (Modal.independency (‚àº‚ñ°‚ä•)) by
    have H‚ÇÅ := iff_not_modalIndep_not_bewIndep (f := g) (T := T) (A := ‚àº‚ñ°‚ä•);
    have H‚ÇÇ : T ‚ä¢!.
      ‚àºT.standardPr.indep (g.interpret T.standardPr (‚àº‚ñ°‚ä•)) ‚≠§
      ‚àºT.standardPr.indep T.standardPr.con
      := ENN!_of_E! $ T.standardPr.indep_iff_distribute_inside (T := T)
      (œÉ := g.interpret T.standardPr (‚àº‚ñ°‚ä•))
      (œÄ := T.standardPr.con)
      iff_modalConsis_bewConsis_inside;
    replace H‚ÇÇ :
      T ‚ä¢!. ‚àºT.standardPr.indep (g.interpret T.standardPr (‚àº‚ñ°‚ä•)) ‚Üî
      T ‚ä¢!. ‚àºT.standardPr.indep T.standardPr.con
      := by
      constructor;
      . intro H; exact K!_left H‚ÇÇ ‚®Ä H;
      . intro H; exact K!_right H‚ÇÇ ‚®Ä H;
    apply Iff.trans H‚ÇÅ H‚ÇÇ |>.not.mp this;
  have h := GL.arithmetical_completeness_iff (T := T) |>.not.mpr $ GL.unprovable_not_independency_of_consistency;
  push_neg at h;
  obtain ‚ü®f, h‚ü© := h;
  replace h := Realization.iff_interpret_neg.not.mp h;
  congr;

theorem undecidable_independency_of_consistency :
    Independent T.toAxiom (T.standardPr.indep (T.standardPr.con)) := by
  constructor;
  . exact unprovable_independency_of_consistency;
  . exact unrefutable_independency_of_consistency;

end Independency


end LO.ProvabilityLogic
