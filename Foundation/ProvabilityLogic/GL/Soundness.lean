import Foundation.ProvabilityLogic.Realization
import Foundation.Modal.Logic.GLPlusBoxBot.Basic
import Foundation.ProvabilityLogic.Height

namespace LO.ProvabilityLogic

open Entailment
open Modal
open Modal.Hilbert
open FirstOrder
open Provability

variable {L : FirstOrder.Language} [L.ReferenceableBy L]
         [L.DecidableEq]
         {T U : FirstOrder.Theory L} [Diagonalization T]  [T ‚™Ø U]
         {ùîÖ : Provability T U} [ùîÖ.HBL]

lemma GL.arithmetical_soundness (h : Modal.GL ‚ä¢! A) {f : Realization ùîÖ} : U ‚ä¢! f A := by
  replace h := Normal.iff_logic_provable_provable.mp h;
  induction h using Hilbert.Normal.rec! with
  | axm _ hp =>
    rcases hp with (‚ü®_, rfl‚ü© | ‚ü®_, rfl‚ü©)
    . exact D2_shift;
    . exact FLT_shift;
  | nec ihp => exact D1_shift ihp;
  | mdp ihpq ihp => exact ihpq ‚®Ä ihp;
  | _ => dsimp [Realization.interpret]; cl_prover;

open Classical

theorem GLPlusBoxBot.arithmetical_soundness
    (hA : Modal.GLPlusBoxBot ùîÖ.height.toWithTop ‚ä¢! A)
    (f : Realization ùîÖ) : U ‚ä¢! f A := by
  cases h : ùîÖ.height using PartENat.casesOn
  case _ =>
    exact GL.arithmetical_soundness (by simpa [h] using hA)
  case _ n =>
    have : Modal.GLPlusBoxBot n ‚ä¢! A := by simpa [h] using hA
    have : Modal.GL ‚ä¢! ‚ñ°^[n]‚ä• ‚ûù A := iff_provable_GLPlusBoxBot_provable_GL.mp this
    have : U ‚ä¢! f (‚ñ°^[n]‚ä• ‚ûù A) := GL.arithmetical_soundness this;
    have : U ‚ä¢! ùîÖ^[n] ‚ä• ‚ûù f A := by grind;
    exact this ‚®Ä (Provability.height_le_iff_boxBot.mp (by simp [h]))

end LO.ProvabilityLogic
