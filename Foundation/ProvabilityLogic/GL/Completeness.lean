import Foundation.ProvabilityLogic.SolovaySentences
import Foundation.ProvabilityLogic.Arithmetic

/-!
# Solovay's arithmetical completeness of $\mathsf{GL}$ and $\mathsf{GL} + \square^n \bot$
-/

namespace LO.ProvabilityLogic

open Entailment Entailment.FiniteContext
open FirstOrder Arithmetic
open Modal
open Modal.Kripke
open ArithmeticTheory (ProvabilityLogic)

variable {T : ArithmeticTheory} [T.Œî‚ÇÅ] [ùóúùö∫‚ÇÅ ‚™Ø T] {A : Modal.Formula _}

theorem unprovable_realization_exists
    (M‚ÇÅ : Model) [Fintype M‚ÇÅ] {r‚ÇÅ : M‚ÇÅ} [M‚ÇÅ.IsFiniteTree r‚ÇÅ]
    (hA : ¬¨r‚ÇÅ ‚äß A) (h : M‚ÇÅ.finHeight < T.height) :
    ‚àÉ f : T.StandardRealization, T ‚ä¨. f A := by
  let M‚ÇÄ := M‚ÇÅ.extendRoot 1
  let r‚ÇÄ : M‚ÇÄ := Frame.extendRoot.root
  have hdnA : r‚ÇÄ ‚äß ‚óá(‚àºA) := by
    suffices ‚àÉ i, r‚ÇÄ ‚â∫ i ‚àß ¬¨i ‚äß A by simpa [Formula.Kripke.Satisfies]
    refine ‚ü®.inr r‚ÇÅ, ?_, ?_‚ü©
    ¬∑ simpa [r‚ÇÄ] using Frame.extendRoot.rooted_original
    ¬∑ exact Model.extendRoot.inr_satisfies_iff |>.not.mpr hA
  let S : SolovaySentences T.standardProvability M‚ÇÄ.toFrame r‚ÇÄ :=
    SolovaySentences.standard T M‚ÇÄ.toFrame
  use S.realization
  intro hC
  have : T.height ‚â§ M‚ÇÅ.finHeight := by
    apply PartENat.le_of_lt_add_one
    calc
      (Theory.standardProvability T).height < M‚ÇÄ.finHeight := S.theory_height hdnA hC
      _                                     = M‚ÇÅ.finHeight + 1 := by simp [M‚ÇÄ]
  exact not_lt_of_ge this h

/-- Arithmetical completeness of $\mathsf{GL}$-/
theorem GL.arithmetical_completeness (height : T.height = ‚ä§) :
    (‚àÄ f : T.StandardRealization, T ‚ä¢!. f A) ‚Üí Modal.GL ‚ä¢! A := by
  suffices ¬¨Modal.GL ‚ä¢! A ‚Üí ‚àÉ f : T.StandardRealization, T ‚ä¨. f A by
    contrapose!;
    assumption;
  intro hA
  obtain ‚ü®M‚ÇÅ, r‚ÇÅ, _, hA‚ÇÅ‚ü© := GL.Kripke.iff_unprovable_exists_unsatisfies_FiniteTransitiveTree.mp hA
  have : Fintype M‚ÇÅ := Fintype.ofFinite _
  exact unprovable_realization_exists M‚ÇÅ hA‚ÇÅ <| by simp [height]

theorem GLPlusBoxBot.arithmetical_completeness_aux {n : ‚Ñï} (height : n ‚â§ T.height) :
    (‚àÄ f : T.StandardRealization, T ‚ä¢!. f A) ‚Üí Modal.GL ‚ä¢! ‚ñ°^[n] ‚ä• ‚ûù A := by
  suffices ¬¨Modal.GL ‚ä¢! ‚ñ°^[n]‚ä• ‚ûù A ‚Üí ‚àÉ f : T.StandardRealization, T ‚ä¨. f A by
    contrapose!;
    assumption;
  intro hA
  obtain ‚ü®M‚ÇÅ, r‚ÇÅ, _, hA‚ÇÅ‚ü© := GL.Kripke.iff_unprovable_exists_unsatisfies_FiniteTransitiveTree.mp hA
  have : Fintype M‚ÇÅ := Fintype.ofFinite _
  have hA‚ÇÅ : r‚ÇÅ ‚äß ‚ñ°^[n]‚ä• ‚àß ¬¨r‚ÇÅ ‚äß A := by
    simpa [Formula.Kripke.Satisfies] using hA‚ÇÅ
  have M‚ÇÅ_height : M‚ÇÅ.finHeight < n :=
    finHeight_lt_iff_satisfies_boxbot.mpr hA‚ÇÅ.1
  exact unprovable_realization_exists M‚ÇÅ hA‚ÇÅ.2 <| lt_of_lt_of_le (by simp [M‚ÇÅ_height]) height

theorem GL.arithmetical_completeness_iff (height : T.height = ‚ä§) {A} :
    (‚àÄ f : T.StandardRealization, T ‚ä¢!. f A) ‚Üî Modal.GL ‚ä¢! A :=
  ‚ü®GL.arithmetical_completeness height, GL.arithmetical_soundness‚ü©

theorem GL.arithmetical_completeness_sound_iff [T.SoundOnHierarchy ùö∫ 1] {A} :
    (‚àÄ f : T.StandardRealization, T ‚ä¢!. f A) ‚Üî Modal.GL ‚ä¢! A :=
  GL.arithmetical_completeness_iff (Provability.hight_eq_top_of_sigma1_sound T)

/-- Provability logic of $\Sigma_1$-sound theory contains $\mathsf{I}\Sigma_1$ is $\mathsf{GL}$-/
theorem provabilityLogic_eq_GL_of_sigma1_sound [T.SoundOnHierarchy ùö∫ 1] :
    ProvabilityLogic T T ‚âä Modal.GL := by
  apply Logic.iff_equal_provable_equiv.mp
  ext A
  simpa [ArithmeticTheory.ProvabilityLogic] using
    GL.arithmetical_completeness_sound_iff

open Classical

/-- Arithmetical completeness of $\mathsf{GL} + \square^n \bot$-/
theorem GLPlusBoxBot.arithmetical_completeness
    {n : ‚Ñï‚àû} (hn : n ‚â§ T.height) (h : ‚àÄ f : T.StandardRealization, T ‚ä¢!. f A) :
    Modal.GLPlusBoxBot n ‚ä¢! A := by
  match n with
  | .none =>
    have : T.height = ‚ä§ := eq_top_iff.mpr hn
    simpa using GL.arithmetical_completeness this h
  | .some n =>
    apply iff_provable_GLPlusBoxBot_provable_GL.mpr
    exact GLPlusBoxBot.arithmetical_completeness_aux (n := n) (by simpa using hn) h

theorem GLPlusBoxBot.arithmetical_completeness_iff :
    (‚àÄ f : T.StandardRealization, T ‚ä¢!. f A) ‚Üî Modal.GLPlusBoxBot T.height.toWithTop ‚ä¢! A :=
  ‚ü®GLPlusBoxBot.arithmetical_completeness (T := T) (by simp), GLPlusBoxBot.arithmetical_soundness‚ü©

/-- Provability logic of theory contains $\mathsf{I}\Sigma_1$ is $\mathsf{GL} + \square^{\text{height of } T} \bot$-/
theorem provabilityLogic_eq_GLPlusBoxBot :
    ProvabilityLogic T T ‚âä Modal.GLPlusBoxBot T.height.toWithTop := by
  apply Logic.iff_equal_provable_equiv.mp
  ext A
  simpa [ArithmeticTheory.ProvabilityLogic] using
    GLPlusBoxBot.arithmetical_completeness_iff

instance : ProvabilityLogic ùó£ùóî ùó£ùóî ‚âä Modal.GL := provabilityLogic_eq_GL_of_sigma1_sound

end LO.ProvabilityLogic
