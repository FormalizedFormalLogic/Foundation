import Foundation.Modal.Logic.Extension
import Foundation.Modal.Logic.S
import Foundation.ProvabilityLogic.GL.Completeness
import Foundation.Modal.Boxdot.Basic
import Mathlib.Tactic.TFAE


noncomputable abbrev LO.Modal.Formula.rflSubformula [DecidableEq Œ±] (œÜ : Formula Œ±) : FormulaFinset Œ±
  := (œÜ.subformulas.prebox.image (Œª œà => ‚ñ°œà ‚ûù œà))


namespace LO.ProvabilityLogic

open Entailment
open Modal
open FirstOrder FirstOrder.DerivabilityCondition
open ProvabilityPredicate

variable {T‚ÇÄ T : FirstOrder.Theory ‚Ñí‚Çí·µ£} [T‚ÇÄ ‚™Ø T] [Diagonalization T‚ÇÄ]
         {ùîÖ : ProvabilityPredicate T‚ÇÄ T} [ùîÖ.HBL] [‚Ñï ‚äß‚Çò* T] [ùîÖ.Sound ‚Ñï]
         {A B : Formula ‚Ñï}

theorem arithmetical_soundness_S (h : A ‚àà Logic.S) (f : Realization ‚Ñí‚Çí·µ£) : ‚Ñï ‚äß‚Çò‚ÇÄ f.interpret ùîÖ A := by
  induction h using Logic.S.rec' with
  | mem_GL h =>
    exact models_of_provable‚ÇÄ inferInstance (GL.arithmetical_soundness (L := ‚Ñí‚Çí·µ£) h);
  | axiomT =>
    simp only [Realization.interpret, models‚ÇÄ_imply_iff];
    intro h;
    exact models_of_provable‚ÇÄ inferInstance (Iff.mp ùîÖ.sound h)
  | mdp ihAB ihA =>
    simp only [Realization.interpret, models‚ÇÄ_imply_iff] at ihAB;
    apply ihAB ihA;

section

instance : ùêàùö∫‚ÇÅ.Delta1Definable := by sorry

instance [ùêàùö∫‚ÇÅ ‚™Ø T] [T.Delta1Definable] : ((ùêàùö∫‚ÇÅ).standardDP T).Sound ‚Ñï := ‚ü®fun {œÉ} ‚Ü¶ by
  have : ùêë‚ÇÄ ‚™Ø T := Entailment.WeakerThan.trans (ùì£ := ùêàùö∫‚ÇÅ) inferInstance inferInstance
  simp [Arith.standardDP_def, models‚ÇÄ_iff]‚ü©

lemma _root_.LO.Modal.Logic.iff_provable_GL_provable_box_S : A ‚àà Logic.GL ‚Üî ‚ñ°A ‚àà Logic.S := by
  constructor;
  . intro h;
    apply Logic.sumQuasiNormal.mem‚ÇÅ;
    apply nec! h;
  . intro h;
    apply GL.arithmetical_completeness (T := ùêàùö∫‚ÇÅ);
    intro f;
    exact Iff.mp ((ùêàùö∫‚ÇÅ).standardDP ùêàùö∫‚ÇÅ).sound (arithmetical_soundness_S h f)

end

section

open Entailment FiniteContext
open Modal
open Modal.Kripke
open Modal.Formula.Kripke
open Arith

variable [T.Delta1Definable] [ùêàùö∫‚ÇÅ ‚™Ø T] [SoundOn T (Hierarchy ùö∑ 2)]

@[simp] lemma r {n : Fin 1} : n.val = (0 : Fin 1) := by omega;

lemma GL_S_TFAE :
  [
    (A.rflSubformula.conj ‚ûù A) ‚àà Logic.GL,
    A ‚àà Logic.S,
    ‚àÄ f : Realization ‚Ñí‚Çí·µ£, ‚Ñï ‚äß‚Çò‚ÇÄ (f.interpret ((ùêàùö∫‚ÇÅ).standardDP T) A)
  ].TFAE := by
  tfae_have 1 ‚Üí 2 := by
    intro h;
    apply Logic.S.mdp (Logic.GL_subset_S h) ?_;
    apply Logic.conj_iff.mpr;
    suffices ‚àÄ B, ‚ñ°B ‚àà A.subformulas ‚Üí ‚ñ°B ‚ûù B ‚àà Logic.S by simpa [Formula.rflSubformula];
    rintro B _;
    exact Logic.S.mem_axiomT;
  tfae_have 2 ‚Üí 3 := by
    intro h f;
    apply arithmetical_soundness_S;
    exact h;
  tfae_have 3 ‚Üí 1 := by
    contrapose;
    push_neg;
    intro hA;
    obtain ‚ü®M‚ÇÅ, r‚ÇÅ, _, hA‚ü© := Hilbert.GL.Kripke.iff_unprovable_exists_unsatisfies_FiniteTransitiveTree.mp hA;
    let M‚ÇÄ := Model.extendRoot M‚ÇÅ r‚ÇÅ 1;
    let r‚ÇÄ : M‚ÇÄ.World := Model.extendRoot.root;
    replace hA := Formula.Kripke.Satisfies.imp_def.not.mp hA;
    push_neg at hA;
    obtain ‚ü®hA‚ÇÅ, hA‚ÇÇ‚ü© := hA;
    replace hA‚ÇÅ : ‚àÄ œÜ ‚àà A.rflSubformula, r‚ÇÅ ‚äß œÜ := by
      intro œÜ hœÜ;
      apply Model.extendRoot.inr_satisfies_iff.mp
        $ (Satisfies.finset_conj_def.mp
        $ Model.extendRoot.inr_satisfies_iff (n := 1) |>.mpr hA‚ÇÅ) œÜ hœÜ;
    have : M‚ÇÄ.IsFiniteTree r‚ÇÄ := Frame.extendRoot.instIsFiniteTree
    have : Fintype M‚ÇÄ.World := Fintype.ofFinite _
    let œÉ : SolovaySentences ((ùêàùö∫‚ÇÅ).standardDP T) (M‚ÇÄ.toFrame) r‚ÇÄ :=
      SolovaySentences.standard M‚ÇÄ.toFrame Frame.extendRoot.root T
    use œÉ.realization;
    have H :
      ‚àÄ B ‚àà A.subformulas,
      (r‚ÇÅ ‚äß B ‚Üí ùêàùö∫‚ÇÅ ‚ä¢!. (œÉ r‚ÇÄ) ‚ûù (œÉ.realization.interpret ((ùêàùö∫‚ÇÅ).standardDP T) B)) ‚àß
      (¬¨r‚ÇÅ ‚äß B ‚Üí ùêàùö∫‚ÇÅ ‚ä¢!. (œÉ r‚ÇÄ) ‚ûù ‚àº(œÉ.realization.interpret ((ùêàùö∫‚ÇÅ).standardDP T) B)) := by
      intro B B_sub;
      induction B using Formula.rec' with
      | hfalsum => simp [Satisfies, Realization.interpret];
      | himp B C ihB ihC =>
        dsimp [Realization.interpret];
        constructor;
        . intro h;
          rcases Satisfies.imp_def‚ÇÇ.mp h with (hA | hB);
          . exact imp_trans''! (ihB (Formula.subformulas.mem_imp B_sub |>.1) |>.2 hA) efq_imply_not‚ÇÅ!;
          . exact imp_trans''! (ihC (Formula.subformulas.mem_imp B_sub |>.2) |>.1 hB) imply‚ÇÅ!;
        . intro h;
          have := Satisfies.imp_def.not.mp h;
          push_neg at this;
          obtain ‚ü®hA, hB‚ü© := this;
          apply deduct'!;
          apply p_Nq_NIpq!;
          . exact deductInv'! $ ihB (Formula.subformulas.mem_imp B_sub |>.1) |>.1 hA;
          . exact deductInv'! $ ihC (Formula.subformulas.mem_imp B_sub |>.2) |>.2 hB;
      | hatom =>
        constructor;
        . intro h;
          apply imply_fdisj;
          simpa;
        . intro h;
          apply contra‚ÇÅ'!;
          apply fdisj_imply!;
          intro i hi;
          apply œÉ.SC1;
          by_contra hC; subst hC;
          apply h;
          simpa using hi;
      | hbox B ihB =>
        simp only [Realization.interpret];
        constructor;
        . intro h;
          apply imply‚ÇÅ'!;
          apply ((ùêàùö∫‚ÇÅ).standardDP T).D1;
          apply Entailment.WeakerThan.pbl (ùì¢ := ùêàùö∫‚ÇÅ.alt);
          have : ùêàùö∫‚ÇÅ ‚ä¢!. ((‚©ñ j, œÉ j)) ‚ûù œÉ.realization.interpret ((ùêàùö∫‚ÇÅ).standardDP T) B := by
            apply fdisj_imply!;
            have hrfl : r‚ÇÅ ‚äß ‚ñ°B ‚ûù B := by
              apply hA‚ÇÅ;
              simpa [Formula.rflSubformula];
            rintro (i | i) _;
            . rw [(show (Sum.inl i) = r‚ÇÄ by simp [r‚ÇÄ]; omega)]
              suffices ùêàùö∫‚ÇÅ ‚ä¢!. œÉ r‚ÇÄ ‚ûù œÉ.realization.interpret ((ùêàùö∫‚ÇÅ).standardDP T) B by convert this;
              apply ihB (Formula.subformulas.mem_box B_sub) |>.1;
              exact hrfl h;
            . by_cases e : i = r‚ÇÅ;
              . rw [e];
                apply œÉ.mainlemma (i := r‚ÇÅ) (by trivial) |>.1;
                exact Model.extendRoot.inr_satisfies_iff (n := 1) |>.mpr $ hrfl h;
              . apply œÉ.mainlemma (i := i) (by trivial) |>.1;
                apply Model.extendRoot.inr_satisfies_iff (n := 1) |>.mpr;
                apply h;
                apply Frame.IsRooted.direct_rooted_of_trans;
                assumption
          have b : ùêàùö∫‚ÇÅ ‚ä¢!. ‚©ñ j, œÉ j := oRing_provable‚ÇÄ_of _ _ fun (V : Type) _ _ ‚Ü¶ by
            simpa [models‚ÇÄ_iff, œÉ, SolovaySentences.standard_œÉ_def] using SolovaySentences.solovay_disjunction
          exact this ‚®Ä b
        . intro h;
          have := Satisfies.box_def.not.mp h;
          push_neg at this;
          obtain ‚ü®i, Rij, hA‚ü© := this;
          have : ùêàùö∫‚ÇÅ ‚ä¢!. œÉ.œÉ (Sum.inr i) ‚ûù ‚àºœÉ.realization.interpret ((ùêàùö∫‚ÇÅ).standardDP T) B :=
            œÉ.mainlemma (A := B) (i := i) (by trivial) |>.2
            <| Model.extendRoot.inr_satisfies_iff (n := 1) |>.not.mpr hA;
          have : ùêàùö∫‚ÇÅ ‚ä¢!. ‚àº((ùêàùö∫‚ÇÅ).standardDP T) (‚àºœÉ (Sum.inr i)) ‚ûù ‚àº((ùêàùö∫‚ÇÅ).standardDP T) (œÉ.realization.interpret ((ùêàùö∫‚ÇÅ).standardDP T) B) :=
            contra‚ÇÄ'!
            $ ((ùêàùö∫‚ÇÅ).standardDP T).prov_distribute_imply'
            $ contra‚ÇÅ'! $ this;
          refine imp_trans''! ?_ this;
          apply œÉ.SC2;
          tauto;
    have : ‚Ñï ‚äß‚Çò* ùêàùö∫‚ÇÅ := models_of_subtheory (U := ùêàùö∫‚ÇÅ) (T := T) (M := ‚Ñï) inferInstance;
    have : ‚Ñï ‚äß‚Çò‚ÇÄ œÉ.œÉ r‚ÇÄ ‚ûù ‚àºœÉ.realization.interpret ((ùêàùö∫‚ÇÅ).standardDP T) A := models_of_provable‚ÇÄ inferInstance $ H A (by simp) |>.2 hA‚ÇÇ;
    simp only [models‚ÇÄ_imply_iff, models‚ÇÄ_not_iff] at this;
    exact this <| by
      simpa [models‚ÇÄ_iff, œÉ, SolovaySentences.standard_œÉ_def] using SolovaySentences.solovay_root_sound
  tfae_finish;

theorem S.arithmetical_completeness_iff : A ‚àà Logic.S ‚Üî ‚àÄ f : Realization ‚Ñí‚Çí·µ£, ‚Ñï ‚äß‚Çò‚ÇÄ (f.interpret ((ùêàùö∫‚ÇÅ).standardDP T) A) := GL_S_TFAE.out 1 2

end

end ProvabilityLogic



namespace Modal.Logic

open Kripke Formula.Kripke

variable {A : Formula _}

lemma iff_provable_rflSubformula_GL_provable_S : (A.rflSubformula.conj ‚ûù A) ‚àà Logic.GL ‚Üî A ‚àà Logic.S := ProvabilityLogic.GL_S_TFAE (T := ùêàùö∫‚ÇÅ) |>.out 0 1

lemma iff_provable_boxdot_GL_provable_boxdot_S : A·µá ‚àà Logic.GL ‚Üî A·µá ‚àà Logic.S := by
  constructor;
  . apply Logic.GL_subset_S;
  . intro h;
    replace h := iff_provable_rflSubformula_GL_provable_S.mpr h;
    replace h := Hilbert.GL.Kripke.iff_provable_satisfies_FiniteTransitiveTree.mp h;
    apply Hilbert.GL.Kripke.iff_provable_satisfies_FiniteTransitiveTree.mpr;
    intro M r _;
    obtain ‚ü®i, hi‚ü© := Kripke.Model.extendRoot.inr_satisfies_axiomT_set (M := M) (Œì := A·µá.subformulas.prebox)
    let M‚ÇÅ := M.extendRoot r ‚ü®A·µá.subformulas.prebox.card + 1, by omega‚ü©;
    let i‚ÇÅ : M‚ÇÅ.World := Sum.inl i;
    refine Model.extendRoot.inl_satisfies_boxdot_iff.mpr
      $ Model.pointGenerate.modal_equivalent_at_root (r := i‚ÇÅ) |>.mp
      $ @h (M‚ÇÅ‚Üæi‚ÇÅ) Model.pointGenerate.root ?_ ?_;
    . apply Frame.isFiniteTree_iff _ _ |>.mpr
      constructor;
      . apply Frame.pointGenerate.isFinite (finite := Frame.extendRoot.isFinite)
      . apply Frame.isTree_iff _ _ |>.mpr;
        refine ‚ü®?_, ?_, ?_‚ü©;
        . apply Frame.pointGenerate.instIsRooted;
        . apply Frame.pointGenerate.isAsymm (assym := Frame.extendRoot.isAsymm);
        . apply Frame.pointGenerate.isTrans (trans := Frame.extendRoot.isTrans);
    . apply @Model.pointGenerate.modal_equivalent_at_root (r := i‚ÇÅ) |>.mpr
      apply Satisfies.finset_conj_def.mpr;
      intro B hB;
      apply Satisfies.finset_conj_def.mp hi;
      simp only [Finset.mem_image, Finset.eq_prebox_premultibox_one, Finset.mem_preimage, Function.iterate_one] at hB ‚ä¢;
      obtain ‚ü®C, hC, rfl‚ü© := hB;
      use C;

theorem S.no_bot : ‚ä• ‚àâ Logic.S := by
  have hb : (‚ä• : Formula ‚Ñï) = ‚ä•·µá := by simp [Formula.BoxdotTranslation];
  rw [hb];
  apply iff_provable_boxdot_GL_provable_boxdot_S.not.mp;
  rw [‚Üêhb];
  apply Logic.no_bot;

instance : Logic.S.Consistent := ‚ü®by
  apply Set.eq_univ_iff_forall.not.mpr;
  push_neg;
  use ‚ä•;
  exact Logic.S.no_bot;
‚ü©

end Modal.Logic


end LO
