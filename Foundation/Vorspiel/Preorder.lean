import Foundation.Vorspiel.Vorspiel
import Mathlib.Order.PFilter
import Mathlib.Data.Set.Countable

namespace Nat

lemma monotone_of_succ_monotone {r : ‚Ñï ‚Üí ‚Ñï ‚Üí Prop} (rfx : Reflexive r) (tr : Transitive r)
    (succ : ‚àÄ n, r n (n + 1)) : n ‚â§ m ‚Üí r n m := by
  revert n m
  suffices ‚àÄ n d, r n (n + d) by
    intro n m hnm
    have := this n (m - n)
    grind
  intro n d
  induction d
  case zero => simp [rfx n]
  case succ d ih =>
    simpa using tr ih (succ (n + d))

end Nat

namespace DirectedOn

variable {Œ± : Type*} {r : Œ± ‚Üí Œ± ‚Üí Prop}

private lemma vector_le (tr : Transitive r) {s : Set Œ±} (hs : s.Nonempty) (h : DirectedOn r s) (v : Fin n ‚Üí Œ±) (hv : ‚àÄ i, v i ‚àà s) :
    ‚àÉ z ‚àà s, ‚àÄ i, r (v i) z :=
  match n with
  | 0     => by
    rcases hs with ‚ü®x, hx‚ü©; exact ‚ü®x, hx, fun i ‚Ü¶ IsEmpty.elim inferInstance i‚ü©
  | n + 1 => by
    have : ‚àÉ z ‚àà s, ‚àÄ i : Fin n, r (v i.succ) z := h.vector_le tr hs (n := n) (fun i ‚Ü¶ v i.succ) fun i ‚Ü¶ hv i.succ
    rcases this with ‚ü®x, hx, hr‚ü©
    have : ‚àÉ z ‚àà s, r x z ‚àß r (v 0) z := h x hx (v 0) (hv 0)
    rcases this with ‚ü®z, hz, hrxz, hrz‚ü©
    refine ‚ü®z, hz, ?_‚ü©
    intro i
    cases i using Fin.cases
    case zero => assumption
    case succ i =>
      exact tr (hr i) hrxz

lemma fintype_colimit [Fintype Œπ] (tr : Transitive r)
    {s : Set Œ±} (hs : s.Nonempty) (h : DirectedOn r s) (v : Œπ ‚Üí Œ±) (hv : ‚àÄ i, v i ‚àà s) :
    ‚àÉ z ‚àà s, ‚àÄ i, r (v i) z := by
  let f : Fin (Fintype.card Œπ) ‚Üí Œ± := fun x ‚Ü¶ v ((Fintype.equivFin Œπ).symm x)
  rcases DirectedOn.vector_le tr hs h f (by intro; simp [f, hv]) with ‚ü®z, hzs, hz‚ü©
  exact ‚ü®z, hzs, fun i ‚Ü¶ by simpa [f] using hz ((Fintype.equivFin Œπ) i)‚ü©

end DirectedOn

namespace Order

variable {Œ± : Type*} [Preorder Œ±]

def IsDense (s : Set Œ±) : Prop := ‚àÄ p, ‚àÉ q ‚â§ p, q ‚àà s

def IsDenseBelow (s : Set Œ±) (a : Œ±) : Prop := ‚àÄ p ‚â§ a, ‚àÉ q ‚â§ p, q ‚àà s

variable (Œ±)

@[ext] structure DenseSet where
  set : Set Œ±
  is_dense : IsDense set

variable {Œ±}

namespace DenseSet

instance : SetLike (DenseSet Œ±) Œ± where
  coe s := s.set
  coe_injective' s t e := by ext; simp_all

noncomputable def choose (d : DenseSet Œ±) (a : Œ±) : Œ± := (d.is_dense a).choose

@[simp] lemma choose_le (d : DenseSet Œ±) (a : Œ±) : d.choose a ‚â§ a := (d.is_dense a).choose_spec.1

@[simp] lemma choose_mem (d : DenseSet Œ±) (a : Œ±) : d.choose a ‚àà d := (d.is_dense a).choose_spec.2

end DenseSet

namespace PFilter

def ofDescendingChain (s : ‚Ñï ‚Üí Œ±) (hs : ‚àÄ i j, i ‚â§ j ‚Üí s i ‚â• s j) : PFilter Œ± :=
  IsPFilter.toPFilter <| Order.IsPFilter.of_def (F := {x | ‚àÉ i, s i ‚â§ x})
    ‚ü®s 0, 0, by rfl‚ü©
    (by rintro x‚ÇÅ ‚ü®i‚ÇÅ, h‚ÇÅ‚ü© x‚ÇÇ ‚ü®i‚ÇÇ, h‚ÇÇ‚ü©
        wlog hi : i‚ÇÅ ‚â§ i‚ÇÇ
        ¬∑ have z : i‚ÇÇ ‚â§ i‚ÇÅ := by exact Nat.le_of_not_ge hi
          rcases this s hs x‚ÇÇ i‚ÇÇ h‚ÇÇ x‚ÇÅ i‚ÇÅ h‚ÇÅ (Nat.le_of_not_ge hi) with ‚ü®z, hz‚ü©
          exact ‚ü®z, hz.1, hz.2.2, hz.2.1‚ü©
        exact ‚ü®s i‚ÇÇ, ‚ü®i‚ÇÇ, by rfl‚ü©, le_trans (hs i‚ÇÅ i‚ÇÇ hi) h‚ÇÅ, by simp [h‚ÇÇ]‚ü©)
    (by rintro x y hxy ‚ü®i, hix‚ü©
        exact ‚ü®i, le_trans hix hxy‚ü©)

@[simp] lemma mem_descendingChain_iff (s : ‚Ñï ‚Üí Œ±) (hs : ‚àÄ i j, i ‚â§ j ‚Üí s i ‚â• s j) :
    x ‚àà ofDescendingChain s hs ‚Üî ‚àÉ i, s i ‚â§ x := by rfl

class Generic (F : PFilter Œ±) (ùìì : Set (DenseSet Œ±)) where
  generic : ‚àÄ d ‚àà ùìì, ‚àÉ a ‚àà F, a ‚àà d

@[simp] instance Generic.empty (F : PFilter Œ±) : F.Generic ‚àÖ := ‚ü®by simp‚ü©

theorem countable_generic [Inhabited Œ±] (ùìì : Set (DenseSet Œ±)) (ctb : Set.Countable ùìì) :
    ‚àÉ G, Generic G ùìì := by
  by_cases emp : ùìì.Nonempty
  case neg => exact ‚ü®default, by simp [Set.not_nonempty_iff_eq_empty.mp emp]‚ü©
  have : ‚àÉ D : ‚Ñï ‚Üí ùìì, Function.Surjective D := ctb.exists_surjective emp
  rcases this with ‚ü®D, hD‚ü©
  let s (n : ‚Ñï) : Œ± := n.rec default fun i ‚Ü¶ (D i).val.choose
  have hs : ‚àÄ i j, i ‚â§ j ‚Üí s i ‚â• s j := fun i j hij ‚Ü¶
    Nat.monotone_of_succ_monotone (r := fun i j ‚Ü¶ s i ‚â• s j)
      (fun _ ‚Ü¶ le_refl _)
      (fun _ _ _ ‚Ü¶ ge_trans)
      (by simp [s]) hij
  refine ‚ü®ofDescendingChain s hs, ‚ü®?_‚ü©‚ü©
  intro d hd
  rcases show ‚àÉ i, D i = ‚ü®d, hd‚ü© from hD ‚ü®d, hd‚ü© with ‚ü®i, hi‚ü©
  refine ‚ü®s (i + 1), ?_, ?_‚ü©
  ¬∑ simp only [mem_descendingChain_iff]
    exact ‚ü®i + 1, by rfl‚ü©
  ¬∑ simp [s, hi]

end Order.PFilter
