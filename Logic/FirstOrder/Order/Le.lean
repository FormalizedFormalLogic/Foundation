import Logic.FirstOrder.Basic
import Logic.FirstOrder.Completeness.Completeness
--import Logic.FirstOrder.Principia.Meta

namespace LO

namespace FirstOrder

variable {L : Language} [Semiformula.Operator.Eq L] [Semiformula.Operator.LT L]

open Semiformula

def LT.le : Operator L 2 := Semiformula.Operator.Eq.eq.or Semiformula.Operator.LT.lt

lemma le_eq (t‚ÇÅ t‚ÇÇ : Semiterm L Œº n) : LT.le.operator ![t‚ÇÅ, t‚ÇÇ] = ‚Äú!!t‚ÇÅ = !!t‚ÇÇ ‚à® !!t‚ÇÅ < !!t‚ÇÇ‚Äù := by
  simp[Operator.operator, Operator.or, LT.le, ‚ÜêRew.hom_comp_app, ‚ÜêMatrix.fun_eq_vec‚ÇÇ]

namespace Semiformula

syntax:45 foterm:45 " ‚â§ " foterm:0 : foformula

notation "op(‚â§)" => Operator.LE.le

macro_rules
  | `(‚Äú $t‚ÇÅ:foterm ‚â§ $t‚ÇÇ:foterm ‚Äù) => `(op(‚â§).operator ![·µÄ‚Äú$t‚ÇÅ‚Äù, ·µÄ‚Äú$t‚ÇÇ‚Äù])

section delab
open Lean PrettyPrinter Delaborator SubExpr

@[app_unexpander Operator.operator]
def unexpandOpLe : Unexpander
  | `($_ op(‚â§) ![·µÄ‚Äú$t:foterm‚Äù, ·µÄ‚Äú$u:foterm‚Äù]) => `(‚Äú $t:foterm ‚â§ $u   ‚Äù)
  | `($_ op(‚â§) ![·µÄ‚Äú$t:foterm‚Äù, #$y:term    ]) => `(‚Äú $t:foterm ‚â§ #$y  ‚Äù)
  | `($_ op(‚â§) ![·µÄ‚Äú$t:foterm‚Äù, &$y:term    ]) => `(‚Äú $t:foterm ‚â§ &$y  ‚Äù)
  | `($_ op(‚â§) ![·µÄ‚Äú$t:foterm‚Äù, $u          ]) => `(‚Äú $t:foterm ‚â§ !!$u ‚Äù)
  | `($_ op(‚â§) ![#$x:term,     ·µÄ‚Äú$u:foterm‚Äù]) => `(‚Äú #$x       ‚â§ $u   ‚Äù)
  | `($_ op(‚â§) ![#$x:term,     #$y:term    ]) => `(‚Äú #$x       ‚â§ #$y  ‚Äù)
  | `($_ op(‚â§) ![#$x:term,     &$y:term    ]) => `(‚Äú #$x       ‚â§ &$y  ‚Äù)
  | `($_ op(‚â§) ![#$x:term,     $u          ]) => `(‚Äú #$x       ‚â§ !!$u ‚Äù)
  | `($_ op(‚â§) ![&$x:term,     ·µÄ‚Äú$u:foterm‚Äù]) => `(‚Äú &$x       ‚â§ $u   ‚Äù)
  | `($_ op(‚â§) ![&$x:term,     #$y:term    ]) => `(‚Äú &$x       ‚â§ #$y  ‚Äù)
  | `($_ op(‚â§) ![&$x:term,     &$y:term    ]) => `(‚Äú &$x       ‚â§ &$y  ‚Äù)
  | `($_ op(‚â§) ![&$x:term,     $u          ]) => `(‚Äú &$x       ‚â§ !!$u ‚Äù)
  | `($_ op(‚â§) ![$t:term,      ·µÄ‚Äú$u:foterm‚Äù]) => `(‚Äú !!$t      ‚â§ $u   ‚Äù)
  | `($_ op(‚â§) ![$t:term,      #$y:term    ]) => `(‚Äú !!$t      ‚â§ #$y  ‚Äù)
  | `($_ op(‚â§) ![$t:term,      &$y:term    ]) => `(‚Äú !!$t      ‚â§ &$y  ‚Äù)
  | `($_ op(‚â§) ![$t:term,      $u          ]) => `(‚Äú !!$t      ‚â§ !!$u ‚Äù)
  | _                                         => throw ()

end delab

/-
section
variable [L.Mul]

def divides : Finitary.{u, v} L 2 := Abbrev.divides.toOperator

lemma divides_eq (t‚ÇÅ t‚ÇÇ : Semiterm L Œº n) :
  divides.operator ![t‚ÇÅ, t‚ÇÇ] = ‚Äú‚àÉ #0 * !!(.bShift t‚ÇÅ) = !!(.bShift t‚ÇÇ)‚Äù := by
  simp[divides, Abbrev.divides, Abbrev.toOperator, substs_ex]

end
-/

end Semiformula

namespace Order
variable {T : Theory L} [ùêÑùê™ ‚âæ T]

noncomputable def leIffEqOrLt : T ‚ä¢ ‚Äú‚àÄ ‚àÄ (#0 ‚â§ #1 ‚Üî #0 = #1 ‚à® #0 < #1)‚Äù :=
  Complete.complete
    (consequence_iff.mpr $ fun _ _ _ _ => by simp[models_def, Semiformula.Operator.LE.def_of_Eq_of_LT])

lemma provOf (œÉ : Sentence L)
  (H : ‚àÄ (M : Type u)
         [Nonempty M]
         [_root_.LT M]
         [Structure L M]
         [Structure.Eq L M]
         [Structure.LT L M]
         [Theory.Mod M T],
         M ‚äß‚Çò œÉ) :
    T ‚ä® œÉ := consequence_iff_eq.mpr fun M _ _ _ hT =>
  letI : Theory.Mod (Structure.Model L M) T := ‚ü®((Structure.ElementaryEquiv.modelsTheory (Structure.Model.elementaryEquiv L M)).mp hT)‚ü©
  (Structure.ElementaryEquiv.models (Structure.Model.elementaryEquiv L M)).mpr
    (H (Structure.Model L M))

end Order

end FirstOrder

end LO
