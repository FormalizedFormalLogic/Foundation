import Logic.FirstOrder.Basic
import Logic.FirstOrder.Completeness.Completeness
import Logic.FirstOrder.Completeness.Lemmata
--import Logic.FirstOrder.Principia.Meta

namespace LO

namespace FirstOrder

variable {L : Language.{u}} [Semiformula.Operator.Eq L] [Semiformula.Operator.LT L]

open Semiformula

def LT.le : Operator L 2 := Semiformula.Operator.Eq.eq.or Semiformula.Operator.LT.lt

lemma le_eq (t‚ÇÅ t‚ÇÇ : Semiterm L Œº n) : LT.le.operator ![t‚ÇÅ, t‚ÇÇ] = ‚Äú!!t‚ÇÅ = !!t‚ÇÇ ‚à® !!t‚ÇÅ < !!t‚ÇÇ‚Äù := by
  simp [Operator.operator, Operator.or, LT.le, ‚ÜêRew.hom_comp_app, ‚ÜêMatrix.fun_eq_vec‚ÇÇ]

namespace Semiformula
/-
section
variable [L.Mul]

def divides : Finitary.{u, v} L 2 := Abbrev.divides.toOperator

lemma divides_eq (t‚ÇÅ t‚ÇÇ : Semiterm L Œº n) :
  divides.operator ![t‚ÇÅ, t‚ÇÇ] = ‚Äú‚àÉ #0 * !!(.bShift t‚ÇÅ) = !!(.bShift t‚ÇÇ)‚Äù := by
  simp[divides, Abbrev.divides, Abbrev.toOperator, substs_ex]

end
-/

end Semiformula

namespace Order
variable {T : Theory L} [ùêÑùêê ‚âº T]

noncomputable def leIffEqOrLt : T ‚ä¢! ‚Äú‚àÄ x y, x ‚â§ y ‚Üî x = y ‚à® x < y‚Äù :=
  complete
    (consequence_iff.mpr $ fun _ _ _ _ => by simp[models_def, Semiformula.Operator.LE.def_of_Eq_of_LT])

lemma provOf (œÉ : Sentence L)
  (H : ‚àÄ (M : Type (max u w))
         [Nonempty M] [LT M]
         [Structure L M] [Structure.Eq L M] [Structure.LT L M]
         [M ‚äß‚Çò* T],
         M ‚äß‚Çò œÉ) :
    T ‚ä® œÉ := consequence_iff_consequence.{u, w}.mp <| consequence_iff_eq.mpr fun M _ _ _ hT =>
  letI : (Structure.Model L M) ‚äß‚Çò* T :=
    ((Structure.ElementaryEquiv.modelsTheory (Structure.Model.elementaryEquiv L M)).mp hT)
  (Structure.ElementaryEquiv.models (Structure.Model.elementaryEquiv L M)).mpr (H (Structure.Model L M))

end Order

end FirstOrder

end LO
