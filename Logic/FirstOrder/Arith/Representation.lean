import Logic.FirstOrder.Arith.PAminus
import Logic.Vorspiel.Arith
import Logic.FirstOrder.Computability.Calculus

namespace LO

namespace FirstOrder

namespace Arith

open Encodable

scoped notation: max "‚∏¢" a "‚∏£" => Semiterm.Operator.godelNumber ‚Ñí‚Çí·µ£ a

@[simp] lemma godelNumber_encode_eq {Œ±} [Primcodable Œ±] (a : Œ±) :
    (‚∏¢encode a‚∏£ : Semiterm.Const ‚Ñí‚Çí·µ£) = ‚∏¢a‚∏£ := by simp[Semiterm.Operator.godelNumber]

open Nat.ArithPart‚ÇÅ

def codeAux : {k : ‚Ñï} ‚Üí Nat.ArithPart‚ÇÅ.Code k ‚Üí Formula ‚Ñí‚Çí·µ£ (Fin (k + 1))
  | _, Code.zero _    => ‚Äú&0 = 0‚Äù
  | _, Code.one _     => ‚Äú&0 = 1‚Äù
  | _, Code.add i j   => ‚Äú&0 = !!&i.succ + !!&j.succ‚Äù
  | _, Code.mul i j   => ‚Äú&0 = !!&i.succ * !!&j.succ‚Äù
  | _, Code.equal i j => ‚Äú(!!&i.succ = !!&j.succ ‚àß &0 = 1) ‚à® (!!&i.succ ‚â† !!&j.succ ‚àß &0 = 0)‚Äù
  | _, Code.lt i j    => ‚Äú(!!&i.succ < !!&j.succ ‚àß &0 = 1) ‚à® (¬¨!!&i.succ < !!&j.succ ‚àß &0 = 0)‚Äù
  | _, Code.proj i    => ‚Äú&0 = !!&i.succ‚Äù
  | _, Code.comp c d  =>
    exClosure (((Rew.bind ![] (&0 :> (#¬∑))).hom (codeAux c)) ‚ãè
      Matrix.conj fun i => (Rew.bind ![] (#i :> (&¬∑.succ))).hom (codeAux (d i)))
  | _, Code.rfind c   =>
    (Rew.bind ![] (‚∏¢0‚∏£ :> &0 :> (&¬∑.succ))).hom (codeAux c) ‚ãè
    (‚àÄ[‚Äú#0 < &0‚Äù] ‚àÉ' ‚Äú#0 ‚â† 0‚Äù ‚ãè (Rew.bind ![] (#0 :> #1 :> (&¬∑.succ))).hom (codeAux c))

def code (c : Code k) : Semisentence ‚Ñí‚Çí·µ£ (k + 1) := (Rew.bind ![] (#0 :> (#¬∑.succ))).hom (codeAux c)

section model

variable {M : Type} [Zero M] [One M] [Add M] [Mul M] [LT M] [ùêèùêÄ‚Åª.Mod M]

lemma codeAux_uniq {k} {c : Code k} {v : Fin k ‚Üí M} {z z' : M} :
    Semiformula.Val! M (z :> v) (codeAux c) ‚Üí Semiformula.Val! M (z' :> v) (codeAux c) ‚Üí z = z' := by
  induction c generalizing z z' <;> simp[code, codeAux]
  case zero => rintro rfl rfl; rfl
  case one  => rintro rfl rfl; rfl
  case add  => rintro rfl rfl; rfl
  case mul  => rintro rfl rfl; rfl
  case proj => rintro rfl rfl; rfl
  case equal i j =>
    by_cases hv : v i = v j <;> simp[hv]
    ¬∑ rintro rfl rfl; rfl
    ¬∑ rintro rfl rfl; rfl
  case lt i j =>
    by_cases hv : v i < v j <;> simp[hv, -not_lt, ‚Üênot_lt]
    ¬∑ rintro rfl rfl; rfl
    ¬∑ rintro rfl rfl; rfl
  case comp m n c d ihc ihd =>
    simp[Semiformula.eval_rew, Function.comp, Matrix.empty_eq, Matrix.comp_vecCons']
    intro w‚ÇÅ hc‚ÇÅ hd‚ÇÅ w‚ÇÇ hc‚ÇÇ hd‚ÇÇ;
    have : w‚ÇÅ = w‚ÇÇ := funext fun i => ihd i (hd‚ÇÅ i) (hd‚ÇÇ i)
    rcases this with rfl
    exact ihc hc‚ÇÅ hc‚ÇÇ
  case rfind c ih =>
    simp[Semiformula.eval_rew, Function.comp, Matrix.empty_eq, Matrix.comp_vecCons']
    intro h‚ÇÅ hm‚ÇÅ h‚ÇÇ hm‚ÇÇ
    by_contra hz
    wlog h : z < z' with Hz
    case inr =>
      have : z' < z := lt_of_le_of_ne (not_lt.mp h) (Ne.symm hz)
      exact Hz (k := k) c ih h‚ÇÇ hm‚ÇÇ h‚ÇÅ hm‚ÇÅ (Ne.symm hz) this
    have : ‚àÉ x, x ‚â† 0 ‚àß (Semiformula.Val! M (x :> z :> fun i => v i)) (codeAux c) := hm‚ÇÇ z h
    rcases this with ‚ü®x, xz, hx‚ü©
    exact xz (ih hx h‚ÇÅ)

lemma code_uniq {k} {c : Code k} {v : Fin k ‚Üí M} {z z' : M} :
    Semiformula.PVal! M (z :> v) (code c) ‚Üí Semiformula.PVal! M (z' :> v) (code c) ‚Üí z = z' := by
  simp[code, Semiformula.eval_rew, Matrix.empty_eq, Function.comp, Matrix.comp_vecCons']
  exact codeAux_uniq

end model

lemma codeAux_sigma_one {k} (c : Nat.ArithPart‚ÇÅ.Code k) : Hierarchy Œ£ 1 (codeAux c) := by
  induction c <;> simp[codeAux, Matrix.fun_eq_vec‚ÇÇ]
  case comp c d ihc ihg =>
    exact Hierarchy.exClosure (by simp [ihc, ihg])
  case rfind k c ih => simp [ih]

lemma code_sigma_one {k} (c : Nat.ArithPart‚ÇÅ.Code k) : Hierarchy Œ£ 1 (code c) :=
  Hierarchy.rew _ (codeAux_sigma_one c)

lemma models_codeAux {c : Code k} {f : Vector ‚Ñï k ‚Üí. ‚Ñï} (hc : c.eval f) (y : ‚Ñï) (v : Fin k ‚Üí ‚Ñï) :
    Semiformula.Val! ‚Ñï (y :> v) (codeAux c) ‚Üî f (Vector.ofFn v) = Part.some y := by
  induction hc generalizing y <;> simp[code, codeAux, models_iff]
  case zero =>
    have : (0 : Part ‚Ñï) = Part.some 0 := rfl
    simp[this, eq_comm]
  case one =>
    have : (1 : Part ‚Ñï) = Part.some 1 := rfl
    simp[this, eq_comm]
  case equal i j =>
    by_cases hv : v i = v j <;> simp[hv, Nat.isEqNat, eq_comm]
  case lt i j =>
    by_cases hv : v i < v j <;> simp[hv, Nat.isLtNat, eq_comm]
    ¬∑ simp[Nat.not_le.mpr hv]
    ¬∑ intro _; exact Nat.not_lt.mp hv
  case add => simp[eq_comm]
  case mul => simp[eq_comm]
  case proj => simp[eq_comm]
  case comp c d f g _ _ ihf ihg =>
    simp[Semiformula.eval_rew, Function.comp, Matrix.empty_eq, Matrix.comp_vecCons']
    constructor
    ¬∑ rintro ‚ü®e, hf, hg‚ü©
      have hf : f (Vector.ofFn e) = Part.some y := (ihf _ _).mp hf
      have hg : ‚àÄ i, g i (Vector.ofFn v) = Part.some (e i) := fun i => (ihg i _ _).mp (hg i)
      simp[hg, hf]
    ¬∑ intro h
      have : ‚àÉ w, (‚àÄ i, Vector.get w i ‚àà g i (Vector.ofFn v)) ‚àß y ‚àà f w := by
        simpa using Part.eq_some_iff.mp h
      rcases this with ‚ü®w, hw, hy‚ü©
      exact ‚ü®w.get, (ihf y w.get).mpr (by simpa[Part.eq_some_iff] using hy),
        fun i => (ihg i (w.get i) v).mpr (by simpa[Part.eq_some_iff] using hw i)‚ü©
  case rfind c f _ ihf =>
    simp[Semiformula.eval_rew, Function.comp, Matrix.empty_eq, Matrix.comp_vecCons', ihf, Vector.ofFn_vecCons]
    constructor
    ¬∑ rintro ‚ü®hy, h‚ü©; simp[Part.eq_some_iff]
      exact ‚ü®by simpa using hy, by intro z hz; simpa using h z hz‚ü©
    ¬∑ intro h; simpa using Nat.mem_rfind.mp (Part.eq_some_iff.mp h)

lemma models_code {c : Code k} {f : Vector ‚Ñï k ‚Üí. ‚Ñï} (hc : c.eval f) (y : ‚Ñï) (v : Fin k ‚Üí ‚Ñï) :
    Semiformula.PVal! ‚Ñï (y :> v) (code c) ‚Üî y ‚àà f (Vector.ofFn v) := by
  simpa[code, models_iff, Semiformula.eval_rew, Matrix.empty_eq, Function.comp,
    Matrix.comp_vecCons', ‚ÜêPart.eq_some_iff] using models_codeAux hc y v

noncomputable def codeOfPartrec {k} (f : Vector ‚Ñï k ‚Üí. ‚Ñï) : Code k :=
  Classical.epsilon (fun c => ‚àÄ y v, Semiformula.PVal! ‚Ñï (y :> v) (code c) ‚Üî y ‚àà f (Vector.ofFn v))

lemma codeOfPartrec_spec {k} {f : Vector ‚Ñï k ‚Üí. ‚Ñï} (hf : Nat.Partrec' f) {y : ‚Ñï} {v : Fin k ‚Üí ‚Ñï} :
    Semiformula.PVal! ‚Ñï (y :> v) (code $ codeOfPartrec f) ‚Üî y ‚àà f (Vector.ofFn v) := by
  have : ‚àÉ c, ‚àÄ y v, Semiformula.PVal! ‚Ñï (y :> v) (code c) ‚Üî y ‚àà f (Vector.ofFn v) := by
    rcases Nat.ArithPart‚ÇÅ.exists_code (of_partrec hf) with ‚ü®c, hc‚ü©
    exact ‚ü®c, models_code hc‚ü©
  exact Classical.epsilon_spec this y v

variable {T : Theory ‚Ñí‚Çí·µ£} [ùêÑùê™ ‚âæ T] [ùêèùêÄ‚Åª ‚âæ T] [DecidablePred T] [SigmaOneSound T] [Theory.Computable T]

section representation

lemma provable_iff_mem_partrec {k} {f : Vector ‚Ñï k ‚Üí. ‚Ñï} (hf : Nat.Partrec' f) {y : ‚Ñï} {v : Fin k ‚Üí ‚Ñï} :
    (T ‚ä¢! (Rew.substs $ ‚∏¢y‚∏£ :> fun i => ‚∏¢v i‚∏£).hom (code $ codeOfPartrec f)) ‚Üî y ‚àà f (Vector.ofFn v) := by
  let œÉ : Sentence ‚Ñí‚Çí·µ£ := (Rew.substs $ ‚∏¢y‚∏£ :> fun i => ‚∏¢v i‚∏£).hom (code $ codeOfPartrec f)
  have sigma : Hierarchy Œ£ 1 œÉ :=
    (Hierarchy.rew (Rew.substs $ ‚∏¢y‚∏£ :> fun i => ‚∏¢v i‚∏£) (code_sigma_one (codeOfPartrec f)))
  constructor
  ¬∑ rintro ‚ü®b‚ü©
    have : Semiformula.PVal! ‚Ñï (y :> v) (code $ codeOfPartrec f) := by
      simpa[models_iff, Semiformula.eval_rew, Matrix.empty_eq, Function.comp, Matrix.comp_vecCons'] using
        Arith.SoundOn.sound sigma ‚ü®b‚ü©
    exact (codeOfPartrec_spec hf).mp this
  ¬∑ intro h
    exact ‚ü®Arith.sigma_one_completeness sigma (by
      simp[models_iff, Semiformula.eval_rew, Matrix.empty_eq,
        Function.comp, Matrix.comp_vecCons', codeOfPartrec_spec hf, h])‚ü©

variable (T)

lemma provable_iff_computable {k} {f : Vector ‚Ñï k ‚Üí ‚Ñï}
    (hf : Nat.Partrec' (f : Vector ‚Ñï k ‚Üí. ‚Ñï)) (v : Fin k ‚Üí ‚Ñï) :
    T ‚ä¢! (Rew.substs $ ‚∏¢f (Vector.ofFn v)‚∏£ :> (‚∏¢v ¬∑‚∏£)).hom (code $ codeOfPartrec f) :=
  (provable_iff_mem_partrec hf (T := T) (y := f (Vector.ofFn v)) (v := v)).mpr (by simp)

lemma provable_computable_code_uniq {k} {f : Vector ‚Ñï k ‚Üí ‚Ñï}
    (hf : Nat.Partrec' (f : Vector ‚Ñï k ‚Üí. ‚Ñï)) (v : Fin k ‚Üí ‚Ñï) :
    T ‚ä¢! ‚àÄ' ((Rew.substs $ #0 :> (‚∏¢v ¬∑‚∏£)).hom (code $ codeOfPartrec f)
      ‚ü∑ ‚Äú#0 = !!(‚∏¢f (Vector.ofFn v)‚∏£)‚Äù) :=
  Complete.consequence_iff_provable.mp (oRing_consequence_of _ _ (fun M _ _ _ _ _ _ => by
    haveI : ùêèùêÄ‚Åª.Mod M :=
      Theory.Mod.of_subtheory (T‚ÇÅ := T) M (Semantics.ofSystemSubtheory _ _)
    have Hfv : Semiformula.PVal! M (f (Vector.ofFn v) :> (v ¬∑)) (code (codeOfPartrec f)) := by
      simpa[models_iff, Semiformula.eval_substs, Matrix.comp_vecCons'] using
        consequence_iff'.mp (Sound.sound! (provable_iff_computable T hf v)) M
    simp[models_iff, Semiformula.eval_substs, Matrix.comp_vecCons']
    intro x; constructor
    ¬∑ intro H; exact code_uniq H Hfv
    ¬∑ rintro rfl; simpa))

variable {Œ± Œ≤ : Type*} {œÉ : Type*} [Primcodable Œ±] [Primcodable Œ≤] [Primcodable œÉ]

noncomputable def graph (f : Œ± ‚Üí. œÉ) : Semisentence ‚Ñí‚Çí·µ£ 2 :=
  code (codeOfPartrec fun x => Part.bind (decode (Œ± := Œ±) x.head) fun a => (f a).map encode)

noncomputable def graphTotal (f : Œ± ‚Üí œÉ) : Semisentence ‚Ñí‚Çí·µ£ 2 :=
  code (codeOfPartrec (fun x => Option.get! ((decode x.head).map (encode $ f ¬∑)) : Vector ‚Ñï 1 ‚Üí ‚Ñï))

noncomputable def graphTotal‚ÇÇ (f : Œ± ‚Üí Œ≤ ‚Üí œÉ) : Semisentence ‚Ñí‚Çí·µ£ 3 :=
  code (codeOfPartrec (fun x =>
    Option.get! ((decode x.head).bind fun y => (decode x.tail.head).map fun z =>
       (encode $ f y z)) : Vector ‚Ñï 2 ‚Üí ‚Ñï))

def toVecFun (f : Œ± ‚Üí. œÉ) : Vector ‚Ñï 1 ‚Üí. ‚Ñï := fun x => Part.bind (decode (Œ± := Œ±) x.head) fun a => (f a).map encode

theorem representation {f : Œ± ‚Üí. œÉ} (hf : Partrec f) {x y} :
    T ‚ä¢! (graph f)/[‚∏¢y‚∏£, ‚∏¢x‚∏£] ‚Üî y ‚àà f x := by
  let f' : Vector ‚Ñï 1 ‚Üí. ‚Ñï := fun x => Part.bind (decode (Œ± := Œ±) x.head) fun a => (f a).map encode
  have : Nat.Partrec' f' :=
    Nat.Partrec'.part_iff.mpr
      (Partrec.bind (Computable.ofOption $ Primrec.to_comp $ Primrec.decode.comp Primrec.vector_head)
      (Partrec.to‚ÇÇ <| Partrec.map (hf.comp .snd) (Computable.encode.comp‚ÇÇ .right)))
  simpa[Matrix.constant_eq_singleton] using
    provable_iff_mem_partrec this (y := encode y) (v := ![encode x])

theorem representation_computable {f : Œ± ‚Üí œÉ} (hf : Computable f) (a) :
    T ‚ä¢! ‚àÄ' ((graphTotal f)/[#0, ‚∏¢a‚∏£] ‚ü∑ ‚Äú#0 = !!‚∏¢f a‚∏£‚Äù) := by
  let f' : Vector ‚Ñï 1 ‚Üí ‚Ñï := fun x => Option.get! ((decode x.head).map (encode $ f ¬∑))
  have : Nat.Partrec' (f' : Vector ‚Ñï 1 ‚Üí. ‚Ñï) :=
    Nat.Partrec'.part_iff.mpr <| Computable.partrec <|
        (Primrec.option_get!).to_comp.comp <|
          Computable.option_map
            (Computable.decode.comp .vector_head) <|
              Computable.encode.comp‚ÇÇ <| hf.comp‚ÇÇ .right
  simpa[Matrix.comp_vecCons', Matrix.constant_eq_singleton] using
    provable_computable_code_uniq T this ![encode a]

theorem representation_computable‚ÇÇ {f : Œ± ‚Üí Œ≤ ‚Üí œÉ} (hf : Computable‚ÇÇ f) (a b) :
    T ‚ä¢! ‚àÄ' ((graphTotal‚ÇÇ f)/[#0, ‚∏¢a‚∏£, ‚∏¢b‚∏£] ‚ü∑ ‚Äú#0 = !!‚∏¢f a b‚∏£‚Äù) := by
  let f' : Vector ‚Ñï 2 ‚Üí ‚Ñï := fun v =>
    Option.get! ((decode v.head).bind fun x => (decode v.tail.head).map fun y => (encode $ f x y))
  have : Nat.Partrec' (f' : Vector ‚Ñï 2 ‚Üí. ‚Ñï) :=
    Nat.Partrec'.part_iff.mpr <| Computable.partrec <|
        (Primrec.option_get!).to_comp.comp <|
          Computable.option_bind
            (Computable.decode.comp .vector_head) <|
              Computable.option_map
                (Computable.decode.comp $ Computable.vector_head.comp $ Computable.vector_tail.comp .fst) <|
                  Computable.encode.comp‚ÇÇ <| hf.comp‚ÇÇ (Computable.snd.comp‚ÇÇ .left) .right
  simpa[Matrix.comp_vecCons' (fun x : ‚Ñï => (‚∏¢x‚∏£ : Semiterm ‚Ñí‚Çí·µ£ Empty 1)),
    Matrix.constant_eq_singleton, graphTotal‚ÇÇ] using
      provable_computable_code_uniq T this ![encode a, encode b]

noncomputable def pred (p : Œ± ‚Üí Prop) : Semisentence ‚Ñí‚Çí·µ£ 1 :=
  (graph (fun a => Part.assert (p a) fun _ => Part.some ()))/[‚∏¢()‚∏£, #0]

theorem pred_representation {p : Œ± ‚Üí Prop} (hp : RePred p) {x} :
    T ‚ä¢! (pred p)/[‚∏¢x‚∏£] ‚Üî p x := by
  simpa[pred, ‚ÜêRew.hom_comp_app, Rew.substs_comp_substs] using
    representation hp (T := T) (x := x) (y := ())

end representation

end Arith

end FirstOrder

end LO
