import Logic.FirstOrder.Arith.PeanoMinus
import Logic.Vorspiel.Arith

namespace LO.FirstOrder.Arith

open Mathlib Encodable Semiterm.Operator.GoedelNumber

open Nat.ArithPart‚ÇÅ

def codeAux : {k : ‚Ñï} ‚Üí Nat.ArithPart‚ÇÅ.Code k ‚Üí Formula ‚Ñí‚Çí·µ£ (Fin (k + 1))
  | _, Code.zero _    => ‚Äú&0 = 0‚Äù
  | _, Code.one _     => ‚Äú&0 = 1‚Äù
  | _, Code.add i j   => ‚Äú&0 = &i.succ + &j.succ‚Äù
  | _, Code.mul i j   => ‚Äú&0 = &i.succ * &j.succ‚Äù
  | _, Code.equal i j => ‚Äú(&i.succ = &j.succ ‚àß &0 = 1) ‚à® (&i.succ ‚â† &j.succ ‚àß &0 = 0)‚Äù
  | _, Code.lt i j    => ‚Äú(&i.succ < &j.succ ‚àß &0 = 1) ‚à® (&i.succ <Ã∏ &j.succ ‚àß &0 = 0)‚Äù
  | _, Code.proj i    => ‚Äú&0 = !!&i.succ‚Äù
  | _, Code.comp c d  =>
    exClosure (((Rew.bind ![] (&0 :> (#¬∑))).hom (codeAux c)) ‚ãè
      Matrix.conj fun i => (Rew.bind ![] (#i :> (&¬∑.succ))).hom (codeAux (d i)))
  | _, Code.rfind c   =>
    (Rew.bind ![] (‚Äò0‚Äô :> &0 :> (&¬∑.succ))).hom (codeAux c) ‚ãè
    (‚àÄ[‚Äúz. z < &0‚Äù] ‚àÉ' ‚Äúz. z ‚â† 0‚Äù ‚ãè (Rew.bind ![] (#0 :> #1 :> (&¬∑.succ))).hom (codeAux c))

def code (c : Code k) : Semisentence ‚Ñí‚Çí·µ£ (k + 1) := (Rew.bind ![] (#0 :> (#¬∑.succ))).hom (codeAux c)

section model

open LO.Arith

variable {M : Type*} [ORingStruc M] [M ‚äß‚Çò* ùêèùêÄ‚Åª]

private lemma codeAux_uniq {k} {c : Code k} {v : Fin k ‚Üí M} {z z' : M} :
    Semiformula.Evalfm M (z :> v) (codeAux c) ‚Üí Semiformula.Evalfm M (z' :> v) (codeAux c) ‚Üí z = z' := by
  induction c generalizing z z' <;> simp [code, codeAux]
  case zero => rintro rfl rfl; rfl
  case one  => rintro rfl rfl; rfl
  case add  => rintro rfl rfl; rfl
  case mul  => rintro rfl rfl; rfl
  case proj => rintro rfl rfl; rfl
  case equal i j =>
    by_cases hv : v i = v j <;> simp [hv]
    ¬∑ rintro rfl rfl; rfl
    ¬∑ rintro rfl rfl; rfl
  case lt i j =>
    by_cases hv : v i < v j <;> simp [hv, -not_lt, ‚Üênot_lt]
    ¬∑ rintro rfl rfl; rfl
    ¬∑ rintro rfl rfl; rfl
  case comp m n c d ihc ihd =>
    simp [Semiformula.eval_rew, Function.comp, Matrix.empty_eq, Matrix.comp_vecCons']
    intro w‚ÇÅ hc‚ÇÅ hd‚ÇÅ w‚ÇÇ hc‚ÇÇ hd‚ÇÇ;
    have : w‚ÇÅ = w‚ÇÇ := funext fun i => ihd i (hd‚ÇÅ i) (hd‚ÇÇ i)
    rcases this with rfl
    exact ihc hc‚ÇÅ hc‚ÇÇ
  case rfind c ih =>
    simp [Semiformula.eval_rew, Function.comp, Matrix.empty_eq, Matrix.comp_vecCons']
    intro h‚ÇÅ hm‚ÇÅ h‚ÇÇ hm‚ÇÇ
    by_contra hz
    wlog h : z < z' with Hz
    case inr =>
      have : z' < z := lt_of_le_of_ne (not_lt.mp h) (Ne.symm hz)
      exact Hz (k := k) c ih h‚ÇÇ hm‚ÇÇ h‚ÇÅ hm‚ÇÅ (Ne.symm hz) this
    have : ‚àÉ x, x ‚â† 0 ‚àß (Semiformula.Evalfm M (x :> z :> fun i => v i)) (codeAux c) := hm‚ÇÇ z h
    rcases this with ‚ü®x, xz, hx‚ü©
    exact xz (ih hx h‚ÇÅ)

lemma code_uniq {k} {c : Code k} {v : Fin k ‚Üí M} {z z' : M} :
    Semiformula.Evalbm M (z :> v) (code c) ‚Üí Semiformula.Evalbm M (z' :> v) (code c) ‚Üí z = z' := by
  simp [code, Semiformula.eval_rew, Matrix.empty_eq, Function.comp, Matrix.comp_vecCons']
  exact codeAux_uniq

end model

private lemma codeAux_sigma_one {k} (c : Nat.ArithPart‚ÇÅ.Code k) : Hierarchy ùö∫ 1 (codeAux c) := by
  induction c <;> simp [codeAux, Matrix.fun_eq_vec‚ÇÇ]
  case comp c d ihc ihg =>
    exact Hierarchy.exClosure (by simp [ihc, ihg])
  case rfind k c ih => simp [ih]

lemma code_sigma_one {k} (c : Nat.ArithPart‚ÇÅ.Code k) : Hierarchy ùö∫ 1 (code c) :=
  Hierarchy.rew _ (codeAux_sigma_one c)

@[simp] lemma natCast_nat (n : ‚Ñï) : Nat.cast n = n := by rfl

private lemma models_codeAux {c : Code k} {f : Vector ‚Ñï k ‚Üí. ‚Ñï} (hc : c.eval f) (y : ‚Ñï) (v : Fin k ‚Üí ‚Ñï) :
    Semiformula.Evalfm ‚Ñï (y :> v) (codeAux c) ‚Üî f (Vector.ofFn v) = Part.some y := by
  induction hc generalizing y <;> simp [code, codeAux, models_iff]
  case zero =>
    have : (0 : Part ‚Ñï) = Part.some 0 := rfl
    simp [this, eq_comm]
  case one =>
    have : (1 : Part ‚Ñï) = Part.some 1 := rfl
    simp [this, eq_comm]
  case equal i j =>
    by_cases hv : v i = v j <;> simp [hv, Nat.isEqNat, eq_comm]
  case lt i j =>
    by_cases hv : v i < v j <;> simp [hv, Nat.isLtNat, eq_comm]
    ¬∑ simp [Nat.not_lt.mp hv]
  case add => simp [eq_comm]
  case mul => simp [eq_comm]
  case proj => simp [eq_comm]
  case comp c d f g _ _ ihf ihg =>
    simp [Semiformula.eval_rew, Function.comp, Matrix.empty_eq, Matrix.comp_vecCons']
    constructor
    ¬∑ rintro ‚ü®e, hf, hg‚ü©
      have hf : f (Vector.ofFn e) = Part.some y := (ihf _ _).mp hf
      have hg : ‚àÄ i, g i (Vector.ofFn v) = Part.some (e i) := fun i => (ihg i _ _).mp (hg i)
      simp [hg, hf]
    ¬∑ intro h
      have : ‚àÉ w, (‚àÄ i, Vector.get w i ‚àà g i (Vector.ofFn v)) ‚àß y ‚àà f w := by
        simpa using Part.eq_some_iff.mp h
      rcases this with ‚ü®w, hw, hy‚ü©
      exact ‚ü®w.get, (ihf y w.get).mpr (by simpa[Part.eq_some_iff] using hy),
        fun i => (ihg i (w.get i) v).mpr (by simpa[Part.eq_some_iff] using hw i)‚ü©
  case rfind c f _ ihf =>
    simp [Semiformula.eval_rew, Function.comp, Matrix.empty_eq, Matrix.comp_vecCons', ihf, Vector.ofFn_vecCons]
    constructor
    ¬∑ rintro ‚ü®hy, h‚ü©; simp [Part.eq_some_iff]
      exact ‚ü®by simpa using hy, by intro z hz; simpa using h z hz‚ü©
    ¬∑ intro h; simpa using Nat.mem_rfind.mp (Part.eq_some_iff.mp h)

lemma models_code {c : Code k} {f : Vector ‚Ñï k ‚Üí. ‚Ñï} (hc : c.eval f) (y : ‚Ñï) (v : Fin k ‚Üí ‚Ñï) :
    Semiformula.Evalbm ‚Ñï (y :> v) (code c) ‚Üî y ‚àà f (Vector.ofFn v) := by
  simpa[code, models_iff, Semiformula.eval_rew, Matrix.empty_eq, Function.comp,
    Matrix.comp_vecCons', ‚ÜêPart.eq_some_iff] using models_codeAux hc y v

noncomputable def codeOfPartrec' {k} (f : Vector ‚Ñï k ‚Üí. ‚Ñï) : Semisentence ‚Ñí‚Çí·µ£ (k + 1) :=
  code <| Classical.epsilon (fun c ‚Ü¶ ‚àÄ y v, Semiformula.Evalbm ‚Ñï (y :> v) (code c) ‚Üî y ‚àà f (Vector.ofFn v))

lemma codeOfPartrec'_spec {k} {f : Vector ‚Ñï k ‚Üí. ‚Ñï} (hf : Nat.Partrec' f) {y : ‚Ñï} {v : Fin k ‚Üí ‚Ñï} :
    Semiformula.Evalbm ‚Ñï (y :> v) (codeOfPartrec' f) ‚Üî y ‚àà f (Vector.ofFn v) := by
  have : ‚àÉ c, ‚àÄ y v, Semiformula.Evalbm ‚Ñï (y :> v) (code c) ‚Üî y ‚àà f (Vector.ofFn v) := by
    rcases Nat.ArithPart‚ÇÅ.exists_code (of_partrec hf) with ‚ü®c, hc‚ü©
    exact ‚ü®c, models_code hc‚ü©
  exact Classical.epsilon_spec this y v

end Arith

end FirstOrder

end LO
