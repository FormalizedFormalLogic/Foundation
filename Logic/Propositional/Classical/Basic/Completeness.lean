import Logic.AutoProver.Prover
import Logic.Propositional.Classical.Basic.Semantics
import Logic.Propositional.Classical.Basic.Calculus

namespace LO

namespace Propositional.Classical

variable {Œ± : Type*} {Œî : Sequent Œ±}

namespace Derivation

theorem sound : ‚ä¢¬π Œî ‚Üí Semantics.Valid (Valuation Œ±) Œî.disj := by
  intro d v
  induction d
  case axL Œî a =>
    simp[List.map_disj]
    by_cases v a <;> simp[*]
  case verum => simp[List.map_disj]
  case and Œî p q _ _ ihp ihq =>
    by_cases hv : v ‚äß Œî.disj
    ¬∑ simp[hv]
    ¬∑ have : v ‚äß p := by simpa[hv] using ihp
      have : v ‚äß q := by simpa[hv] using ihq
      simp[*]
  case or Œî p q d ih =>
    simpa[or_assoc] using ih
  case wk Œî Œì _ ss ih =>
    have : ‚àÉ p ‚àà Œî, v ‚äß p := by simpa [List.map_disj] using ih
    rcases this with ‚ü®p, hp, hvp‚ü©
    simp [List.map_disj]; exact ‚ü®p, ss hp, hvp‚ü©
  case cut Œî p _ _ ihp ihn =>
    by_cases hv : v ‚äß Œî.disj
    ¬∑ simp[hv]
    ¬∑ have : v ‚äß p := by simpa[hv] using ihp
      have : ¬¨v ‚äß p := by simpa[hv] using ihn
      contradiction

end Derivation

lemma soundness {T : Theory (Formula Œ±)} {p} : T ‚ä¢! p ‚Üí T ‚ä®[Valuation Œ±] p := by
  rintro ‚ü®Œì, hŒì, d‚ü© v hT
  by_contra hv
  have : ‚àÄ v, v ‚äß p ‚à® ‚àÉ q ‚àà Œì, ¬¨v ‚äß q := by
    simpa [Semantics.Valid, List.map_disj] using Derivation.sound (Tait.ofConsRight d)
  have : ‚àÉ q ‚àà Œì, ¬¨v ‚äß q := by simpa [hv] using this v
  rcases this with ‚ü®q, hqŒì, hq‚ü©
  have : v ‚äß q := hT.realize (hŒì q hqŒì)
  contradiction

instance (T : Theory (Formula Œ±)) : Sound T (Semantics.models (Valuation Œ±) T.set)  := ‚ü®soundness‚ü©

section complete

def consistentTheory : Set (Theory (Formula Œ±)) := { U : Theory (Formula Œ±) | System.Consistent U }

variable {T : Theory (Formula Œ±)} (consisT : Consistent T)
open System Gentzen

lemma exists_maximal_consistent_theory :
    ‚àÉ Z, Consistent Z ‚àß T ‚äÜ Z ‚àß ‚àÄ U, Consistent U ‚Üí Z ‚äÜ U ‚Üí U = Z :=
  have : ‚àÉ Z : Set (Formula Œ±), Consistent Z.theory ‚àß T.set ‚äÜ Z ‚àß ‚àÄ U : Set (Formula Œ±), Consistent U.theory ‚Üí Z ‚äÜ U ‚Üí U = Z :=
    zorn_subset_nonempty { U : Set (Formula Œ±) | Consistent U.theory }
      (fun c hc chain hnc ‚Ü¶ ‚ü®‚ãÉ‚ÇÄ c,
       by simp
          by_contra A
          rcases System.inconsistent_compact.mp (System.not_consistent_iff_inconsistent.mp A) with ‚ü®ùìï, hùìï, fin, ùìï_consis‚ü©
          rcases Set.subset_mem_chain_of_finite c hnc chain (s := ùìï) fin hùìï with ‚ü®U, hUc, hsU‚ü©
          have : Consistent U.theory := hc hUc
          have : ¬¨Consistent U.theory := (ùìï_consis.of_supset hsU).not_con
          contradiction,
       fun s a => Set.subset_sUnion_of_mem a‚ü©) T consisT
  by rcases this with ‚ü®Z, con, ss, hZ‚ü©
     exact ‚ü®Z, con, ss, by intro U conU ssU; apply Theory.setext; simpa using hZ U conU ssU‚ü©

noncomputable def maximalConsistentTheory : Theory (Formula Œ±) :=
  Classical.choose (exists_maximal_consistent_theory consisT)

variable {consisT}

@[simp] lemma maximalConsistentTheory_consistent : Consistent (maximalConsistentTheory consisT) :=
  (Classical.choose_spec (exists_maximal_consistent_theory consisT)).1

@[simp] lemma subset_maximalConsistentTheory : T ‚äÜ maximalConsistentTheory consisT :=
  (Classical.choose_spec (exists_maximal_consistent_theory consisT)).2.1

lemma maximalConsistentTheory_maximal :
    ‚àÄ U, Consistent U ‚Üí maximalConsistentTheory consisT ‚äÜ U ‚Üí U = maximalConsistentTheory consisT :=
  (Classical.choose_spec (exists_maximal_consistent_theory consisT)).2.2

@[simp] lemma theory_maximalConsistentTheory_eq :
    Set.theory (theory (maximalConsistentTheory consisT)) = maximalConsistentTheory consisT :=
  maximalConsistentTheory_maximal (U := Set.theory <| theory (maximalConsistentTheory consisT)) (by simp)
    (by simpa [Theory.subset_def] using System.Axiomatized.axm_subset (maximalConsistentTheory consisT))

@[simp] lemma theory_maximalConsistentTheory_eq' :
    theory (maximalConsistentTheory consisT) = maximalConsistentTheory consisT :=
  congr_arg Theory.set <| theory_maximalConsistentTheory_eq (consisT := consisT)

lemma mem_or_neg_mem_maximalConsistentTheory (p) :
    p ‚àà maximalConsistentTheory consisT ‚à® ~p ‚àà maximalConsistentTheory consisT := by
  by_contra A
  have hp : p ‚àâ maximalConsistentTheory consisT ‚àß ~p ‚àâ maximalConsistentTheory consisT := by simpa [not_or] using A
  have : Consistent (insert p (maximalConsistentTheory consisT)) :=
    consistent_insert_iff_not_refutable.mpr
      (show ~p ‚àâ theory (maximalConsistentTheory consisT) from by simpa using hp.2)
  have : insert p (maximalConsistentTheory consisT) ‚â† maximalConsistentTheory consisT := by
    simp [hp, Theory.setext_iff]
  have : insert p (maximalConsistentTheory consisT) = maximalConsistentTheory consisT :=
    maximalConsistentTheory_maximal _ (by assumption) (by simp)
  contradiction

lemma mem_maximalConsistentTheory_iff :
    p ‚àà maximalConsistentTheory consisT ‚Üî maximalConsistentTheory consisT ‚ä¢! p :=
  ‚ü®fun h ‚Ü¶ ‚ü®System.Axiomatized.prfAxm _ h‚ü©, fun h ‚Ü¶ by have : p ‚àà theory (maximalConsistentTheory consisT) := h; simpa using this‚ü©

lemma maximalConsistentTheory_consistent' {p} :
    p ‚àà maximalConsistentTheory consisT ‚Üí ~p ‚àâ maximalConsistentTheory consisT := by
  intro h hn
  have : Inconsistent (maximalConsistentTheory consisT) :=
    System.inconsistent_iff_provable_bot.mpr
      (by prover [mem_maximalConsistentTheory_iff.mp h, mem_maximalConsistentTheory_iff.mp hn])
  have := this.not_con
  simp_all

lemma not_mem_maximalConsistentTheory_iff :
    p ‚àâ maximalConsistentTheory consisT ‚Üî maximalConsistentTheory consisT ‚ä¢! ~p := by
  by_cases hp : p ‚àà maximalConsistentTheory consisT <;> simp[hp]
  ¬∑ intro bnp
    have : Inconsistent (maximalConsistentTheory consisT) :=
      System.inconsistent_of_provable (by prover [mem_maximalConsistentTheory_iff.mp hp, bnp])
    have := this.not_con
    simp_all
  ¬∑ exact mem_maximalConsistentTheory_iff.mp
      (by simpa [hp] using mem_or_neg_mem_maximalConsistentTheory (consisT := consisT) p)

lemma mem_maximalConsistentTheory_and {p q} (h : p ‚ãè q ‚àà maximalConsistentTheory consisT) :
    p ‚àà maximalConsistentTheory consisT ‚àß q ‚àà maximalConsistentTheory consisT := by
  have : maximalConsistentTheory consisT ‚ä¢! p ‚ãè q := mem_maximalConsistentTheory_iff.mp h
  exact ‚ü®mem_maximalConsistentTheory_iff.mpr (by prover [this]),
         mem_maximalConsistentTheory_iff.mpr (by prover [this])‚ü©

lemma mem_maximalConsistentTheory_or {p q} (h : p ‚ãé q ‚àà maximalConsistentTheory consisT) :
    p ‚àà maximalConsistentTheory consisT ‚à® q ‚àà maximalConsistentTheory consisT := by
  by_contra A
  have b : maximalConsistentTheory consisT ‚ä¢! ~p ‚àß maximalConsistentTheory consisT ‚ä¢! ~q := by
    simpa [not_or, not_mem_maximalConsistentTheory_iff] using A
  have : Inconsistent (maximalConsistentTheory consisT) :=
    System.inconsistent_of_provable (by prover [b.1, b.2, mem_maximalConsistentTheory_iff.mp h])
  have := this.not_con
  simp_all

lemma maximalConsistentTheory_satisfiable :
    (‚ü®(Formula.atom ¬∑ ‚àà maximalConsistentTheory consisT)‚ü© : Valuation Œ±) ‚äß* maximalConsistentTheory consisT := ‚ü®by
  intro p hp
  induction p using Formula.rec' <;> simp
  case hatom => simpa
  case hnatom =>
    simpa using maximalConsistentTheory_consistent' hp
  case hfalsum =>
    have : Inconsistent (maximalConsistentTheory consisT) := System.inconsistent_of_provable ‚ü®System.Axiomatized.prfAxm _ hp‚ü©
    have := this.not_con
    simp_all
  case hand p q ihp ihq =>
    exact ‚ü®ihp (mem_maximalConsistentTheory_and hp).1, ihq (mem_maximalConsistentTheory_and hp).2‚ü©
  case hor p q ihp ihq =>
    rcases mem_maximalConsistentTheory_or hp with (hp | hq)
    ¬∑ left; exact ihp hp
    ¬∑ right; exact ihq hq‚ü©

lemma satisfiableTheory_of_consistent (consisT : Consistent T) : Semantics.Satisfiable (Valuation Œ±) T :=
  ‚ü®‚ü®(Formula.atom ¬∑ ‚àà maximalConsistentTheory consisT)‚ü©,
    Semantics.RealizeSet.of_subset maximalConsistentTheory_satisfiable (by simp [‚ÜêTheory.subset_def])‚ü©

theorem completeness! : T ‚ä®[Valuation Œ±] p ‚Üí T ‚ä¢! p := by
  suffices Consistent (insert (~p) T) ‚Üí Semantics.Satisfiable (Valuation Œ±) (insert (~p) T) by
    contrapose
    intro hp hs
    have : Semantics.Satisfiable (Valuation Œ±) (insert (~p) T) :=
      this (consistent_insert_iff_not_refutable.mpr $ by simpa)
    rcases this with ‚ü®v, hv‚ü©
    have : v ‚äß* T := Semantics.RealizeSet.of_subset hv (by simp)
    have : v ‚äß p := hs _ this
    have : ¬¨v ‚äß p := by simpa using hv.realize (Set.mem_insert (~p) T)
    contradiction
  intro consis
  exact satisfiableTheory_of_consistent consis

noncomputable def completeness : T ‚ä®[Valuation Œ±] p ‚Üí T ‚ä¢ p :=
  Œª h ‚Ü¶ (completeness! h).prf

instance (T : Theory (Formula Œ±)) : Complete T (Semantics.models (Valuation Œ±) T.set)  where
  complete := completeness!

end complete

end Propositional.Classical

end LO
