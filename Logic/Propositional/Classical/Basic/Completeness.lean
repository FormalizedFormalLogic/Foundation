import Logic.Propositional.Classical.Basic.Semantics
import Logic.Propositional.Classical.Basic.Calculus

namespace LO

namespace Propositional.Classical

variable {Œ± : Type*} {T : Theory Œ±} {Œî : Sequent Œ±}

namespace Derivation

theorem sound : T ‚üπ Œî ‚Üí T ‚ä®[Valuation Œ±] Œî.disj := by
  intro d v hv
  induction d
  case axL Œî a =>
    simp [List.map_disj]
    by_cases v a <;> simp [*]
  case verum => simp [List.map_disj]
  case and Œî p q _ _ ihp ihq =>
    by_cases hv : v ‚äß Œî.disj
    ¬∑ simp [hv]
    ¬∑ have : v ‚äß p := by simpa[hv] using ihp
      have : v ‚äß q := by simpa[hv] using ihq
      simp [*]
  case or Œî p q d ih =>
    simpa [or_assoc] using ih
  case wk Œî Œì _ ss ih =>
    have : ‚àÉ p ‚àà Œî, v ‚äß p := by simpa [List.map_disj] using ih
    rcases this with ‚ü®p, hp, hvp‚ü©
    simp [List.map_disj]; exact ‚ü®p, ss hp, hvp‚ü©
  case cut Œî p _ _ ihp ihn =>
    by_cases hv : v ‚äß Œî.disj
    ¬∑ simp [hv]
    ¬∑ have : v ‚äß p := by simpa[hv] using ihp
      have : ¬¨v ‚äß p := by simpa[hv] using ihn
      contradiction
  case root p h =>
    have : v ‚äß* T := by simpa [Semantics.models] using hv
    simpa using Semantics.realizeSet_iff.mp hv h

end Derivation

lemma soundness {T : Theory Œ±} {p} : T ‚ä¢! p ‚Üí T ‚ä®[Valuation Œ±] p := by
  rintro ‚ü®b‚ü© v hv; simpa using Derivation.sound b hv

instance (T : Theory Œ±) : Sound T (Semantics.models (Valuation Œ±) T)  := ‚ü®soundness‚ü©

section complete

open Classical

def consistentTheory : Set (Theory Œ±) := { U : Theory Œ± | System.Consistent U }

variable {T : Theory Œ±} (consisT : System.Consistent T)

open System Derivation

lemma exists_maximal_consistent_theory :
    ‚àÉ Z, Consistent Z ‚àß T ‚äÜ Z ‚àß ‚àÄ U, Consistent U ‚Üí Z ‚äÜ U ‚Üí U = Z :=
  have : ‚àÉ Z : Theory Œ±, Consistent Z ‚àß T ‚äÜ Z ‚àß ‚àÄ U : Theory Œ±, Consistent U ‚Üí Z ‚äÜ U ‚Üí U = Z :=
    zorn_subset_nonempty { U : Theory Œ± | Consistent U }
      (fun c hc chain hnc ‚Ü¶ ‚ü®‚ãÉ‚ÇÄ c,
       by simp
          haveI : DecidableEq Œ± := Classical.typeDecidableEq Œ±
          by_contra A
          rcases System.inconsistent_compact.mp (System.not_consistent_iff_inconsistent.mp A) with ‚ü®ùìï, hùìï, fin, ùìï_consis‚ü©
          rcases Set.subset_mem_chain_of_finite c hnc chain (s := ùìï) fin hùìï with ‚ü®U, hUc, hsU‚ü©
          have : Consistent U := hc hUc
          have : ¬¨Consistent U := (ùìï_consis.of_supset hsU).not_con
          contradiction,
       fun s a => Set.subset_sUnion_of_mem a‚ü©) T consisT
  by rcases this with ‚ü®Z, con, ss, hZ‚ü©
     exact ‚ü®Z, con, ss, by intro U conU ssU; simpa using hZ U conU ssU‚ü©

noncomputable def maximalConsistentTheory : Theory Œ± :=
  Classical.choose (exists_maximal_consistent_theory consisT)

variable {consisT}

@[simp] lemma maximalConsistentTheory_consistent : Consistent (maximalConsistentTheory consisT) :=
  (Classical.choose_spec (exists_maximal_consistent_theory consisT)).1

@[simp] lemma subset_maximalConsistentTheory : T ‚äÜ maximalConsistentTheory consisT :=
  (Classical.choose_spec (exists_maximal_consistent_theory consisT)).2.1

lemma maximalConsistentTheory_maximal :
    ‚àÄ U, Consistent U ‚Üí maximalConsistentTheory consisT ‚äÜ U ‚Üí U = maximalConsistentTheory consisT :=
  (Classical.choose_spec (exists_maximal_consistent_theory consisT)).2.2

@[simp] lemma theory_maximalConsistentTheory_eq :
    theory (maximalConsistentTheory consisT) = maximalConsistentTheory consisT :=
  maximalConsistentTheory_maximal (U := theory (maximalConsistentTheory consisT)) (by simp)
    (by simpa using System.Axiomatized.axm_subset (maximalConsistentTheory consisT))

lemma mem_or_neg_mem_maximalConsistentTheory (p) :
    p ‚àà maximalConsistentTheory consisT ‚à® ‚àºp ‚àà maximalConsistentTheory consisT := by
  haveI : DecidableEq Œ± := Classical.typeDecidableEq Œ±
  by_contra A
  have hp : p ‚àâ maximalConsistentTheory consisT ‚àß ‚àºp ‚àâ maximalConsistentTheory consisT := by simpa [not_or] using A
  have : Consistent (insert p (maximalConsistentTheory consisT)) :=
    Derivation.consistent_iff_unprovable.mpr
      (show ‚àºp ‚àâ theory (maximalConsistentTheory consisT) from by simpa using hp.2)
  have : insert p (maximalConsistentTheory consisT) ‚â† maximalConsistentTheory consisT := by
    simp [hp]
  have : insert p (maximalConsistentTheory consisT) = maximalConsistentTheory consisT :=
    maximalConsistentTheory_maximal _ (by assumption) (by simp)
  contradiction

lemma mem_maximalConsistentTheory_iff :
    p ‚àà maximalConsistentTheory consisT ‚Üî maximalConsistentTheory consisT ‚ä¢! p :=
  ‚ü®fun h ‚Ü¶ ‚ü®System.byAxm h‚ü©, fun h ‚Ü¶ by have : p ‚àà theory (maximalConsistentTheory consisT) := h; simpa using this‚ü©

lemma maximalConsistentTheory_consistent' {p} :
    p ‚àà maximalConsistentTheory consisT ‚Üí ‚àºp ‚àâ maximalConsistentTheory consisT := by
  intro h hn
  have : Inconsistent (maximalConsistentTheory consisT) :=
    System.inconsistent_iff_provable_bot.mpr
      (neg_mdp! (mem_maximalConsistentTheory_iff.mp hn) (mem_maximalConsistentTheory_iff.mp h))
  have := this.not_con
  simp_all

lemma not_mem_maximalConsistentTheory_iff :
    p ‚àâ maximalConsistentTheory consisT ‚Üî maximalConsistentTheory consisT ‚ä¢! ‚àºp := by
  by_cases hp : p ‚àà maximalConsistentTheory consisT <;> simp [hp]
  ¬∑ intro bnp
    have : Inconsistent (maximalConsistentTheory consisT) :=
      System.inconsistent_of_provable (neg_mdp! bnp (mem_maximalConsistentTheory_iff.mp hp))
    have := this.not_con
    simp_all
  ¬∑ exact mem_maximalConsistentTheory_iff.mp
      (by simpa [hp] using mem_or_neg_mem_maximalConsistentTheory (consisT := consisT) p)

lemma mem_maximalConsistentTheory_and {p q} (h : p ‚ãè q ‚àà maximalConsistentTheory consisT) :
    p ‚àà maximalConsistentTheory consisT ‚àß q ‚àà maximalConsistentTheory consisT := by
  have : maximalConsistentTheory consisT ‚ä¢! p ‚ãè q := mem_maximalConsistentTheory_iff.mp h
  exact ‚ü®mem_maximalConsistentTheory_iff.mpr (and_left! this),
         mem_maximalConsistentTheory_iff.mpr (and_right! this)‚ü©

lemma mem_maximalConsistentTheory_or {p q} (h : p ‚ãé q ‚àà maximalConsistentTheory consisT) :
    p ‚àà maximalConsistentTheory consisT ‚à® q ‚àà maximalConsistentTheory consisT := by
  by_contra A
  have b : maximalConsistentTheory consisT ‚ä¢! ‚àºp ‚àß maximalConsistentTheory consisT ‚ä¢! ‚àºq := by
    simpa [not_or, not_mem_maximalConsistentTheory_iff] using A
  have : Inconsistent (maximalConsistentTheory consisT) :=
    System.inconsistent_of_provable
      (or‚ÇÉ'''! (neg_equiv'!.mp b.1) (neg_equiv'!.mp b.2) (mem_maximalConsistentTheory_iff.mp h))
  have := this.not_con
  simp_all

lemma maximalConsistentTheory_satisfiable :
    Valuation.mk (Formula.atom ¬∑ ‚àà maximalConsistentTheory consisT) ‚äß* maximalConsistentTheory consisT := ‚ü®by
  intro p hp
  induction p using Formula.rec' <;> simp
  case hatom => simpa
  case hnatom =>
    simpa using maximalConsistentTheory_consistent' hp
  case hfalsum =>
    have : Inconsistent (maximalConsistentTheory consisT) := System.inconsistent_of_provable ‚ü®System.byAxm hp‚ü©
    have := this.not_con
    simp_all
  case hand p q ihp ihq =>
    exact ‚ü®ihp (mem_maximalConsistentTheory_and hp).1, ihq (mem_maximalConsistentTheory_and hp).2‚ü©
  case hor p q ihp ihq =>
    rcases mem_maximalConsistentTheory_or hp with (hp | hq)
    ¬∑ left; exact ihp hp
    ¬∑ right; exact ihq hq‚ü©

lemma satisfiable_of_consistent (consisT : Consistent T) : Semantics.Satisfiable (Valuation Œ±) T :=
  ‚ü®‚ü®(Formula.atom ¬∑ ‚àà maximalConsistentTheory consisT)‚ü©,
    Semantics.RealizeSet.of_subset maximalConsistentTheory_satisfiable (by simp)‚ü©

theorem completeness! : T ‚ä®[Valuation Œ±] p ‚Üí T ‚ä¢! p := by
  haveI : DecidableEq Œ± := Classical.typeDecidableEq Œ±
  suffices Consistent (insert (‚àºp) T) ‚Üí Semantics.Satisfiable (Valuation Œ±) (insert (‚àºp) T) by
    contrapose
    intro hp hs
    have : Semantics.Satisfiable (Valuation Œ±) (insert (‚àºp) T) :=
      this (Derivation.consistent_iff_unprovable.mpr $ by simpa)
    rcases this with ‚ü®v, hv‚ü©
    have : v ‚äß* T := Semantics.RealizeSet.of_subset hv (by simp)
    have : v ‚äß p := hs this
    have : ¬¨v ‚äß p := by simpa using hv.realize (Set.mem_insert (‚àºp) T)
    contradiction
  intro consis
  exact satisfiable_of_consistent consis

noncomputable def completeness : T ‚ä®[Valuation Œ±] p ‚Üí T ‚ä¢ p :=
  fun h ‚Ü¶ (completeness! h).get

instance (T : Theory Œ±) : Complete T (Semantics.models (Valuation Œ±) T)  where
  complete := completeness!

end complete

end Propositional.Classical

end LO
