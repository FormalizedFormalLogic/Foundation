import Logic.Propositional.Superintuitionistic.Deduction
import Logic.Propositional.Superintuitionistic.Classical.Deduction

namespace LO.Propositional.Superintuitionistic

open Hilbert Deduction

variable {Œ±} [DecidableEq Œ±]

infix:45 " ‚ä¢‚Å± " => Deduction ùêÑùêÖùêê
infix:45 " ‚ä¢‚Å±! " => Deducible ùêÑùêÖùêê
infix:45 " ‚ä¨‚Å±! " => Undeducible ùêÑùêÖùêê

instance : Hilbert.Intuitionistic (¬∑ ‚ä¢‚Å± ¬∑ : Theory Œ± ‚Üí Formula Œ± ‚Üí Type _) where
  axm          := axm;
  weakening'   := Deduction.weakening';
  modus_ponens h‚ÇÅ h‚ÇÇ := by
    rename_i Œì‚ÇÅ Œì‚ÇÇ p q
    replace h‚ÇÅ : (Œì‚ÇÅ ‚à™ Œì‚ÇÇ) ‚ä¢‚Å± p ‚ü∂ q := h‚ÇÅ.weakening' (by simp);
    replace h‚ÇÇ : (Œì‚ÇÅ ‚à™ Œì‚ÇÇ) ‚ä¢‚Å± p := h‚ÇÇ.weakening' (by simp);
    exact modusPonens h‚ÇÅ h‚ÇÇ;
  verum        := verum;
  imply‚ÇÅ       := imply‚ÇÅ;
  imply‚ÇÇ       := imply‚ÇÇ;
  conj‚ÇÅ        := conj‚ÇÅ;
  conj‚ÇÇ        := conj‚ÇÇ;
  conj‚ÇÉ        := conj‚ÇÉ;
  disj‚ÇÅ        := disj‚ÇÅ;
  disj‚ÇÇ        := disj‚ÇÇ;
  disj‚ÇÉ        := disj‚ÇÉ;
  efq Œì p      := eaxm (by simp);

namespace Deduction

variable {Œì : Theory Œ±} {p : Formula Œ±}

theorem deducible_Classical_of_Int (d : Œì ‚ä¢‚Å±! p) : (Œì ‚ä¢·∂ú! p) := by
  induction d.some with
  | axm => apply axm! (by assumption)
  | eaxm ih =>
    obtain ‚ü®q, hq‚ü© := ih;
    subst hq;
    apply efq!;
  | modusPonens h‚ÇÅ h‚ÇÇ ih‚ÇÅ ih‚ÇÇ => exact (ih‚ÇÅ ‚ü®h‚ÇÅ‚ü©) ‚®Ä (ih‚ÇÇ ‚ü®h‚ÇÇ‚ü©)
  | _ =>
    try first
    | apply verum!
    | apply imply‚ÇÅ!
    | apply imply‚ÇÇ!
    | apply conj‚ÇÅ!
    | apply conj‚ÇÇ!
    | apply conj‚ÇÉ!
    | apply disj‚ÇÅ!
    | apply disj‚ÇÇ!
    | apply disj‚ÇÉ!

/-- a.k.a. Glivenko's Theorem -/
theorem deducible_dn_iff_Int_Classical : (Œì ‚ä¢‚Å±! ~~p) ‚Üî (Œì ‚ä¢·∂ú! p) := by
  constructor;
  . intro d;
    exact dne'! $ deducible_Classical_of_Int d;
  . intro d;
    induction d.some with
    | axm h => exact dni'! $ axm! h;
    | @modusPonens p q h‚ÇÅ h‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
      have : Œì ‚ä¢‚Å±! ~~p ‚ü∂ ~~q := dn_distribute_imp_left'! $ ih‚ÇÅ ‚ü®h‚ÇÅ‚ü©;
      exact (by assumption) ‚®Ä ih‚ÇÇ ‚ü®h‚ÇÇ‚ü©;
    | eaxm ih =>
      obtain ‚ü®q, hq‚ü© := ih;
      subst hq;
      exact dn_disctribute_imp_right'! $ contra‚ÇÄ'! $ dni!;
    | _ =>
      apply dni'!;
      try first
      | apply verum!
      | apply imply‚ÇÅ!
      | apply imply‚ÇÇ!
      | apply conj‚ÇÅ!
      | apply conj‚ÇÇ!
      | apply conj‚ÇÉ!
      | apply disj‚ÇÅ!
      | apply disj‚ÇÇ!
      | apply disj‚ÇÉ!

alias glivenko := deducible_dn_iff_Int_Classical

theorem deducible_neg_iff_Int_Classical : (Œì ‚ä¢‚Å±! ~p) ‚Üî (Œì ‚ä¢·∂ú! ~p) := by
  constructor;
  . intro d; exact glivenko.mp $ dni'! d;
  . intro d; exact tne'! $ glivenko.mpr d;

end Deduction

end LO.Propositional.Superintuitionistic
