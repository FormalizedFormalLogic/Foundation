import Logic.Modal.Hilbert
import Logic.IntProp.Kripke.Semantics

/-!
  # Maximality of `ùêìùê´ùê¢ùêØ` and `ùêïùêûùê´`

  `ùêìùê´ùê¢ùêØ` and `ùêïùêûùê´` are maximal in normal modal logic.
-/

namespace LO.IntProp

def Formula.toModalFormula : Formula Œ± ‚Üí Modal.Formula Œ±
  | .atom a => Modal.Formula.atom a
  | ‚ä§ => ‚ä§
  | ‚ä• => ‚ä•
  | ~p => ~(toModalFormula p)
  | p ‚ûù q => (toModalFormula p) ‚ûù (toModalFormula q)
  | p ‚ãè q => (toModalFormula p) ‚ãè (toModalFormula q)
  | p ‚ãé q => (toModalFormula p) ‚ãé (toModalFormula q)
postfix:75 "·¥π" => Formula.toModalFormula

end LO.IntProp


namespace LO.Modal

open IntProp

variable {Œ±} [DecidableEq Œ±]

namespace Formula

def toPropFormula (p : Formula Œ±) (_ : p.degree = 0 := by simp_all [Formula.degree, Formula.degree_neg, Formula.degree_imp]) : IntProp.Formula Œ± :=
  match p with
  | atom a => IntProp.Formula.atom a
  | ‚ä• => ‚ä•
  | p ‚ûù q => p.toPropFormula ‚ûù q.toPropFormula
postfix:75 "·¥æ" => Formula.toPropFormula

namespace toPropFormula

open System
variable {p q : Formula Œ±} (hp : p.degree = 0 := by simpa) (hq : q.degree = 0 := by simpa)

end toPropFormula

def TrivTranslation : Formula Œ± ‚Üí Formula Œ±
  | atom a => atom a
  | ‚ñ°p => p.TrivTranslation
  | ‚ä• => ‚ä•
  | p ‚ûù q => (p.TrivTranslation) ‚ûù (q.TrivTranslation)
postfix:75 "·µÄ" => TrivTranslation

namespace TrivTranslation

@[simp] lemma degree_zero : p·µÄ.degree = 0 := by induction p <;> simp [TrivTranslation, degree, *];
@[simp] lemma back : p·µÄ·¥æ·¥π = p·µÄ := by induction p using rec' <;> simp [IntProp.Formula.toModalFormula, TrivTranslation, *];

end TrivTranslation


def VerTranslation : Formula Œ± ‚Üí Formula Œ±
  | atom a => atom a
  | ‚ñ°_ => ‚ä§
  | ‚ä• => ‚ä•
  | p ‚ûù q => (p.VerTranslation) ‚ûù (q.VerTranslation)
postfix:75 "‚±Ω" => VerTranslation

namespace VerTranslation

@[simp] lemma degree_zero : p‚±Ω.degree = 0 := by induction p <;> simp [degree, *];
@[simp] lemma back  : p‚±Ω·¥æ·¥π = p‚±Ω := by
  induction p using rec' with
  | himp => simp [VerTranslation, toPropFormula, IntProp.Formula.toModalFormula, *];
  | _ => rfl;

end VerTranslation

end Formula


open Deduction

variable {p : Formula Œ±}

open System
open Formula

macro_rules | `(tactic| trivial) => `(tactic|
    first
    | apply verum!
    | apply imply‚ÇÅ!
    | apply imply‚ÇÇ!
    | apply elim_contra!
    | apply elim_contra_neg!
    | apply and‚ÇÅ!
    | apply and‚ÇÇ!
    | apply and‚ÇÉ!
    | apply or‚ÇÅ!
    | apply or‚ÇÇ!
    | apply or‚ÇÉ!
    | apply neg_equiv!
    | apply dia_duality!
    | apply imp_id!;
  )

lemma deducible_iff_trivTranslation : ùêìùê´ùê¢ùêØ ‚ä¢! p ‚≠§ p·µÄ := by
  induction p using Formula.rec' with
  | hbox p ih =>
    simp [TrivTranslation];
    apply iff_intro!;
    . exact imp_trans''! axiomT! (and‚ÇÅ'! ih)
    . exact imp_trans''! (and‚ÇÇ'! ih) axiomTc!
  | himp _ _ ih‚ÇÅ ih‚ÇÇ => exact imp_replace_iff! ih‚ÇÅ ih‚ÇÇ;
  | _ => apply iff_id!

lemma deducible_iff_verTranslation : ùêïùêûùê´ ‚ä¢! p ‚≠§ p‚±Ω := by
  induction p using Formula.rec' with
  | hbox =>
    apply iff_intro!;
    . exact imply‚ÇÅ'! verum!
    . exact dhyp! (by simp)
  | himp _ _ ih‚ÇÅ ih‚ÇÇ => exact imp_replace_iff! ih‚ÇÅ ih‚ÇÇ;
  | _ => apply iff_id!

lemma of_classical {mŒõ : Modal.Hilbert Œ±} {p : IntProp.Formula Œ±} : (ùêÇùê• ‚ä¢! p) ‚Üí (mŒõ ‚ä¢! p·¥π) := by
  intro h;
  induction h.some with
  | eaxm ih =>
    simp_all;
    rcases ih with (‚ü®_, rfl‚ü© | ‚ü®_, rfl‚ü©);
    . exact efq!;
    . exact lem!;
  | mdp h‚ÇÅ h‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
    dsimp only [IntProp.Formula.toModalFormula] at ih‚ÇÅ ih‚ÇÇ;
    exact (ih‚ÇÅ ‚ü®h‚ÇÅ‚ü©) ‚®Ä (ih‚ÇÇ ‚ü®h‚ÇÇ‚ü©);
  | _ => dsimp [IntProp.Formula.toModalFormula]; trivial;

lemma iff_Triv_classical : ùêìùê´ùê¢ùêØ ‚ä¢! p ‚Üî ùêÇùê• ‚ä¢! p·µÄ·¥æ := by
  constructor;
  . intro h;
    induction h using Deduction.inducition_with_necOnly! with
    | hMaxm a =>
      rcases a with (‚ü®_, _, rfl‚ü© | ‚ü®_, rfl‚ü© | ‚ü®_, rfl‚ü©) <;>
      { dsimp [TrivTranslation]; trivial; };
    | hMdp ih‚ÇÅ ih‚ÇÇ =>
      dsimp [TrivTranslation] at ih‚ÇÅ ih‚ÇÇ;
      exact ih‚ÇÅ ‚®Ä ih‚ÇÇ;
    | hNec ih => dsimp [TrivTranslation]; trivial;
    | _ => dsimp [TrivTranslation]; trivial;
  . intro h;
    have d‚ÇÅ : ùêìùê´ùê¢ùêØ ‚ä¢! p·µÄ ‚ûù p := and‚ÇÇ'! deducible_iff_trivTranslation;
    have d‚ÇÇ : ùêìùê´ùê¢ùêØ ‚ä¢! p·µÄ := by simpa only [TrivTranslation.back] using of_classical h;
    exact d‚ÇÅ ‚®Ä d‚ÇÇ;

lemma iff_Ver_classical : ùêïùêûùê´ ‚ä¢! p ‚Üî ùêÇùê• ‚ä¢! p‚±Ω·¥æ := by
  constructor;
  . intro h;
    induction h using Deduction.inducition_with_necOnly! with
    | hMaxm a =>
      rcases a with (‚ü®_, _, rfl‚ü© | ‚ü®_, rfl‚ü©) <;>
      { dsimp [VerTranslation]; trivial; };
    | hMdp ih‚ÇÅ ih‚ÇÇ =>
      dsimp [VerTranslation] at ih‚ÇÅ ih‚ÇÇ;
      exact ih‚ÇÅ ‚®Ä ih‚ÇÇ;
    | hNec => dsimp [VerTranslation]; trivial;
    | _ => dsimp [VerTranslation]; trivial;
  . intro h;
    have d‚ÇÅ : ùêïùêûùê´ ‚ä¢! p‚±Ω ‚ûù p := and‚ÇÇ'! deducible_iff_verTranslation;
    have d‚ÇÇ : ùêïùêûùê´ ‚ä¢! p‚±Ω := by simpa using of_classical h;
    exact d‚ÇÅ ‚®Ä d‚ÇÇ;

lemma trivTranslated_of_K4 : ùêäùüí ‚ä¢! p ‚Üí ùêÇùê• ‚ä¢! p·µÄ·¥æ := by
  intro h;
  apply iff_Triv_classical.mp;
  exact System.weakerThan_iff.mp K4_weakerThan_Triv h;


lemma verTranslated_of_GL : ùêÜùêã ‚ä¢! p ‚Üí ùêÇùê• ‚ä¢! p‚±Ω·¥æ := by
  intro h;
  induction h using Deduction.inducition_with_necOnly! with
    | hMaxm a =>
      rcases a with (‚ü®_, _, rfl‚ü© | ‚ü®_, rfl‚ü©) <;>
      { simp only [VerTranslation]; trivial; };
    | hMdp ih‚ÇÅ ih‚ÇÇ =>
      dsimp [VerTranslation] at ih‚ÇÅ ih‚ÇÇ;
      exact ih‚ÇÅ ‚®Ä ih‚ÇÇ;
    | hNec => dsimp [VerTranslation]; exact imp_id!;
    | _ => dsimp [VerTranslation]; trivial;


open IntProp.Kripke (unprovable_classical_of_exists_ClassicalValuation)

variable [Inhabited Œ±]

example : ùêìùê´ùê¢ùêØ ‚ä¨! Axioms.L (atom default : Formula Œ±) := by
  apply iff_Triv_classical.not.mpr;
  apply unprovable_classical_of_exists_ClassicalValuation;
  simp [Axioms.L, TrivTranslation, toPropFormula, IntProp.Formula.Kripke.Satisfies];
  use (Œª _ => False);
  trivial;

lemma unprovable_AxiomL_K4 : ùêäùüí ‚ä¨! Axioms.L (atom default : Formula Œ±) := by
  apply not_imp_not.mpr trivTranslated_of_K4;
  apply unprovable_classical_of_exists_ClassicalValuation;
  simp [Axioms.L, TrivTranslation, toPropFormula, IntProp.Formula.Kripke.Satisfies];
  use (Œª _ => False);
  trivial;

theorem K4_strictReducible_GL : (ùêäùüí : Hilbert Œ±) <‚Çõ ùêÜùêã := by
  dsimp [StrictlyWeakerThan];
  constructor;
  . apply K4_weakerThan_GL;
  . simp [System.not_weakerThan_iff];
    existsi (Axioms.L (atom default))
    constructor;
    . exact axiomL!;
    . exact unprovable_AxiomL_K4;

lemma unprovable_AxiomT_GL : ùêÜùêã ‚ä¨! Axioms.T (atom default : Formula Œ±) := by
  apply not_imp_not.mpr verTranslated_of_GL;
  apply unprovable_classical_of_exists_ClassicalValuation;
  simp [Axioms.T, VerTranslation, toPropFormula, IntProp.Formula.Kripke.Satisfies];
  use (Œª _ => False);
  trivial;


instance instGLConsistencyViaUnprovableAxiomT : System.Consistent (ùêÜùêã : Hilbert Œ±) := by
  apply consistent_iff_exists_unprovable.mpr;
  existsi (Axioms.T (atom default));
  apply unprovable_AxiomT_GL;


theorem not_S4_weakerThan_GL : ¬¨(ùêíùüí : Hilbert Œ±) ‚â§‚Çõ ùêÜùêã := by
  apply System.not_weakerThan_iff.mpr;
  existsi (Axioms.T (atom default));
  constructor;
  . exact axiomT!;
  . exact unprovable_AxiomT_GL;


example : ùêïùêûùê´ ‚ä¨! (~(‚ñ°‚ä•) : Formula Œ±) := by
  apply iff_Ver_classical.not.mpr;
  apply unprovable_classical_of_exists_ClassicalValuation;
  dsimp [VerTranslation, toPropFormula, IntProp.Formula.Kripke.Satisfies];
  use (Œª _ => True);
  simp;

end LO.Modal
