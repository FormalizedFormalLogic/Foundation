import Logic.Modal.Kripke.Semantics
import Logic.Logic.Kripke.Preservation


namespace LO

namespace Kripke

abbrev IrreflexiveFrameClass : FrameClass := { F | Irreflexive F }

end Kripke


open LO.Kripke

namespace Modal.Kripke

open Formula

def ModalEquivalent {M‚ÇÅ M‚ÇÇ : Kripke.Model Œ±} (w‚ÇÅ : M‚ÇÅ.World) (w‚ÇÇ : M‚ÇÇ.World) : Prop := ‚àÄ {p}, w‚ÇÅ ‚äß p ‚Üî w‚ÇÇ ‚äß p
infix:50 " ‚Ü≠ " => ModalEquivalent

variable {F‚ÇÅ F‚ÇÇ : Kripke.Frame}
         {M‚ÇÅ M‚ÇÇ : Kripke.Model Œ±}

lemma modal_equivalent_of_bisimilar (Bi : M‚ÇÅ ‚áÑ M‚ÇÇ) (bisx : Bi x‚ÇÅ x‚ÇÇ) : x‚ÇÅ ‚Ü≠ x‚ÇÇ := by
  intro p;
  induction p using Formula.rec' generalizing x‚ÇÅ x‚ÇÇ with
  | hatom a => exact Bi.atomic bisx;
  | himp p q ihp ihq =>
    constructor;
    . intro hpq hp;
      exact ihq bisx |>.mp $ hpq $ ihp bisx |>.mpr hp;
    . intro hpq hp;
      exact ihq bisx |>.mpr $ hpq $ ihp bisx |>.mp hp;
  | hbox p ih =>
    constructor;
    . intro h y‚ÇÇ rx‚ÇÇy‚ÇÇ;
      obtain ‚ü®y‚ÇÅ, ‚ü®bisy, rx‚ÇÅy‚ÇÅ‚ü©‚ü© := Bi.back bisx rx‚ÇÇy‚ÇÇ;
      exact ih bisy |>.mp (h _ rx‚ÇÅy‚ÇÅ);
    . intro h y‚ÇÅ rx‚ÇÅy‚ÇÅ;
      obtain ‚ü®y‚ÇÇ, ‚ü®bisy, rx‚ÇÇy‚ÇÇ‚ü©‚ü© := Bi.forth bisx rx‚ÇÅy‚ÇÅ;
      exact ih bisy |>.mpr (h _ rx‚ÇÇy‚ÇÇ);
  | _ => simp_all;


lemma modal_equivalence_of_modal_morphism (f : M‚ÇÅ ‚Üí‚Çö M‚ÇÇ) (w : M‚ÇÅ.World) : w ‚Ü≠ (f w) := by
  apply modal_equivalent_of_bisimilar $ Model.PseudoEpimorphism.bisimulation f;
  simp [Model.PseudoEpimorphism.bisimulation];

lemma iff_formula_valid_on_frame_surjective_morphism (f : F‚ÇÅ ‚Üí‚Çö F‚ÇÇ) (f_surjective : Function.Surjective f) : F‚ÇÅ#Œ± ‚äß p ‚Üí F‚ÇÇ#Œ± ‚äß p := by
  contrapose;
  intro h;
  obtain ‚ü®V‚ÇÇ, w‚ÇÇ, h‚ü© := by simpa [Kripke.ValidOnFrame, Kripke.ValidOnModel] using h;
  simp [Kripke.ValidOnFrame, Kripke.ValidOnModel];

  obtain ‚ü®w‚ÇÅ, e‚ü© := f_surjective w‚ÇÇ; subst e;
  let V‚ÇÅ := Œª w a => V‚ÇÇ (f w) a;
  use V‚ÇÅ, w‚ÇÅ;

  let M‚ÇÅ : Model Œ± := { Frame := F‚ÇÅ, Valuation := V‚ÇÅ };
  let M‚ÇÇ : Model Œ± := { Frame := F‚ÇÇ, Valuation := V‚ÇÇ };
  exact modal_equivalence_of_modal_morphism (M‚ÇÅ := M‚ÇÅ) (M‚ÇÇ := M‚ÇÇ) {
    toFun := f,
    forth := f.forth,
    back := f.back,
    atomic := by simp_all
  } w‚ÇÅ |>.not.mpr h;

lemma iff_theory_valid_on_frame_surjective_morphism (f : F‚ÇÅ ‚Üí‚Çö F‚ÇÇ) (f_surjective : Function.Surjective f) : F‚ÇÅ#Œ± ‚äß* T ‚Üí F‚ÇÇ#Œ± ‚äß* T := by
  simp only [Semantics.realizeSet_iff];
  intro h p hp;
  exact iff_formula_valid_on_frame_surjective_morphism f f_surjective (h hp);

theorem undefinable_irreflexive : ¬¨‚àÉ (Œõ : Hilbert Œ±), ‚àÄ F, F ‚àà ùîΩ(Œõ) ‚Üî F ‚àà IrreflexiveFrameClass.{0} := by
  by_contra hC;
  obtain ‚ü®Ax, h‚ü© := hC;

  let F‚ÇÅ : Frame := { World := PUnit ‚äï PUnit, Rel := (¬∑ ‚â† ¬∑) };
  have hIF‚ÇÅ : Irreflexive F‚ÇÅ := by simp [Irreflexive, Frame.Rel'];

  let F‚ÇÇ : Frame := { World := PUnit, Rel := (¬∑ = ¬∑) };

  let f : F‚ÇÅ ‚Üí‚Çö F‚ÇÇ := {
    toFun := Œª _ => (),
    forth := by simp [Frame.Rel'],
    back := by simp_all [Frame.Rel'];
  };
  have f_surjective : Function.Surjective f := by simp [Function.Surjective];

  have : ¬¨Irreflexive F‚ÇÇ := by simp [Irreflexive];
  have : Irreflexive F‚ÇÇ := by simpa using
    (h F‚ÇÇ |>.mp $ (iff_theory_valid_on_frame_surjective_morphism f f_surjective ) (h F‚ÇÅ |>.mpr hIF‚ÇÅ));
  contradiction;

lemma modal_equivalent_at_root_on_generated_model
  (M : Model Œ±) (M_trans : Transitive M.Frame) (r : M.World) : ModalEquivalent (M‚ÇÅ := M‚Üær) (M‚ÇÇ := M) ‚ü®r, by simp‚ü© r
  := modal_equivalent_of_bisimilar (Model.PointGenerated.bisimulation M M_trans r) Model.PointGenerated.bisimulation.rooted

end Modal.Kripke

end LO
