import Logic.Logic.System
import Logic.Modal.Normal.Formula

namespace LO.Semantics

variable {M F : Type*} [LogicalConnective F] [ùì¢ : Semantics F M]

variable (ùìú : M) (p q : F)

variable (M)

/--
  Modeling `LO.System.Minimal`
-/
class HilbertMinimal where
  modusPonens {ùìú : M} {p q : F} : ùìú ‚äß p ‚ü∂ q ‚Üí ùìú ‚äß p ‚Üí ùìú ‚äß q
  verum {ùìú : M} : ùìú ‚äß ‚ä§
  imply‚ÇÅ {ùìú : M} {p q : F} : ùìú ‚äß p ‚ü∂ q ‚ü∂ p
  imply‚ÇÇ {ùìú : M} {p q r : F} : ùìú ‚äß (p ‚ü∂ q ‚ü∂ r) ‚ü∂ (p ‚ü∂ q) ‚ü∂ p ‚ü∂ r
  conj‚ÇÅ {ùìú : M} {p q : F} : ùìú ‚äß p ‚ãè q ‚ü∂ p
  conj‚ÇÇ {ùìú : M} {p q : F} : ùìú ‚äß p ‚ãè q ‚ü∂ q
  conj‚ÇÉ {ùìú : M} {p q : F} : ùìú ‚äß p ‚ü∂ q ‚ü∂ p ‚ãè q
  disj‚ÇÅ {ùìú : M} {p q : F} : ùìú ‚äß p ‚ü∂ p ‚ãé q
  disj‚ÇÇ {ùìú : M} {p q : F} : ùìú ‚äß q ‚ü∂ p ‚ãé q
  disj‚ÇÉ {ùìú : M} {p q r : F} : ùìú ‚äß (p ‚ü∂ r) ‚ü∂ (q ‚ü∂ r) ‚ü∂ p ‚ãé q ‚ü∂ r

/--
  Modeling `LO.System.Classical`
-/
class HilbertClassical extends HilbertMinimal M where
  dne {ùìú : M} {p : F} : ùìú ‚äß ~~p ‚ü∂ p

instance [Tarski M] : HilbertClassical M where
  modusPonens := by simp_all;
  verum := by simp_all;
  dne := by simp_all
  imply‚ÇÅ := by simp_all;
  imply‚ÇÇ := by simp_all;
  conj‚ÇÅ := by simp_all;
  conj‚ÇÇ := by simp_all;
  conj‚ÇÉ := by simp_all;
  disj‚ÇÅ := by simp_all;
  disj‚ÇÇ := by simp_all;
  disj‚ÇÉ := by
    intros;
    simp;
    intro hpr hqr hpq;
    cases hpq;
    . apply hpr; assumption;
    . apply hqr; assumption;

end LO.Semantics


namespace LO.Modal.Normal

namespace Kripkean

variable (W Œ± : Type*)

structure Frame (Œ± : Type*) where
  rel : W ‚Üí W ‚Üí Prop

instance : CoeFun (Frame W Œ±) (fun _ => W ‚Üí W ‚Üí Prop) := ‚ü®Frame.rel‚ü©

structure Valuation where
  val : W ‚Üí Œ± ‚Üí Prop

instance : CoeFun (Valuation W Œ±) (fun _ => W ‚Üí Œ± ‚Üí Prop) := ‚ü®Valuation.val‚ü©

structure Model where
  frame : Frame W Œ±
  valuation : Valuation W Œ±

abbrev FrameClass := Set (Frame W Œ±)

end Kripkean

variable {W : Type*} {Œ± : Type u}

open Normal.Kripkean

def Formula.Kripkean.Satisfies (M : Kripkean.Model W Œ±) (w : W) : Formula Œ± ‚Üí Prop
  | atom a  => M.valuation w a
  | falsum  => False
  | and p q => (Satisfies M w p) ‚àß (Satisfies M w q)
  | or p q  => (Satisfies M w p) ‚à® (Satisfies M w q)
  | imp p q => ¬¨(Satisfies M w p) ‚à® (Satisfies M w q)
  | box p   => ‚àÄ w', M.frame w w' ‚Üí (Satisfies M w' p)

instance : Semantics (Formula Œ±) ((Model W Œ±) √ó W) := ‚ü®fun ‚ü®M, w‚ü© ‚Ü¶ Formula.Kripkean.Satisfies M w‚ü©

open Formula.Kripkean

lemma models_iff_satisfies {M : Model W Œ±} {w : W} {f : Formula Œ±} : (M, w) ‚äß f ‚Üî Formula.Kripkean.Satisfies M w f := iff_of_eq rfl

instance : Semantics.Tarski ((Model W Œ±) √ó W) where
  realize_top := by simp [models_iff_satisfies, Satisfies]
  realize_bot := by simp [models_iff_satisfies, Satisfies]
  realize_not := by simp [models_iff_satisfies, Satisfies]
  realize_and := by simp [models_iff_satisfies, Satisfies]
  realize_or := by simp [models_iff_satisfies, Satisfies]
  realize_imp := by simp [models_iff_satisfies, Satisfies, imp_iff_not_or]

def Formula.Kripkean.Models (M : Model W Œ±) (f : Formula Œ±) := ‚àÄ w : W, (M, w) ‚äß f

instance : Semantics (Formula Œ±) (Model W Œ±) := ‚ü®fun M ‚Ü¶ Formula.Kripkean.Models M‚ü©

open Semantics.HilbertMinimal Semantics.HilbertClassical

instance : Semantics.HilbertClassical (Model W Œ±) where
  modusPonens := by intro M p q hpq hp w; have := hpq w; have := hp w; simp_all [models_iff_satisfies, Satisfies];
  verum _  := by apply verum;
  imply‚ÇÅ _ := by apply imply‚ÇÅ;
  imply‚ÇÇ _ := by apply imply‚ÇÇ;
  conj‚ÇÅ _  := by apply conj‚ÇÅ;
  conj‚ÇÇ _  := by apply conj‚ÇÇ;
  conj‚ÇÉ _  := by apply conj‚ÇÉ;
  disj‚ÇÅ _  := by apply disj‚ÇÅ;
  disj‚ÇÇ _  := by apply disj‚ÇÇ;
  disj‚ÇÉ _  := by apply disj‚ÇÉ;
  dne _    := by apply dne;

def Formula.Kripkean.Frames (F : Frame W Œ±) (f : Formula Œ±) := ‚àÄ V, (Model.mk F V) ‚äß f

instance : Semantics (Formula Œ±) (Frame W Œ±) := ‚ü®fun F ‚Ü¶ Formula.Kripkean.Frames F‚ü©

instance : Semantics.HilbertClassical (Frame W Œ±) where
  modusPonens hpq hp := by intro w; exact modusPonens (hpq w) (hp w);
  verum _ _  := by apply verum;
  imply‚ÇÅ _ _ := by apply imply‚ÇÅ;
  imply‚ÇÇ _ _ := by apply imply‚ÇÇ;
  conj‚ÇÅ _ _  := by apply conj‚ÇÅ;
  conj‚ÇÇ _ _  := by apply conj‚ÇÇ;
  conj‚ÇÉ _ _  := by apply conj‚ÇÉ;
  disj‚ÇÅ _ _  := by apply disj‚ÇÅ;
  disj‚ÇÇ _ _  := by apply disj‚ÇÇ;
  disj‚ÇÉ _ _  := by apply disj‚ÇÉ;
  dne _ _    := by apply dne;

def Formula.Kripkean.FramesClasses (ùîΩ : FrameClass W Œ±) (f : Formula Œ±) := ‚àÄ F ‚àà ùîΩ, F ‚äß f

instance : Semantics (Formula Œ±) (FrameClass W Œ±) := ‚ü®fun ùîΩ ‚Ü¶ Formula.Kripkean.FramesClasses ùîΩ‚ü©

instance : Semantics.HilbertClassical (FrameClass W Œ±) where
  modusPonens hpq hp := by intro F hF; exact modusPonens (hpq F hF) (hp F hF);
  verum _ _  := by apply verum;
  imply‚ÇÅ _ _ := by apply imply‚ÇÅ;
  imply‚ÇÇ _ _ := by apply imply‚ÇÇ;
  conj‚ÇÅ _ _  := by apply conj‚ÇÅ;
  conj‚ÇÇ _ _  := by apply conj‚ÇÇ;
  conj‚ÇÉ _ _  := by apply conj‚ÇÉ;
  disj‚ÇÅ _ _  := by apply disj‚ÇÅ;
  disj‚ÇÇ _ _  := by apply disj‚ÇÇ;
  disj‚ÇÉ _ _  := by apply disj‚ÇÉ;
  dne _ _    := by apply dne;

end LO.Modal.Normal
