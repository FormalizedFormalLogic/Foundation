import Logic.Modal.Normal.Semantics

namespace LO.Modal.Normal

variable {Œ± Œ≤ : Type u} [Inhabited Œ≤]

open Formula

namespace AxiomSet.L

variable {F: Frame Œ±}

private lemma implies_transitive : (‚äß·¥π[F] (ùêã : AxiomSet Œ≤)) ‚Üí Transitive F := by
  contrapose;
  intro hT; simp [Transitive] at hT;
  obtain ‚ü®w‚ÇÅ, w‚ÇÇ, w‚ÇÉ, r‚ÇÇ‚ÇÉ, r‚ÇÅ‚ÇÇ, nr‚ÇÅ‚ÇÉ‚ü© := hT;
  apply Theory.not_Frames;
  simp [axiomL, AxiomSet.L];
  existsi (Œª w' _ => (w' ‚â† w‚ÇÇ ‚àß w' ‚â† w‚ÇÉ)), w‚ÇÅ, (atom default);
  constructor;
  . intro x hx h;
    by_cases hx‚ÇÇ : x = w‚ÇÇ;
    . simp_all [hx‚ÇÇ]; simpa using h w‚ÇÉ r‚ÇÇ‚ÇÉ;
    . by_cases hx‚ÇÉ : x = w‚ÇÉ <;> simp_all [hx‚ÇÉ];
  . existsi w‚ÇÇ;
    aesop;

private lemma implies_cwf  : (‚äß·¥π[F] (ùêã : AxiomSet Œ≤)) ‚Üí ConverseWellFounded F := by
  contrapose;
  intro hCF;
  obtain ‚ü®X, hX‚ÇÅ, hX‚ÇÇ‚ü© := by simpa using ConverseWellFounded.iff_has_max.not.mp hCF;
  let V : Valuation Œ± Œ≤ := Œª w _ => w ‚àâ X;
  let w := hX‚ÇÅ.some;
  let a : Formula Œ≤ := atom default;
  apply Theory.not_Frames;
  simp [Theory.Satisfies, -Satisfies.box_def];
  existsi V, w, a;
  constructor;
  . simp only [Formula.Satisfies.box_def];
    intro x _;
    by_cases hxs : x ‚àà X
    . obtain ‚ü®y, hy‚ÇÅ, hy‚ÇÇ‚ü© := hX‚ÇÇ x hxs;
      simp only [Formula.Satisfies.imp_def];
      left;
      simp;
      existsi y;
      constructor;
      . simpa [flip] using hy‚ÇÇ;
      . simpa [V, w, a];
    . aesop;
  . obtain ‚ü®w', hw'‚ÇÅ, hw'‚ÇÇ‚ü© := hX‚ÇÇ w (by apply Set.Nonempty.some_mem);
    simp;
    existsi w';
    constructor;
    . simpa [flip] using hw'‚ÇÇ;
    . simp_all [V, w, a];

private lemma impliedby : (Transitive F ‚àß ConverseWellFounded F) ‚Üí (‚äß·¥π[F] (ùêã : AxiomSet Œ≤)) := by
  rintro ‚ü®hTrans, hWF‚ü©;
  simp [axiomL, AxiomSet.L];
  intro p V w;
  simp only [Formula.Satisfies.imp_def'];
  suffices (w ‚äÆ·¥π[‚ü®F, V‚ü©] ‚ñ°p) ‚Üí (w ‚äÆ·¥π[‚ü®F, V‚ü©] ‚ñ°(‚ñ°p ‚ü∂ p)) by exact not_imp_not.mp this;

  intro h; simp [Unsatisfies] at h;
  obtain ‚ü®z, rwz, hz‚ü© := h;
  obtain ‚ü®xm, ‚ü®hxm‚ÇÅ, hxm‚ÇÇ‚ü©‚ü© := hWF.has_min ({ x | (F w x) ‚àß (x ‚äÆ·¥π[‚ü®F, V‚ü©] p) }) (by existsi z; simp [rwz, hz];)

  have h‚ÇÅ : (xm ‚ä©·¥π[‚ü®F, V‚ü©] ‚ñ°p) := by
    simp [Satisfies.box_def];
    intro y hy;
    have : F w y := hTrans (by simp_all) hy;
    by_contra hC;
    have := hxm‚ÇÇ y ‚ü®(hTrans (by simp_all) hy), hC‚ü©;
    contradiction;
  have h‚ÇÇ : (xm ‚äÆ·¥π[‚ü®F, V‚ü©] (‚ñ°p ‚ü∂ p)) := by
    simp only [Unsatisfies, Formula.Satisfies.imp_def', not_imp];
    constructor;
    . exact h‚ÇÅ
    . simp_all;
  have h‚ÇÉ : w ‚äÆ·¥π[‚ü®F, V‚ü©] ‚ñ°(‚ñ°p ‚ü∂ p) := by
    simp [Unsatisfies, Satisfies.box_def, -Satisfies.imp_def'];
    existsi xm;
    constructor;
    . simp_all;
    . exact h‚ÇÇ;
  exact h‚ÇÉ;

lemma defines : AxiomSetDefinability Œ± Œ≤ (ùêã : AxiomSet Œ≤) (Œª F => Transitive F ‚àß ConverseWellFounded F) := ‚ü®
    by apply impliedby,
    by intro h; exact ‚ü®implies_transitive h, implies_cwf h‚ü©
  ‚ü©

end AxiomSet.L


namespace AxiomSet.GL

variable [Inhabited Œ±]

lemma defines_trans_converseWellFounded : AxiomSetDefinability Œ± Œ≤ ùêÜùêã (Œª F => (Transitive F ‚àß ConverseWellFounded F)) := by
  apply AxiomSetDefinability.union_with_K;
  exact AxiomSet.L.defines;

lemma defines_finite_trans_irreflexive [Finite Œ±] : AxiomSetDefinability Œ± Œ≤ ùêÜùêã (Œª F => (Transitive F ‚àß Irreflexive F)) := by
  intro F;
  simp;
  have hd := @defines_trans_converseWellFounded Œ± Œ≤ _;
  constructor;
  . intro h;
    obtain ‚ü®hTrans, hIrrefl‚ü© := h;
    have hCWF := @Finite.converseWellFounded_of_trans_irrefl _ F _ ‚ü®hTrans‚ü© ‚ü®hIrrefl‚ü©;
    exact hd.mp ‚ü®hTrans, hCWF‚ü©;
  . intro h;
    obtain ‚ü®hTrans, hCWF‚ü© := hd.mpr h;
    have := ConverseWellFounded.iff_has_max.mp hCWF;
    exact ‚ü®hTrans, (
      by
        by_contra hIrrefl;
        simp [Irreflexive] at hIrrefl;
        obtain ‚ü®w, h‚ü© := hIrrefl;
        have := this {w} (by simp);
        simp_all;
    )‚ü©

instance existsTrivialFiniteFrame [Finite Œ±] : Nonempty (ùîΩ((ùêÜùêã : AxiomSet Œ≤)) : FrameClass Œ±) := ‚ü®
  (Œª _ _ => False),
  (by
    apply defines_finite_trans_irreflexive.mp;
    constructor;
    . simp [Transitive];
    . simp [Irreflexive];
  )
‚ü©

end AxiomSet.GL

end LO.Modal.Normal
