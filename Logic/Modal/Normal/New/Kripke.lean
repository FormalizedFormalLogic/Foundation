import Logic.Logic.System
import Logic.Modal.Normal.Formula
import Logic.Modal.Normal.Axioms

namespace LO.Modal.Normal

namespace Kripkean

variable (W Œ± : Type*)

set_option linter.unusedVariables false in
abbrev Frame (Œ± : Type*) := W ‚Üí W ‚Üí Prop

@[simp]
def Multiframe (R : Frame W Œ±) : ‚Ñï ‚Üí W ‚Üí W ‚Üí Prop
| 0 => (¬∑ = ¬∑)
| n + 1 => Œª x y => ‚àÉ z, (R x z ‚àß Multiframe R n z y)

notation:max F "[" n "]" => Multiframe F n

abbrev Valuation := W ‚Üí Œ± ‚Üí Prop

structure Model where
  frame : Frame W Œ±
  valuation : Valuation W Œ±

abbrev FrameClass := Set (Frame W Œ±)

end Kripkean

variable {W Œ± : Type*}

open Normal.Kripkean

def Formula.Kripkean.Satisfies (M : Kripkean.Model W Œ±) (w : W) : Formula Œ± ‚Üí Prop
  | atom a  => M.valuation w a
  | falsum  => False
  | and p q => (Satisfies M w p) ‚àß (Satisfies M w q)
  | or p q  => (Satisfies M w p) ‚à® (Satisfies M w q)
  | imp p q => ¬¨(Satisfies M w p) ‚à® (Satisfies M w q)
  | box p   => ‚àÄ w', M.frame w w' ‚Üí (Satisfies M w' p)

instance : Semantics (Formula Œ±) ((Model W Œ±) √ó W) := ‚ü®fun ‚ü®M, w‚ü© ‚Ü¶ Formula.Kripkean.Satisfies M w‚ü©

open Formula.Kripkean

@[simp] lemma models_iff_satisfies : (M, w) ‚äß f ‚Üî Formula.Kripkean.Satisfies M w f := iff_of_eq rfl

instance : Semantics.Tarski ((Model W Œ±) √ó W) where
  realize_top := by simp [Satisfies]
  realize_bot := by simp [Satisfies]
  realize_not := by simp [Satisfies]
  realize_and := by simp [Satisfies]
  realize_or := by simp [Satisfies]
  realize_imp := by simp [Satisfies, imp_iff_not_or]

namespace Formula.Kripkean.Satisfies

variable {M : Model W Œ±} {w : W} {p q : Formula Œ±}

@[simp] lemma box_def : (M, w) ‚äß ‚ñ°p ‚Üî ‚àÄ w', M.frame w w' ‚Üí (M, w') ‚äß p := by simp [models_iff_satisfies, Satisfies];
@[simp] lemma dia_def : (M, w) ‚äß ‚óáp ‚Üî ‚àÉ w', M.frame w w' ‚àß (M, w') ‚äß p := by simp [models_iff_satisfies, Satisfies];

end Formula.Kripkean.Satisfies


def Formula.Kripkean.ValidOnModel (M : Model W Œ±) (f : Formula Œ±) := ‚àÄ w : W, (M, w) ‚äß f

instance : Semantics (Formula Œ±) (Model W Œ±) := ‚ü®fun M ‚Ü¶ Formula.Kripkean.ValidOnModel M‚ü©

@[simp] lemma models_iff_validOnModel : M ‚äß f ‚Üî Formula.Kripkean.ValidOnModel M f := iff_of_eq rfl

instance [Inhabited W] : Semantics.Bot (Model W Œ±) where
  realize_bot _ := by simp [ValidOnModel];


def Formula.Kripkean.ValidOnFrame (F : Frame W Œ±) (f : Formula Œ±) := ‚àÄ V, (Model.mk F V) ‚äß f

instance : Semantics (Formula Œ±) (Frame W Œ±) := ‚ü®fun F ‚Ü¶ Formula.Kripkean.ValidOnFrame F‚ü©

@[simp] lemma models_iff_validOnFrame : F ‚äß f ‚Üî Formula.Kripkean.ValidOnFrame F f := iff_of_eq rfl

instance [Inhabited W] : Semantics.Bot (Frame W Œ±) where
  realize_bot _ := by simp [ValidOnFrame];


def Formula.Kripkean.ValidOnFrameClass (ùîΩ : FrameClass W Œ±) (f : Formula Œ±) := ‚àÄ F ‚àà ùîΩ, F ‚äß f

instance : Semantics (Formula Œ±) (FrameClass W Œ±) := ‚ü®fun ùîΩ ‚Ü¶ Formula.Kripkean.ValidOnFrameClass ùîΩ‚ü©

@[simp] lemma models_iff_validOnFrameClass : ùîΩ ‚äß f ‚Üî Formula.Kripkean.ValidOnFrameClass ùîΩ f := iff_of_eq rfl


structure AxiomSetFrameClass (W) {Œ±} (Œõ : AxiomSet Œ±) where
  frameclass : FrameClass W Œ±
  spec : F ‚àà frameclass ‚Üî F ‚äß* Œõ

variable {Œõ : AxiomSet Œ±}

def Formula.Kripkean.ValidOnAxiomSetFrameClass (ùîΩ : AxiomSetFrameClass W Œõ) (f : Formula Œ±) := Formula.Kripkean.ValidOnFrameClass ùîΩ.frameclass f

instance : Semantics (Formula Œ±) (AxiomSetFrameClass W Œõ) := ‚ü®fun ùîΩ ‚Ü¶ Formula.Kripkean.ValidOnAxiomSetFrameClass ùîΩ‚ü©

@[simp] lemma models_iff_validOnAxiomSetFrameClass : ùîΩ ‚äß p ‚Üî Formula.Kripkean.ValidOnAxiomSetFrameClass ùîΩ p := iff_of_eq rfl

lemma validOnAxiomSetFrameClass_axiom {ùîΩ : AxiomSetFrameClass W Œõ} (h : p ‚àà Œõ) : ùîΩ ‚äß p := by
  intro F hF;
  exact ùîΩ.spec.mp hF |>.realize h;

class AxiomSetDefinability (W) (Œõ : AxiomSet Œ±) where
  property : Frame W Œ± ‚Üí Prop
  spec : ‚àÄ F, property F ‚Üî F ‚äß* Œõ

lemma iff_definability_memAxiomSetFrameClass [AxiomSetDefinability W Œõ] {ùîΩ : AxiomSetFrameClass W Œõ} : ‚àÄ {F}, AxiomSetDefinability.property Œõ F ‚Üî F ‚àà ùîΩ.frameclass := by
  simp [AxiomSetDefinability.spec, AxiomSetFrameClass.spec];

instance [h‚ÇÅ : AxiomSetDefinability W Œõ‚ÇÅ] [h‚ÇÇ : AxiomSetDefinability W Œõ‚ÇÇ] : AxiomSetDefinability W (Œõ‚ÇÅ ‚à™ Œõ‚ÇÇ) where
  property := Œª F => h‚ÇÅ.property F ‚àß h‚ÇÇ.property F
  spec := by intro F; constructor <;> simp_all [AxiomSetDefinability.spec];

instance : AxiomSetDefinability W (ùêä : AxiomSet Œ±) where
  property _ := True
  spec := by
    simp_all;
    intros; subst_vars;
    simp [ValidOnFrame, ValidOnModel, Satisfies];
    intros; simp_all;

instance {ùîΩ : AxiomSetFrameClass W (ùêä : AxiomSet Œ±)} : Set.Nonempty ùîΩ.frameclass := by
  existsi (Œª _ _ => True);
  apply iff_definability_memAxiomSetFrameClass.mp;
  trivial;

end LO.Modal.Normal
