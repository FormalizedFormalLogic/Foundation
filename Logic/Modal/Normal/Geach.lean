import Logic.Vorspiel.BinaryRelations
import Logic.Modal.Normal.Formula
import Logic.Modal.Normal.Axioms
import Logic.Modal.Normal.Semantics

namespace LO.Modal.Normal

@[simp] def AxiomGeach (p: Formula Œ±) (i j m n : ‚Ñï) := (‚óá[i](‚ñ°[m]p)) ‚ü∂ (‚ñ°[j](‚óá[n]p))

@[simp] def AxiomGeach.set (i j m n : ‚Ñï) : AxiomSet Œ± := { AxiomGeach p i j m n | (p) }

variable {Œ± : Type u} {Œ≤ : Type u}
variable [Inhabited Œ≤]

/--
variable (rel : Œ± ‚Üí Œ± ‚Üí Prop)
local infix:95 "‚â∫" => rel
-/

@[simp]
def Access (rel : Frame Œ±) : ‚Ñï ‚Üí Œ± ‚Üí Œ± ‚Üí Prop
| 0 => (¬∑ = ¬∑)
| n + 1 => Œª x y => ‚àÉ z, (rel x z ‚àß Access rel n z y)

@[simp]
def GeachConfluency (i j m n : ‚Ñï) (F : Frame Œ±) := ‚àÄ {x y z}, (Access F i x y) ‚àß (Access F j x z) ‚Üí ‚àÉ u, (Access F m y u) ‚àß (Access F n z u)

namespace Formula

@[simp] lemma multibox_zero : (‚ñ°[0]p) = p := by simp [multibox];
@[simp] lemma multibox_succ {n : ‚Ñï} : (‚ñ°[(n + 1)]p) = (‚ñ°(‚ñ°[n]p)) := by simp [multibox];

@[simp] lemma multidia_zero : (‚óá[0]p) = p := by simp [multidia];
@[simp] lemma multidia_succ {n : ‚Ñï} : (‚óá[(n + 1)]p) = (‚óá(‚óá[n]p)) := by simp [multidia];

namespace Satisfies

variable {M : Model Œ± Œ≤} {p : Formula Œ≤}

@[simp]
lemma multibox_def : (w ‚ä©·¥π[M] ‚ñ°[n]p) ‚Üî (‚àÄ v, (Access M.frame n) w v ‚Üí (v ‚ä©·¥π[M] p)) := by
  induction n generalizing w with
  | zero => simp;
  | succ n ih => aesop;

@[simp]
lemma multidia_def : (w ‚ä©·¥π[M] ‚óá[n]p) ‚Üî (‚àÉ v, Access M.frame n w v ‚àß (v ‚ä©·¥π[M] p)) := by
  induction n generalizing w with
  | zero => simp;
  | succ n ih => aesop;

end Satisfies

end Formula

theorem Geach.defines (F : Frame Œ±) : (GeachConfluency i j m n F) ‚Üî (‚äß·¥π[F] (AxiomGeach.set i j m n : AxiomSet Œ≤)) := by
  simp;
  constructor;
  . intro h p V x;
    simp only [Formula.Satisfies.imp_def'];
    intro him;
    obtain ‚ü®y, hy, hpy‚ü© := by simpa only [Formula.Satisfies.multidia_def] using him;
    simp;
    intro z hxz;
    obtain ‚ü®u, ‚ü®hyu, hzu‚ü©‚ü© := h hy hxz;
    existsi u;
    constructor;
    . exact hzu;
    . simp at hpy;
      exact hpy u hyu;
  . intro h x y z hi hj;
    let M : Model Œ± Œ≤ := {
      frame := F,
      val := Œª v _ => Access F m y v
    }
    have him : x ‚ä©·¥π[M] ‚óá[i]‚ñ°[m](Formula.atom default) := by aesop;
    have := h (Formula.atom default) M.val x |>.modus_ponens him;
    simp only [Formula.Satisfies.multibox_def] at this;
    obtain ‚ü®u, hzu, hyu‚ü© := by simpa using this z hj;
    existsi u;
    exact ‚ü®hyu, hzu‚ü©;

lemma _root_.Serial.geach : Serial rel ‚Üî GeachConfluency 0 0 1 1 rel := by
  simp [Serial];

lemma AxiomD.geach : AxiomD p = AxiomGeach p 0 0 1 1 := rfl

@[simp]
lemma AxiomD.set.geach : (AxiomD.set : AxiomSet Œ≤) = AxiomGeach.set 0 0 1 1 := rfl

lemma AxiomD.defines' : (Serial F) ‚Üî (‚äß·¥π[F] (AxiomD.set : AxiomSet Œ≤)) := by
  rw [Serial.geach, AxiomD.set.geach];
  apply Geach.defines;


lemma AxiomT.geach : AxiomT p = AxiomGeach p 0 0 1 0 := rfl

@[simp]
lemma AxiomT.set.geach : (AxiomT.set : AxiomSet Œ≤) = AxiomGeach.set 0 0 1 0 := rfl

lemma _root_.Reflexive.geach : Reflexive rel ‚Üî GeachConfluency 0 0 1 0 rel := by
  simp [Reflexive];

lemma AxiomT.defines' : (Reflexive F) ‚Üî (‚äß·¥π[F] (AxiomT.set : AxiomSet Œ≤)) := by
  rw [Reflexive.geach, AxiomT.set.geach];
  apply Geach.defines;


lemma AxiomB.geach : AxiomB p = AxiomGeach p 0 1 0 1 := rfl

@[simp]
lemma AxiomB.set.geach : (AxiomB.set : AxiomSet Œ≤) = AxiomGeach.set 0 1 0 1 := rfl

lemma _root_.Symmetric.geach : Symmetric rel ‚Üî GeachConfluency 0 1 0 1 rel := by
  simp [Symmetric];
  aesop;

lemma AxiomB.defines' : (Symmetric F) ‚Üî (‚äß·¥π[F] (AxiomB.set : AxiomSet Œ≤)) := by
  rw [Symmetric.geach, AxiomB.set.geach];
  apply Geach.defines;


lemma Axiom4.geach : Axiom4 p = AxiomGeach p 0 2 1 0 := rfl

@[simp]
lemma Axiom4.set.geach : (Axiom4.set : AxiomSet Œ≤) = AxiomGeach.set 0 2 1 0 := rfl

lemma _root_.Transitive.geach : Transitive rel ‚Üî GeachConfluency 0 2 1 0 rel := by
  simp [Transitive];
  aesop;

lemma Axiom4.defines' : (Transitive F) ‚Üî (‚äß·¥π[F] (Axiom4.set : AxiomSet Œ≤)) := by
  rw [Transitive.geach, Axiom4.set.geach];
  apply Geach.defines;


lemma Axiom5.geach : Axiom5 p = AxiomGeach p 1 1 0 1 := rfl

@[simp]
lemma Axiom5.set.geach : (Axiom5.set : AxiomSet Œ≤) = AxiomGeach.set 1 1 0 1 := rfl

lemma _root_.Euclidean.geach : Euclidean rel ‚Üî GeachConfluency 1 1 0 1 rel := by
  simp [Euclidean];
  aesop;

lemma Axiom5.defines' : (Euclidean F) ‚Üî (‚äß·¥π[F] (Axiom5.set : AxiomSet Œ≤)) := by
  rw [Euclidean.geach, Axiom5.set.geach];
  apply Geach.defines;


lemma AxiomDot2.geach : AxiomDot2 p = AxiomGeach p 1 1 1 1 := rfl

@[simp]
lemma AxiomDot2.set.geach : (AxiomDot2.set : AxiomSet Œ≤) = AxiomGeach.set 1 1 1 1 := rfl

lemma _root_.Confluent.geach : Confluent rel ‚Üî GeachConfluency 1 1 1 1 rel := by simp [Confluent];

lemma AxiomDot2.defines' : (Confluent F) ‚Üî (‚äß·¥π[F] (AxiomDot2.set : AxiomSet Œ≤)) := by
  rw [Confluent.geach, AxiomDot2.set.geach];
  apply Geach.defines;


def AxiomTc [ModalLogicSymbol F] (p : F) := p ‚ü∂ ‚ñ°p

def AxiomTc.set : AxiomSet Œ± := { AxiomTc p | p }

notation "ùêìùêú" => AxiomTc.set

@[simp] lemma AxiomTc.set.include : (AxiomTc p) ‚àà ùêìùêú := by simp [set];

@[simp]
lemma AxiomTc.set.geach : (AxiomTc.set : AxiomSet Œ≤) = AxiomGeach.set 0 1 0 0 := rfl

def _root_.Extensive (F : Œ± ‚Üí Œ± ‚Üí Prop) := ‚àÄ ‚¶Éx y‚¶Ñ, F x y ‚Üí x = y

lemma _root_.Extensive.geach : Extensive rel ‚Üî GeachConfluency 0 1 0 0 rel := by
  simp [Extensive];
  constructor;
  . intro h x y z hxy hxz;
    have := h hxz;
    subst hxy this;
    trivial;
  . intro h x y hyz;
    have := h rfl hyz;
    subst this;
    trivial;

lemma AxiomTc.defines' : (Extensive F) ‚Üî (‚äß·¥π[F] (AxiomTc.set : AxiomSet Œ≤)) := by
  rw [Extensive.geach, AxiomTc.set.geach];
  apply Geach.defines;


lemma _root_.Functional.geach : Functional rel ‚Üî GeachConfluency 1 1 0 0 rel := by simp [Functional]; aesop;

lemma AxiomCD.geach : AxiomCD p = AxiomGeach p 1 1 0 0 := rfl

@[simp]
lemma AxiomCD.set.geach : (AxiomCD.set : AxiomSet Œ≤) = AxiomGeach.set 1 1 0 0 := rfl

lemma AxiomCD.defines' : (Functional F) ‚Üî (‚äß·¥π[F] (AxiomCD.set : AxiomSet Œ≤)) := by
  rw [Functional.geach, AxiomCD.set.geach];
  apply Geach.defines;


lemma AxiomC4.geach : AxiomC4 p = AxiomGeach p 0 1 2 0 := rfl

@[simp]
lemma AxiomC4.set.geach : (AxiomC4.set : AxiomSet Œ≤) = AxiomGeach.set 0 1 2 0 := rfl

lemma _root_.Dense.geach : Dense rel ‚Üî GeachConfluency 0 1 2 0 rel := by
  simp [Dense];
  aesop;

lemma AxiomC4.defines' : (Dense F) ‚Üî (‚äß·¥π[F] (AxiomC4.set : AxiomSet Œ≤)) := by
  rw [Dense.geach, AxiomC4.set.geach];
  apply Geach.defines;


@[simp]
def GeachLogic : List (‚Ñï √ó ‚Ñï √ó ‚Ñï √ó ‚Ñï) ‚Üí Set (Formula Œ±)
  | [] => ùêä
  | (i, j, m, n) :: xs => (GeachLogic xs) ‚à™ (AxiomGeach.set i j m n)

lemma LogicK.geach : (LogicK : AxiomSet Œ≤) = (GeachLogic []) := rfl

lemma LogicKD.geach : (LogicKD : AxiomSet Œ≤) = (GeachLogic [(0, 0, 1, 1)]) := by simp [LogicKD];

def LogicKT : AxiomSet Œ± := ùêä ‚à™ ùêì

lemma LogicKT.geach : (LogicKT : AxiomSet Œ≤) = (GeachLogic [(0, 0, 1, 0)]) := by simp [LogicKT];

lemma LogicKT4.geach : (LogicKT4 : AxiomSet Œ≤) = (GeachLogic [(0, 0, 1, 0), (0, 2, 1, 0)]) := by
  simp [LogicKT4];
  aesop;

lemma LogicS4.geach : (LogicS4 : AxiomSet Œ≤) = (GeachLogic [(0, 0, 1, 0), (0, 2, 1, 0)]) := by apply LogicKT4.geach;

lemma LogicS4Dot2.geach : (LogicS4Dot2 : AxiomSet Œ≤) = (GeachLogic [(0, 0, 1, 0), (0, 2, 1, 0), (1, 1, 1, 1)]) := by
  simp [LogicKT4, LogicS4Dot2];
  aesop;

lemma LogicS5.geach : (LogicS5 : AxiomSet Œ≤) = (GeachLogic [(0, 0, 1, 0), (1, 1, 0, 1)]) := by
  simp [LogicKT5];
  aesop;


@[simp]
def GeachConfluency.list (l : List (‚Ñï √ó ‚Ñï √ó ‚Ñï √ó ‚Ñï)) (rel : Œ± ‚Üí Œ± ‚Üí Prop) : Prop :=
  match l with
  | [] => True
  | (i, j, m, n) :: xs => (GeachConfluency i j m n rel) ‚àß (GeachConfluency.list xs rel)


lemma AxiomGeach.FrameClassDefinability {i j m n : ‚Ñï} : @FrameClassDefinability Œ± Œ≤ (AxiomGeach.set i j m n) (GeachConfluency i j m n) := by
  intro F;
  have := @Geach.defines Œ± Œ≤ _ i j m n F;
  constructor;
  . intro h p hp; exact this.mp h p hp;
  . aesop;

lemma GeachLogic.FrameClassDefinability {l : List (‚Ñï √ó ‚Ñï √ó ‚Ñï √ó ‚Ñï)} : @FrameClassDefinability Œ± Œ≤ (GeachLogic l) (GeachConfluency.list l) := by
  induction l with
  | nil => simp; apply LogicK.FrameClassDefinability;
  | cons head tail ih =>
    simp only [GeachLogic, GeachConfluency.list, Normal.FrameClassDefinability, AxiomSetFrameClass.union];
    intro F;
    constructor;
    . intro h;
      exact Set.mem_inter (ih.mp h.2) (AxiomGeach.FrameClassDefinability.mp h.1)
    . intro h;
      exact ‚ü®AxiomGeach.FrameClassDefinability.mpr h.2, ih.mpr h.1‚ü©;

end LO.Modal.Normal
