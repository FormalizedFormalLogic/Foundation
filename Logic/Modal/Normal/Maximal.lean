import Logic.Modal.Normal.Formula
import Logic.Modal.Normal.Deduction

/-!
  # Maximality of `ùêìùê´ùê¢ùêØ` and `ùêïùêûùê´`

  `ùêìùê´ùê¢ùêØ` and `ùêïùêûùê´` are maximal in normal modal logic.
-/

namespace LO.Modal.Normal

variable {Œ±} [DecidableEq Œ±]

namespace Formula

def TrivTranslation : Formula Œ± ‚Üí Formula Œ±
  | atom a => atom a
  | box p => p.TrivTranslation
  | ‚ä• => ‚ä•
  | p ‚ü∂ q => (p.TrivTranslation) ‚ü∂ (q.TrivTranslation)
  | p ‚ãè q => (p.TrivTranslation) ‚ãè (q.TrivTranslation)
  | p ‚ãé q => (p.TrivTranslation) ‚ãé (q.TrivTranslation)

postfix:75 "·µÄ" => TrivTranslation

@[simp] lemma TrivTranslation.degree_zero : p·µÄ.degree = 0 := by induction p <;> simp [TrivTranslation, degree, *];

def TrivTranslation.toPropFormula (p : Formula Œ±) : LO.Propositional.Intuitionistic.Formula Œ± := p·µÄ.toPropFormula (by simp)

@[simp]
def VerTranslation : Formula Œ± ‚Üí Formula Œ±
  | atom a => atom a
  | box _ => ‚ä§
  | ‚ä• => ‚ä•
  | p ‚ü∂ q => (p.VerTranslation) ‚ü∂ (q.VerTranslation)
  | p ‚ãè q => (p.VerTranslation) ‚ãè (q.VerTranslation)
  | p ‚ãé q => (p.VerTranslation) ‚ãé (q.VerTranslation)

postfix:75 "‚±Ω" => VerTranslation

@[simp] lemma VerTranslation.degree_zero : p‚±Ω.degree = 0 := by induction p <;> simp [VerTranslation, degree, *];

def VerTranslation.toPropFormula (p : Formula Œ±) : LO.Propositional.Intuitionistic.Formula Œ± := p‚±Ω.toPropFormula (by simp)

end Formula

open Hilbert

variable {Œõ : AxiomSet Œ±}

def Deduction.ofTrivSubset (_ : ùêìùê´ùê¢ùêØ ‚äÜ Œõ) : (Hilbert.Triv (Deduction (Œõ : AxiomSet Œ±))) where
  K _ _ _ := Deduction.maxm $ Set.mem_of_subset_of_mem (by assumption) (by simp);
  T _ _ := Deduction.maxm $ Set.mem_of_subset_of_mem (by assumption) (by simp);
  Tc _ _ := Deduction.maxm $ Set.mem_of_subset_of_mem (by assumption) (by simp);

def Deduction.ofVerSubset (_ : ùêïùêûùê´ ‚äÜ Œõ) : (Hilbert.Ver (Deduction (Œõ : AxiomSet Œ±))) where
  K _ _ _ := Deduction.maxm $ Set.mem_of_subset_of_mem (by assumption) (by simp);
  Verum _ _ := Deduction.maxm $ Set.mem_of_subset_of_mem (by assumption) (by simp);

lemma deducible_iff_trivTranslation (hTriv : ùêìùê´ùê¢ùêØ ‚äÜ Œõ) : Œì ‚ä¢·¥π[Œõ]! p ‚ü∑ p·µÄ := by
  have := Deduction.ofTrivSubset hTriv;
  induction p using Formula.rec' with
  | hbox p ih => exact iff_trans'! (iff_symm'! $ boxtriv!) ih;
  | hatom _ => apply iff_id!
  | hfalsum => apply iff_id!
  | himp _ _ ih‚ÇÅ ih‚ÇÇ => exact imp_iff'! ih‚ÇÅ ih‚ÇÇ;
  | hand _ _ ih‚ÇÅ ih‚ÇÇ => exact conj_iff'! ih‚ÇÅ ih‚ÇÇ;
  | hor _ _ ih‚ÇÅ ih‚ÇÇ => exact disj_iff'! ih‚ÇÅ ih‚ÇÇ

lemma deducible_iff_verTranslation (hVer : ùêïùêûùê´ ‚äÜ Œõ) : Œì ‚ä¢·¥π[Œõ]! p ‚ü∑ p‚±Ω := by
  have := Deduction.ofVerSubset hVer;
  induction p using Formula.rec' with
  | hbox =>
    apply iff_intro'!;
    . exact imply‚ÇÅ'! verum!
    . exact imply‚ÇÅ'! boxarbitary!;
  | hatom _ => apply iff_id!
  | hfalsum => apply iff_id!
  | himp _ _ ih‚ÇÅ ih‚ÇÇ => exact imp_iff'! ih‚ÇÅ ih‚ÇÇ;
  | hand _ _ ih‚ÇÅ ih‚ÇÇ => exact conj_iff'! ih‚ÇÅ ih‚ÇÇ;
  | hor _ _ ih‚ÇÅ ih‚ÇÇ => exact disj_iff'! ih‚ÇÅ ih‚ÇÇ

end LO.Modal.Normal
