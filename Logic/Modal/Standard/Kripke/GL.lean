import Logic.Vorspiel.BinaryRelations
import Logic.Modal.Standard.Kripke.Soundness

namespace LO.Modal.Standard

namespace Kripke

open System
open Kripke
open Formula

variable {Œ± : Type u} [Inhabited Œ±]
variable {F : Kripke.Frame}

abbrev TransitiveCWFFrameClass : FrameClass := { F | Transitive F ‚àß ConverseWellFounded F }

private lemma trans_of_L : F# ‚äß* (ùóü : AxiomSet Œ±) ‚Üí Transitive F.Rel := by
  contrapose;
  intro hT; simp [Transitive] at hT;
  obtain ‚ü®w‚ÇÅ, w‚ÇÇ, r‚ÇÅ‚ÇÇ, w‚ÇÉ, r‚ÇÇ‚ÇÉ, nr‚ÇÅ‚ÇÉ‚ü© := hT;
  simp [Kripke.ValidOnFrame, Kripke.ValidOnFrame, Kripke.ValidOnModel, Kripke.Satisfies];
  use (atom default), (Œª w' _ => w' ‚â† w‚ÇÇ ‚àß w' ‚â† w‚ÇÉ), w‚ÇÅ;
  constructor;
  . intro x hx h;
    by_cases hx‚ÇÇ : x = w‚ÇÇ;
    . subst hx‚ÇÇ; simpa [Kripke.Satisfies] using h r‚ÇÇ‚ÇÉ;
    . by_cases hx‚ÇÉ : x = w‚ÇÉ <;> simp_all [Kripke.Satisfies, hx‚ÇÉ];
  . existsi w‚ÇÇ; simpa [Kripke.Satisfies];

private lemma cwf_of_L  : F# ‚äß* (ùóü : AxiomSet Œ±) ‚Üí ConverseWellFounded F.Rel := by
  contrapose;
  intro hCF;
  obtain ‚ü®X, hX‚ÇÅ, hX‚ÇÇ‚ü© := by simpa using ConverseWellFounded.iff_has_max.not.mp hCF;
  simp [Kripke.ValidOnFrame, Kripke.ValidOnFrame, Kripke.ValidOnModel, Kripke.Satisfies];
  use (atom default), (Œª w _ => w ‚àâ X), hX‚ÇÅ.some;
  constructor;
  . intro x _;
    by_cases hxs : x ‚àà X
    . obtain ‚ü®y, hy‚ÇÅ, hy‚ÇÇ‚ü© := hX‚ÇÇ x hxs;
      intro h;
      exact h (by simp_all only [Kripke.Satisfies]);
    . aesop;
  . obtain ‚ü®w', hw'‚ÇÅ, hw'‚ÇÇ‚ü© := hX‚ÇÇ hX‚ÇÅ.some (by apply Set.Nonempty.some_mem);
    existsi w';
    constructor;
    . simpa using hw'‚ÇÇ;
    . simpa [Kripke.Satisfies];

private lemma L_of_trans_and_cwf : (Transitive F.Rel ‚àß ConverseWellFounded F.Rel) ‚Üí F# ‚äß* (ùóü : AxiomSet Œ±) := by
  rintro ‚ü®hTrans, hWF‚ü©;
  simp [AxiomSet.L, Axioms.L];
  intro p V w;
  simp [Kripke.Satisfies];
  contrapose; push_neg;
  intro h;
  obtain ‚ü®z, rwz, hz‚ü© := h;
  obtain ‚ü®m, ‚ü®‚ü®rwm, hm‚ü©, hm‚ÇÇ‚ü©‚ü© := hWF.has_min ({ x | (F.Rel w x) ‚àß ¬¨(Kripke.Satisfies ‚ü®F, V‚ü© x p) }) (by use z; simp_all)
  use m;
  constructor;
  . exact rwm;
  . constructor;
    . simp [flip] at hm‚ÇÇ;
      intro n rmn;
      apply not_imp_not.mp $ hm‚ÇÇ n (hTrans rwm rmn);
      exact rmn;
    . exact hm;

lemma axiomL_defines : ùóü.DefinesKripkeFrameClass (Œ± := Œ±) (TransitiveCWFFrameClass) := by
  intro F;
  constructor;
  . intro h;
    constructor;
    . exact trans_of_L h;
    . exact cwf_of_L h;
  . exact L_of_trans_and_cwf;


abbrev TransitiveIrreflexiveFiniteFrameClass : FiniteFrameClass := { F | Transitive F.toFrame ‚àß Irreflexive F.toFrame }


lemma TransitiveIrreflexiveFiniteFrameClass.nonempty : TransitiveIrreflexiveFiniteFrameClass.Nonempty.{0} := by
  use PointFrame;
  simp [Transitive, Irreflexive];

lemma axiomL_finite_defines : ùóü.FinitelyDefinesKripkeFrameClass (Œ± := Œ±) TransitiveIrreflexiveFiniteFrameClass := by
  intro F;
  constructor;
  . intro h;
    obtain ‚ü®hTrans, hCWF‚ü© := axiomL_defines.mp h;
    refine ‚ü®hTrans, ?irreflexive‚ü©;
    . intro w;
      simpa using ConverseWellFounded.iff_has_max.mp hCWF {w} (by simp);
  . intro d;
    have ‚ü®hTrans, hIrrefl‚ü© := d;
    apply axiomL_defines.mpr;
    constructor;
    . exact hTrans;
    . exact Finite.converseWellFounded_of_trans_irrefl' F.World_finite hTrans hIrrefl;

instance : Sound (ùêÜùêã : DeductionParameter Œ±) TransitiveIrreflexiveFiniteFrameClass# := sound_of_finitely_defines axiomL_finite_defines

instance : System.Consistent (ùêÜùêã : DeductionParameter Œ±) := consistent_of_finitely_defines axiomL_finite_defines TransitiveIrreflexiveFiniteFrameClass.nonempty


end Kripke

end LO.Modal.Standard
