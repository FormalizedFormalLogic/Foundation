import Mathlib.SetTheory.Cardinal.Basic
import Logic.Modal.Standard.Formula
import Logic.Modal.Standard.Kripke.Semantics
import Logic.Modal.Standard.Kripke.Completeness

namespace Set

-- TODO: move to Vorspiel or Mathlib
-- https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Set.20is.20finite.2C.20then.20its.20powerset.20is.20finite
lemma powerset_finite_of_finite_set {s : Set Œ±} (hs : s.Finite) : (ùí´ s).Finite := by
  apply Cardinal.lt_aleph0_iff_finite.mp;
  simpa using Cardinal.power_lt_aleph0 (Cardinal.nat_lt_aleph0 2) $ Cardinal.lt_aleph0_iff_finite.mpr hs

end Set


namespace LO.Modal.Standard

variable [DecidableEq Œ±] [Inhabited Œ±]

def Formula.Subformulas: Formula Œ± ‚Üí Finset (Formula Œ±)
  | ‚ä§      => {‚ä§}
  | ‚ä•      => {‚ä•}
  | atom a => {(atom a)}
  | p ‚ü∂ q => insert (p ‚ü∂ q) (p.Subformulas ‚à™ q.Subformulas)
  | p ‚ãè q  => {p ‚ãè q} ‚à™ (p.Subformulas ‚à™ q.Subformulas)
  | p ‚ãé q  => insert (p ‚ãé q) (p.Subformulas ‚à™ q.Subformulas)
  | box p  => insert (‚ñ°p) p.Subformulas

namespace Formula.Subformulas

@[simp]
lemma mem_self (p : Formula Œ±) : p ‚àà p.Subformulas := by induction p using Formula.rec' <;> simp [Subformulas];

end Formula.Subformulas


def Theory.Subformulas (T : Theory Œ±) := ‚ãÉ i ‚àà T, i.Subformulas.toSet

def Theory.SubformulaClosed (T : Theory Œ±) := ‚àÄ p ‚àà T, ‚Üë(p.Subformulas) ‚äÜ T

namespace Theory.SubformulaClosed

variable {T : Theory Œ±} (T_closed : T.SubformulaClosed) {p q : Formula Œ±}

@[simp]
lemma def_and : p ‚ãè q ‚àà T ‚Üí p ‚àà T ‚àß q ‚àà T := by
  intro h;
  constructor;
  all_goals apply (T_closed _ h); simp [Formula.Subformulas];

@[simp]
lemma def_or : p ‚ãé q ‚àà T ‚Üí p ‚àà T ‚àß q ‚àà T := by
  intro h;
  constructor;
  all_goals apply (T_closed _ h); simp [Formula.Subformulas];

@[simp]
lemma def_imp : p ‚ü∂ q ‚àà T ‚Üí p ‚àà T ‚àß q ‚àà T := by
  intro h;
  constructor;
  all_goals apply (T_closed _ h); simp [Formula.Subformulas];

@[simp]
lemma def_box : ‚ñ°p ‚àà T ‚Üí p ‚àà T := by
  intro h;
  apply (T_closed _ h); simp [Formula.Subformulas];

end Theory.SubformulaClosed


class Theory.IsSubformulaClosed (T : Theory Œ±) where
  closed : T.SubformulaClosed

instance {p : Formula Œ±} : Theory.IsSubformulaClosed (p.Subformulas).toSet where
  closed := by
    induction p using Formula.rec' with
    | hbox p ihp =>
      simp_all [Theory.SubformulaClosed, Formula.Subformulas];
      rintro r hp;
      exact Set.Subset.trans (ihp r hp) $ Set.Subset.trans (Set.subset_insert _ _) $ Set.insert_subset_insert $ by rfl;
    | hand p q ihp ihq =>
      simp_all [Theory.SubformulaClosed, Formula.Subformulas];
      rintro r (hp | hq);
      . exact Set.Subset.trans (ihp r hp) $ Set.Subset.trans (Set.subset_insert _ _) $ Set.insert_subset_insert $ Set.subset_union_left;
      . exact Set.Subset.trans (ihq r hq) $ Set.Subset.trans (Set.subset_insert _ _) $ Set.insert_subset_insert $ Set.subset_union_right;
    | hor p q ihp ihq =>
      simp_all [Theory.SubformulaClosed, Formula.Subformulas];
      rintro r (hp | hq);
      . exact Set.Subset.trans (ihp r hp) $ Set.Subset.trans (Set.subset_insert _ _) $ Set.insert_subset_insert $ Set.subset_union_left;
      . exact Set.Subset.trans (ihq r hq) $ Set.Subset.trans (Set.subset_insert _ _) $ Set.insert_subset_insert $ Set.subset_union_right;
    | himp p q ihp ihq =>
      simp_all [Theory.SubformulaClosed, Formula.Subformulas];
      rintro r (hp | hq);
      . exact Set.Subset.trans (ihp r hp) $ Set.Subset.trans (Set.subset_insert _ _) $ Set.insert_subset_insert $ Set.subset_union_left;
      . exact Set.Subset.trans (ihq r hq) $ Set.Subset.trans (Set.subset_insert _ _) $ Set.insert_subset_insert $ Set.subset_union_right;
    | _ => simp_all [Theory.SubformulaClosed, Formula.Subformulas];

namespace Kripke

open Formula (atom)
open Formula.Kripke


section

def filterEquiv (T : Theory Œ±) [T.IsSubformulaClosed] (M : Kripke.Model Œ±) (x y : M.World) := ‚àÄ p ‚àà T, x ‚äß p ‚Üî y ‚äß p

variable (M : Kripke.Model.{u, u} Œ±) (T : Theory Œ±) [T_closed : T.IsSubformulaClosed]

lemma filterEquiv.equivalence : Equivalence (filterEquiv T M) where
  refl := by intro x p _; rfl;
  symm := by intro x y h p hp; exact h _ hp |>.symm;
  trans := by
    intro x y z exy eyz;
    intro p hp;
    exact Iff.trans (exy p hp) (eyz p hp)

def FilterEqvSetoid : Setoid (M.World) := ‚ü®filterEquiv T M, filterEquiv.equivalence M T‚ü©

abbrev FilterEqvQuotient := Quotient (FilterEqvSetoid M T)

lemma FilterEqvQuotient.finite (T_finite : T.Finite) : Finite (FilterEqvQuotient M T) := by
  apply Cardinal.lt_aleph0_iff_finite.mp;

  let f : FilterEqvQuotient M T ‚Üí ùí´ T := Œª (Qx : FilterEqvQuotient M T) => Quotient.lift (Œª x => ‚ü®{ p ‚àà T | x ‚äß p }, (by simp_all)‚ü©) (by
    intro x y hxy;
    simp;
    apply Set.eq_of_subset_of_subset;
    . rintro p ‚ü®hp, hx‚ü©; exact ‚ü®hp, (hxy p hp).mp hx‚ü©;
    . rintro p ‚ü®hp, hy‚ü©; exact ‚ü®hp, (hxy p hp).mpr hy‚ü©;
  ) Qx;
  have := Cardinal.mk_le_of_injective (f := f) $ by
    intro Qx Qy h;
    obtain ‚ü®x, hx‚ü© := Quotient.exists_rep Qx; subst hx;
    obtain ‚ü®y, hy‚ü© := Quotient.exists_rep Qy; subst hy;
    simp [f] at h;
    apply Quotient.eq''.mpr;
    intro p hp;
    constructor;
    . intro hpx;
      have := h.subset; simp at this;
      exact this p hp hpx |>.2;
    . intro hpy;
      have := h.symm.subset; simp at this;
      exact this p hp hpy |>.2;
  apply LE.le.trans_lt this;
  apply Set.Finite.lt_aleph0;
  exact Set.powerset_finite_of_finite_set T_finite;

instance : Inhabited (FilterEqvQuotient M T) := ‚ü®‚ü¶Ôπ´‚üß‚ü©

class FilterationModel (M : Model Œ±) (T : Theory Œ±) [T_closed : T.IsSubformulaClosed] extends Model Œ± where
  def_world : Frame.World = FilterEqvQuotient M T := by rfl
  def_rel‚ÇÅ : ‚àÄ {x y : M.Frame}, x ‚â∫ y ‚Üí Frame.Rel' (cast def_world.symm ‚ü¶x‚üß) (cast def_world.symm ‚ü¶y‚üß) := by tauto;
  def_rel‚ÇÇ : ‚àÄ {Qx Qy : Frame.World}, Qx ‚â∫ Qy ‚Üí Quotient.lift‚ÇÇ (Œª x y => ‚àÄ p, ‚ñ°p ‚àà T ‚Üí (x ‚äß ‚ñ°p ‚Üí y ‚äß p)) (by
    intro x‚ÇÅ y‚ÇÅ x‚ÇÇ y‚ÇÇ hx hy;
    simp;
    constructor;
    . intro h p hp sp‚ÇÇ;
      exact hy _ (T_closed.closed.def_box hp) |>.mp $ h p hp $ hx _ hp |>.mpr sp‚ÇÇ;
    . intro h p hp sp‚ÇÅ;
      exact hy _ (T_closed.closed.def_box hp) |>.mpr $ h p hp $ hx _ hp |>.mp sp‚ÇÅ;
  ) (cast def_world Qx) (cast def_world Qy) := by tauto;
  def_valuation Qx a : (ha : (atom a) ‚àà T) ‚Üí
    Valuation Qx a ‚Üî Quotient.lift (Œª x => M.Valuation x a) (by
      simp; intro x y h;
      constructor;
      . intro hx; exact h a ha |>.mp hx;
      . intro hy; exact h a ha |>.mpr hy;
    ) (cast def_world Qx) := by tauto;

abbrev FinestFilterationFrame (M : Model Œ±) (T : Theory Œ±) [T.IsSubformulaClosed] : Kripke.Frame where
  World := FilterEqvQuotient M T
  Rel := Œª Qx Qy => ‚àÉ x y, Qx = ‚ü¶x‚üß ‚àß Qy = ‚ü¶y‚üß ‚àß x ‚â∫ y

abbrev FinestFilterationModel (M : Model Œ±) (T : Theory Œ±) [T.IsSubformulaClosed] : Kripke.FilterationModel M T where
  Frame := FinestFilterationFrame M T
  Valuation Qx a := (ha : (atom a) ‚àà T) ‚Üí Quotient.lift (Œª x => M.Valuation x a) (by
    simp; intro x y h;
    constructor;
    . intro hx; exact h a ha |>.mp hx;
    . intro hy; exact h a ha |>.mpr hy;
  ) Qx
  def_rel‚ÇÇ := by
    intro Qx Qy rQxQy;
    obtain ‚ü®x, y, rfl, rfl, hxy‚ü© := rQxQy;
    simp_all [Satisfies];


abbrev CoarsestFilterationFrame (M : Model Œ±) (T : Theory Œ±) [T_closed : T.IsSubformulaClosed] : Kripke.Frame where
  World := FilterEqvQuotient M T
  Rel := Œª Qx Qy => Quotient.lift‚ÇÇ (Œª x y => ‚àÄ p, ‚ñ°p ‚àà T ‚Üí (x ‚äß ‚ñ°p ‚Üí y ‚äß p)) (by
    intro x‚ÇÅ y‚ÇÅ x‚ÇÇ y‚ÇÇ hx hy;
    simp;
    constructor;
    . intro h p hp sp‚ÇÇ;
      exact hy _ (T_closed.closed.def_box hp) |>.mp $ h p hp $ hx _ hp |>.mpr sp‚ÇÇ;
    . intro h p hp sp‚ÇÅ;
      exact hy _ (T_closed.closed.def_box hp) |>.mpr $ h p hp $ hx _ hp |>.mp sp‚ÇÅ;
  ) Qx Qy

abbrev CoarsestFilterationModel (M : Model Œ±) (T : Theory Œ±) [T.IsSubformulaClosed] : Kripke.FilterationModel M T where
  Frame := CoarsestFilterationFrame M T
  Valuation Qx a := (ha : (atom a) ‚àà T) ‚Üí Quotient.lift (Œª x => M.Valuation x a) (by
    simp; intro x y h;
    constructor;
    . intro hx; exact h a ha |>.mp hx;
    . intro hy; exact h a ha |>.mpr hy;
  ) Qx

end


section

variable {M : Model Œ±} {T : Theory Œ±} [T_closed : T.IsSubformulaClosed]
variable (FM : Kripke.FilterationModel M T)

theorem filteration {x : M.World} {p : Formula Œ±} (hs : p ‚àà T) : x ‚äß p ‚Üî (cast FM.def_world.symm ‚ü¶x‚üß) ‚äß p := by
  induction p using Formula.rec' generalizing x with
  | hatom a =>
    have := FM.def_valuation (cast FM.def_world.symm ‚ü¶x‚üß) a hs;
    simp_all [Satisfies];
  | hand p q ihp ihq =>
    constructor;
    . have ‚ü®sp, sq‚ü© := T_closed.closed.def_and hs
      rintro ‚ü®hp, hq‚ü©;
      constructor;
      . exact ihp sp |>.mp hp;
      . exact ihq sq |>.mp hq;
    . have ‚ü®sp, sq‚ü© := T_closed.closed.def_and hs
      rintro ‚ü®hp, hq‚ü©;
      constructor;
      . exact ihp sp |>.mpr hp;
      . exact ihq sq |>.mpr hq;
  | hor p q ihp ihq =>
    constructor;
    . have ‚ü®sp, sq‚ü© := T_closed.closed.def_or hs
      rintro (hp | hq);
      . left; exact (ihp sp |>.mp hp);
      . right; exact (ihq sq |>.mp hq);
    . have ‚ü®sp, sq‚ü© := T_closed.closed.def_or hs
      rintro (hp | hq);
      . left; exact (ihp sp |>.mpr hp);
      . right; exact (ihq sq |>.mpr hq);
  | himp p q ihp ihq =>
    constructor;
    . have ‚ü®sp, sq‚ü© := T_closed.closed.def_imp hs
      rintro hxy hp;
      exact (ihq sq |>.mp $ hxy (ihp sp |>.mpr hp));
    . rintro hxy hp;
      have ‚ü®sp, sq‚ü© := T_closed.closed.def_imp hs
      exact (ihq sq |>.mpr $ hxy (ihp sp |>.mp hp));
  | hbox p ihp =>
    constructor;
    . intro h Qy rQxQy;
      obtain ‚ü®y, ey‚ü© := Quotient.exists_rep (cast FM.def_world Qy);
      have H := FM.def_rel‚ÇÇ rQxQy;
      simp [‚Üêey] at H;
      have h‚ÇÇ := @ihp y (T_closed.closed.def_box hs) |>.mp $ @H p hs h;
      simpa [ey] using h‚ÇÇ;
    . intro h y rxy;
      have rQxQy := FM.def_rel‚ÇÅ rxy;
      exact ihp (T_closed.closed.def_box hs) |>.mpr $ h rQxQy;
  | _ => simp_all;

end

instance K_finite_complete : Complete (ùêä : DeductionParameter Œ±) AllFrameClassÍü≥# := ‚ü®by
  intro p hp;
  apply K_complete.complete;
  intro F _ V x;
  let M : Kripke.Model Œ± := ‚ü®F, V‚ü©;
  let FM : Kripke.FilterationModel M p.Subformulas := CoarsestFilterationModel M p.Subformulas;

  apply filteration FM (by simp) |>.mpr;
  apply hp (by
    suffices Finite (FilterEqvQuotient M p.Subformulas) by simp; use ‚ü®FM.Frame‚ü©;
    apply FilterEqvQuotient.finite;
    simp_all;
  ) FM.Valuation
‚ü©

class FiniteFrameProperty (Œõ : DeductionParameter Œ±) where
  FFC : FiniteFrameClass
  [complete : Complete Œõ FFC#]

instance : FiniteFrameProperty (Œ± := Œ±) ùêä where
  FFC := AllFrameClassÍü≥

end Kripke

end LO.Modal.Standard
