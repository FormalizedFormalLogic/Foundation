import Logic.Modal.Standard.Kripke.Semantics

namespace LO.Modal.Standard.Kripke

def ComplexityLimitedFrame (F : Kripke.Frame) (r : F.World) (p : Formula Œ±) : Kripke.Frame where
  World := { x | ‚àÉ n ‚â§ p.complexity, r ‚â∫^[n] x }
  World_nonempty := ‚ü®r, by use 0; simp‚ü©
  Rel x y := x.1 ‚â∫ y.1

def ComplexityLimitedModel (M : Kripke.Model Œ±) (w : M.World) (p : Formula Œ±) : Kripke.Model Œ± where
  Frame := ComplexityLimitedFrame M.Frame w p
  Valuation x a := M.Valuation x.1 a

variable [DecidableEq Œ±]
         {M : Kripke.Model Œ±} {r x : M.World} {p q : Formula Œ±}

open Formula.Kripke
open Formula.Subformulas

lemma iff_satisfy_complexity_limit_modelAux
  (hq : q ‚àà ùíÆ p)
  (hx : ‚àÉ n ‚â§ p.complexity - q.complexity, r ‚â∫^[n] x)
  : x ‚äß q ‚Üî Satisfies (ComplexityLimitedModel M r p) ‚ü®x, (by obtain ‚ü®n, _, _‚ü© := hx; use n; exact ‚ü®by omega, by assumption‚ü©)‚ü© q := by
  induction q using Formula.rec' generalizing x p with
  | hbox q ihq =>
    obtain ‚ü®n, hn, hx‚ü© := hx;
    simp [Formula.complexity] at hn;
    have : n + 1 ‚â§ p.complexity - q.complexity := by
      have : q.complexity + 1 ‚â§ p.complexity := by simpa using complexity_lower hq;
      omega;
    constructor;
    . rintro h ‚ü®y, hy‚ü© Rxy;
      apply ihq (mem_box (by assumption)) ?_ |>.mp;
      . exact h _ Rxy;
      . use (n + 1);
        constructor;
        . assumption;
        . apply Kripke.Frame.RelItr'.forward.mpr;
          use x; constructor; assumption; exact Rxy;
    . rintro h y Rxy;
      apply ihq (mem_box (by assumption)) ?_ |>.mpr;
      . exact h _ Rxy;
      . use (n + 1);
        constructor;
        . assumption;
        . apply Kripke.Frame.RelItr'.forward.mpr;
          use x;
  | himp q‚ÇÅ q‚ÇÇ ihq‚ÇÅ ihq‚ÇÇ =>
    obtain ‚ü®n, hn, hx‚ü© := hx;
    simp [Formula.complexity] at hn;
    constructor;
    . rintro hq‚ÇÅ hq‚ÇÇ;
      apply ihq‚ÇÇ (mem_imp (by assumption) |>.2) ?_ |>.mp;
      apply hq‚ÇÅ;
      apply ihq‚ÇÅ (mem_imp (by assumption) |>.1) ?_ |>.mpr hq‚ÇÇ;
      use n; constructor; omega; assumption;
      use n; constructor; omega; assumption;
    . rintro hq‚ÇÅ hq‚ÇÇ;
      apply ihq‚ÇÇ (mem_imp (by assumption) |>.2) ?_ |>.mpr;
      apply hq‚ÇÅ;
      apply ihq‚ÇÅ (mem_imp (by assumption) |>.1) ?_ |>.mp hq‚ÇÇ;
      use n; constructor; omega; assumption;
      use n; constructor; omega; assumption;
  | _ => simp [Satisfies, ComplexityLimitedModel];

lemma iff_satisfy_complexity_limit_model : r ‚äß p ‚Üî Satisfies (ComplexityLimitedModel M r p) ‚ü®r, (by use 0; simp)‚ü© p := by
  apply iff_satisfy_complexity_limit_modelAux (show p ‚àà ùíÆ p by simp);
  use 0; simp;

lemma complexity_limit_model_subformula_closedAux {q‚ÇÅ q‚ÇÇ : Formula Œ±} (hq‚ÇÅ : p ‚àà ùíÆ q‚ÇÅ) (hq‚ÇÇ : p ‚àà ùíÆ q‚ÇÇ)
  : Satisfies (ComplexityLimitedModel M r q‚ÇÅ) ‚ü®r, (by use 0; simp)‚ü© p ‚Üí Satisfies (ComplexityLimitedModel M r q‚ÇÇ) ‚ü®r, (by use 0; simp)‚ü© p := by
  intro h;
  apply @iff_satisfy_complexity_limit_modelAux Œ± _ M r r q‚ÇÇ p (by assumption) ?_ |>.mp;
  apply @iff_satisfy_complexity_limit_modelAux Œ± _ M r r q‚ÇÅ p (by assumption) ?_ |>.mpr h;
  use 0; simp;
  use 0; simp;

lemma complexity_limit_model_subformula_closed (hq : p ‚àà ùíÆ q)
  : Satisfies (ComplexityLimitedModel M r p) ‚ü®r, (by use 0; simp)‚ü© p ‚Üî Satisfies (ComplexityLimitedModel M r q) ‚ü®r, (by use 0; simp)‚ü© p := by
  constructor;
  . apply complexity_limit_model_subformula_closedAux <;> simp_all;
  . apply complexity_limit_model_subformula_closedAux <;> simp_all;

end LO.Modal.Standard.Kripke
