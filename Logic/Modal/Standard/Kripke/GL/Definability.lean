import Logic.Vorspiel.BinaryRelations
import Logic.Modal.Standard.Kripke.Semantics

namespace LO.Modal.Standard

variable {W Œ± : Type*} [Inhabited Œ±]

open System
open Kripke
open Formula Formula.Kripke

variable {F: Kripke.Frame W Œ±}

private lemma AxiomSet.L.definability.implies_transitive : F ‚äß* ùêã ‚Üí Transitive F := by
  contrapose;
  intro hT; simp [Transitive] at hT;
  obtain ‚ü®w‚ÇÅ, w‚ÇÇ, w‚ÇÉ, r‚ÇÇ‚ÇÉ, r‚ÇÅ‚ÇÇ, nr‚ÇÅ‚ÇÉ‚ü© := hT;
  -- simp [AxiomSet.L, Axioms.L, ValidOnFrame, ValidOnModel];
  -- existsi (atom default);
  -- existsi (Œª w' _ => (w' ‚â† w‚ÇÇ ‚àß w' ‚â† w‚ÇÉ)), w‚ÇÅ;
  sorry;
  -- constructor;
  -- . intro x hx h;
  --   by_cases hx‚ÇÇ : x = w‚ÇÇ;
  --   . simp_all [hx‚ÇÇ]; simpa using h w‚ÇÉ r‚ÇÇ‚ÇÉ;
  --   . by_cases hx‚ÇÉ : x = w‚ÇÉ <;> simp_all [hx‚ÇÉ];
  -- . existsi w‚ÇÇ;
  --   aesop;

private lemma AxiomSet.L.definability.implies_cwf  : F ‚äß* ùêã ‚Üí ConverseWellFounded F := by
  sorry;
  /-
  contrapose;
  intro hCF;
  obtain ‚ü®X, hX‚ÇÅ, hX‚ÇÇ‚ü© := by simpa using ConverseWellFounded.iff_has_max.not.mp hCF;
  let V : Valuation Œ± Œ≤ := Œª w _ => w ‚àâ X;
  let w := hX‚ÇÅ.some;
  let a : Formula Œ≤ := atom default;
  apply Theory.not_Frames;
  simp [Theory.Satisfies, -Satisfies.box_def];
  existsi V, w, a;
  constructor;
  . simp only [Formula.Satisfies.box_def];
    intro x _;
    by_cases hxs : x ‚àà X
    . obtain ‚ü®y, hy‚ÇÅ, hy‚ÇÇ‚ü© := hX‚ÇÇ x hxs;
      simp only [Formula.Satisfies.imp_def];
      left;
      simp;
      existsi y;
      constructor;
      . simpa [flip] using hy‚ÇÇ;
      . simpa [V, w, a];
    . aesop;
  . obtain ‚ü®w', hw'‚ÇÅ, hw'‚ÇÇ‚ü© := hX‚ÇÇ w (by apply Set.Nonempty.some_mem);
    simp;
    existsi w';
    constructor;
    . simpa [flip] using hw'‚ÇÇ;
    . simp_all [V, w, a];
  -/

private lemma AxiomSet.L.definability.impliedby : (Transitive F ‚àß ConverseWellFounded F) ‚Üí F ‚äß* ùêã := by
  sorry;
  /-
  rintro ‚ü®hTrans, hWF‚ü©;
  simp [axiomL, AxiomSet.L];
  intro p V w;
  simp only [Formula.Satisfies.imp_def'];
  suffices (w ‚äÆ·¥π[‚ü®F, V‚ü©] ‚ñ°p) ‚Üí (w ‚äÆ·¥π[‚ü®F, V‚ü©] ‚ñ°(‚ñ°p ‚ü∂ p)) by exact not_imp_not.mp this;

  intro h; simp [Unsatisfies] at h;
  obtain ‚ü®z, rwz, hz‚ü© := h;
  obtain ‚ü®xm, ‚ü®hxm‚ÇÅ, hxm‚ÇÇ‚ü©‚ü© := hWF.has_min ({ x | (F w x) ‚àß (x ‚äÆ·¥π[‚ü®F, V‚ü©] p) }) (by existsi z; simp [rwz, hz];)

  have h‚ÇÅ : (xm ‚ä©·¥π[‚ü®F, V‚ü©] ‚ñ°p) := by
    simp [Satisfies.box_def];
    intro y hy;
    have : F w y := hTrans (by simp_all) hy;
    by_contra hC;
    have := hxm‚ÇÇ y ‚ü®(hTrans (by simp_all) hy), hC‚ü©;
    contradiction;
  have h‚ÇÇ : (xm ‚äÆ·¥π[‚ü®F, V‚ü©] (‚ñ°p ‚ü∂ p)) := by
    simp only [Unsatisfies, Formula.Satisfies.imp_def', not_imp];
    constructor;
    . exact h‚ÇÅ
    . simp_all;
  have h‚ÇÉ : w ‚äÆ·¥π[‚ü®F, V‚ü©] ‚ñ°(‚ñ°p ‚ü∂ p) := by
    simp [Unsatisfies, Satisfies.box_def, -Satisfies.imp_def'];
    existsi xm;
    constructor;
    . simp_all;
    . exact h‚ÇÇ;
  exact h‚ÇÉ;
  -/

open AxiomSet.L.definability in
instance AxiomSet.L.definability : Kripke.AxiomSetDefinability W (ùêã : AxiomSet Œ±) (Œª F => Transitive F ‚àß ConverseWellFounded F) where
  defines F := by
    constructor;
    . intro h;
      apply impliedby;
      simp_all;
    . intro h;
      constructor;
      . exact implies_transitive h;
      . exact implies_cwf h;

instance AxiomSet.L.finiteDefinability [Finite W] : Kripke.AxiomSetDefinability W (ùêã : AxiomSet Œ±) (Œª F => Transitive F ‚àß Irreflexive F) where
  defines F := by
    constructor;
    . rintro ‚ü®hTrans, hIrrefl‚ü©;
      have hCWF := @Finite.converseWellFounded_of_trans_irrefl _ F _ ‚ü®hTrans‚ü© ‚ü®hIrrefl‚ü©;
      apply AxiomSet.L.definability.defines F |>.mp;
      constructor <;> simpa;
    . intro h;
      obtain ‚ü®hTrans, hCWF‚ü© := AxiomSet.L.definability.defines F |>.mpr h;
      constructor;
      . simpa;
      . by_contra hIrrefl;
        have := ConverseWellFounded.iff_has_max.mp hCWF;
        simp [Irreflexive] at hIrrefl;
        obtain ‚ü®w, h‚ü© := hIrrefl;
        have := this {w} (by simp);
        simp_all;

instance [Finite W] {ùîΩ : AxiomSetFrameClass W (ùêã : AxiomSet Œ±)} : Set.Nonempty ùîΩ.frameclass := by
  existsi (Œª _ _ => False);
  apply iff_definability_memAxiomSetFrameClass AxiomSet.L.finiteDefinability |>.mp;
  constructor;
  . simp [Transitive];
  . simp [Irreflexive];

instance AxiomSet.GL.definability : Kripke.AxiomSetDefinability W (ùêÜùêã : AxiomSet Œ±) (Œª F => Transitive F ‚àß ConverseWellFounded F) := inferInstance

end LO.Modal.Standard
