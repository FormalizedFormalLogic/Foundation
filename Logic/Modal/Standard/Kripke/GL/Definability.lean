import Logic.Vorspiel.BinaryRelations
import Logic.Modal.Standard.Kripke.Semantics

namespace LO.Modal.Standard

variable {W Œ± : Type*} [Inhabited Œ±]

open System
open Kripke
open Formula Formula.Kripke

variable {F: Kripke.Frame W Œ±}

private lemma AxiomSet.L.definability.implies_transitive : F ‚äß* ùêã ‚Üí Transitive F := by
  contrapose;
  intro hT; simp [Transitive] at hT;
  obtain ‚ü®w‚ÇÅ, w‚ÇÇ, w‚ÇÉ, r‚ÇÇ‚ÇÉ, r‚ÇÅ‚ÇÇ, nr‚ÇÅ‚ÇÉ‚ü© := hT;
  simp only [AxiomSet.L, Axioms.L, Semantics.RealizeSet.setOf_iff, ValidOnFrame.models_iff,
    ValidOnFrame, ValidOnModel.iff_models, ValidOnModel, forall_exists_index,
    forall_apply_eq_imp_iff, Semantics.Tarski.realize_imp, Satisfies.box_def, not_forall,
    exists_prop]; -- TODO: cleanup
  existsi (atom default), (Œª w' _ => (w' ‚â† w‚ÇÇ ‚àß w' ‚â† w‚ÇÉ)), w‚ÇÅ;
  constructor;
  . intro x hx h;
    by_cases hx‚ÇÇ : x = w‚ÇÇ;
    . subst hx‚ÇÇ; simpa using h w‚ÇÉ r‚ÇÇ‚ÇÉ;
    . by_cases hx‚ÇÉ : x = w‚ÇÉ <;> simp_all [hx‚ÇÉ];
  . existsi w‚ÇÇ;
    simpa;

private lemma AxiomSet.L.definability.implies_cwf  : F ‚äß* ùêã ‚Üí ConverseWellFounded F := by
  contrapose;
  intro hCF;
  obtain ‚ü®X, hX‚ÇÅ, hX‚ÇÇ‚ü© := by simpa using ConverseWellFounded.iff_has_max.not.mp hCF;
  let V : Valuation W Œ± := Œª w _ => w ‚àâ X;
  let w := hX‚ÇÅ.some;
  let a : Formula Œ± := atom default;
  simp only [AxiomSet.L, Axioms.L, Semantics.RealizeSet.setOf_iff, ValidOnFrame.models_iff,
    ValidOnFrame, ValidOnModel.iff_models, ValidOnModel, forall_exists_index,
    forall_apply_eq_imp_iff, Semantics.Tarski.realize_imp, Satisfies.box_def, not_forall,
    exists_prop]; -- TODO: cleanup
  existsi (atom default), V, w;
  constructor;
  . intro x _;
    by_cases hxs : x ‚àà X
    . obtain ‚ü®y, hy‚ÇÅ, hy‚ÇÇ‚ü© := hX‚ÇÇ x hxs;
      intro h;
      exact h x (by aesop);
    . aesop;
  . obtain ‚ü®w', hw'‚ÇÅ, hw'‚ÇÇ‚ü© := hX‚ÇÇ w (by apply Set.Nonempty.some_mem);
    simp;
    existsi w';
    constructor;
    . simpa [flip] using hw'‚ÇÇ;
    . simp_all [V, w, a];

private lemma AxiomSet.L.definability.impliedby : (Transitive F ‚àß ConverseWellFounded F) ‚Üí F ‚äß* ùêã := by
  rintro ‚ü®hTrans, hWF‚ü©;
  simp [AxiomSet.L, Axioms.L]; -- TODO: cleanup
  intro p V w;
  let M := Model.mk F V;
  simp only [Semantics.Tarski.realize_imp];
  contrapose;

  intro h;
  obtain ‚ü®z, rwz, hz‚ü© := by simpa using h;
  obtain ‚ü®xm, ‚ü®hxm‚ÇÅ, hxm‚ÇÇ‚ü©‚ü© := hWF.has_min ({ x | (F w x) ‚àß ¬¨((M, x) ‚äß p) }) (by existsi z; simp_all)
  simp [Satisfies.box_def];

  have : ((M, xm) ‚äß ‚ñ°p) := by
    by_contra hC;
    obtain ‚ü®y, hy‚ÇÅ, hy‚ÇÇ‚ü© := by simpa using hC;
    have : ¬¨(F xm y) := hxm‚ÇÇ y ‚ü®(hTrans (by simp_all) hy‚ÇÅ), hy‚ÇÇ‚ü©;
    contradiction;
  existsi xm;
  simp_all;

open AxiomSet.L.definability in
instance AxiomSet.L.definability : Kripke.AxiomSetDefinability W (ùêã : AxiomSet Œ±) (Œª F => Transitive F ‚àß ConverseWellFounded F) where
  defines F := by
    constructor;
    . intro h;
      apply impliedby;
      simp_all;
    . intro h;
      constructor;
      . exact implies_transitive h;
      . exact implies_cwf h;

instance AxiomSet.L.finiteDefinability [Finite W] : Kripke.AxiomSetDefinability W (ùêã : AxiomSet Œ±) (Œª F => Transitive F ‚àß Irreflexive F) where
  defines F := by
    constructor;
    . rintro ‚ü®hTrans, hIrrefl‚ü©;
      have hCWF := @Finite.converseWellFounded_of_trans_irrefl _ F _ ‚ü®hTrans‚ü© ‚ü®hIrrefl‚ü©;
      apply AxiomSet.L.definability.defines F |>.mp;
      constructor <;> simpa;
    . intro h;
      obtain ‚ü®hTrans, hCWF‚ü© := AxiomSet.L.definability.defines F |>.mpr h;
      constructor;
      . simpa;
      . by_contra hIrrefl;
        have := ConverseWellFounded.iff_has_max.mp hCWF;
        simp [Irreflexive] at hIrrefl;
        obtain ‚ü®w, h‚ü© := hIrrefl;
        have := this {w} (by simp);
        simp_all;

instance [Finite W] {ùîΩ : AxiomSetFrameClass W (ùêã : AxiomSet Œ±)} : Set.Nonempty ùîΩ.frameclass := by
  existsi (Œª _ _ => False);
  apply iff_definability_memAxiomSetFrameClass AxiomSet.L.finiteDefinability |>.mp;
  constructor;
  . simp [Transitive];
  . simp [Irreflexive];

instance AxiomSet.GL.definability : Kripke.AxiomSetDefinability W (ùêÜùêã : AxiomSet Œ±) (Œª F => Transitive F ‚àß ConverseWellFounded F) := inferInstance

end LO.Modal.Standard
