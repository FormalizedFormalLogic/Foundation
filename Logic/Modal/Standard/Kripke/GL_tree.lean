import Logic.Modal.Standard.Kripke.GL
import Logic.Modal.Standard.Kripke.Preservation

def Assymetric (rel : Œ± ‚Üí Œ± ‚Üí Prop) := ‚àÄ ‚¶Éx y‚¶Ñ, (rel x y) ‚Üí ¬¨(rel x y)

lemma irreflexive_of_assymetric (h : Assymetric rel) : Irreflexive rel := by simp_all [Assymetric, Irreflexive];

-- TODO: move
lemma List.last_length_1 {Œ±} {l : List Œ±} (h : l.length = 1) : l = [l.getLast (by aesop)] := by
  match l with
  | [r] => rfl

-- TODO: move
lemma List.interpolant {Œ±} {l‚ÇÅ l‚ÇÇ : List Œ±} (h_length : l‚ÇÅ.length + 1 = l‚ÇÇ.length) (h_prefix : l‚ÇÅ <+: l‚ÇÇ)
  : ‚àÉ z, l‚ÇÅ ++ [z] = l‚ÇÇ := by
    obtain ‚ü®l‚ÇÉ, rfl‚ü© := h_prefix;
    use l‚ÇÉ.getLast (by aesop);
    have : l‚ÇÉ = [l‚ÇÉ.getLast _] := List.last_length_1 (by simp_all);
    rw [‚Üêthis];

-- TODO: is exists?
lemma List.head?_eq_head_of_ne_nil {l : List Œ±} (h : l ‚â† []) : l.head? = some (l.head h):= by
  induction l with
  | nil => contradiction;
  | cons => simp_all;

namespace LO.Modal.Standard

namespace Kripke

-- open System
open Kripke
open Formula.Kripke

variable {Œ±} [Inhabited Œ±] [DecidableEq Œ±]

open Relation (TransGen ReflTransGen)


def Frame.isStrictRooted (F : Frame) (r : F.World) : Prop := ‚àÄ w ‚â† r, r ‚â∫ w

def Frame.isRooted (F : Frame) (r : F.World) : Prop := ‚àÄ w, r ‚â∫ w


namespace Frame

variable {F : Kripke.Frame} (x : F.World)

def successors := { w // x ‚â∫^* w }
postfix:100 "‚Üë*" => Frame.upward

def immediate_successors := { w // x ‚â∫ w }
postfix:100 "‚Üë¬π" => Frame.immediate_successor

def proper_immediate_successors := { w // x ‚â† w ‚àß x ‚â∫ w }
postfix:100 "‚Üë" => Frame.proper_immediate_successor


def predeccsors := { w // w ‚â∫^* x }
postfix:100 "‚Üì*" => Frame.downward

def immediate_predeccsors := { w // w ‚â∫ x }
postfix:100 "‚Üì¬π" => Frame.immediate_predeccsor

def proper_immediate_predeccsors := { w // w ‚â† x ‚àß w ‚â∫ x }
postfix:100 "‚Üì" => Frame.proper_immediate_predeccsors

end Frame


@[simp]
lemma Frame.strictly_rooted_of_rooted {F : Frame} {r : F.World} (h : F.isRooted r) : F.isStrictRooted r := by
  intros w _;
  exact h w;

structure RootedFrame extends Kripke.Frame where
  root : World
  def_root : ‚àÄ w ‚â† root, root ‚â∫^* w
  -- no_root_cycle : ‚àÄ w ‚â† root, ¬¨(w ‚â∫^* root)
  default := root

section

def Frame.PointGenerated (F : Kripke.Frame) (r : F.World) : Kripke.Frame where
  World := { w | w = r ‚à® r ‚â∫ w }
  Rel x y := x.1 ‚â∫ y.1
  default := ‚ü®r, by tauto‚ü©
infix:100 "‚Üæ" => Frame.PointGenerated


def Model.PointGenerated (M : Kripke.Model Œ±) (r : M.World) : Kripke.Model Œ± where
  Frame := (M.Frame‚Üær)
  Valuation w a := M.Valuation w.1 a
infix:100 "‚Üæ" => Model.PointGenerated

def Model.PointGenerated.Bisimulation (M : Model Œ±) (M_trans : Transitive M.Frame) (r : M.World): (M‚Üær) ‚áÑ M where
  toRel x y := x.1 = y
  atomic := by
    rintro x y a rfl;
    simp [Model.PointGenerated];
  forth := by
    rintro x‚ÇÅ y‚ÇÅ x‚ÇÇ rfl Rx‚ÇÇy‚ÇÅ;
    use y‚ÇÅ.1;
    constructor;
    . simp;
    . exact Rx‚ÇÇy‚ÇÅ;
  back := by
    rintro ‚ü®x‚ÇÅ, (rfl | hx‚ÇÅ)‚ü© x‚ÇÇ y‚ÇÇ rfl Rx‚ÇÇy‚ÇÇ;
    . use ‚ü®y‚ÇÇ, by right; exact Rx‚ÇÇy‚ÇÇ‚ü©;
      constructor;
      . simp;
      . exact Rx‚ÇÇy‚ÇÇ;
    . use ‚ü®y‚ÇÇ, ?h‚ÇÇ‚ü©;
      constructor;
      . simp;
      . exact Rx‚ÇÇy‚ÇÇ;
      right;
      exact M_trans hx‚ÇÅ Rx‚ÇÇy‚ÇÇ;

lemma Model.PointGenerated.Bisimulation.rooted (M_trans : Transitive M.Frame := by assumption) : (Bisimulation M M_trans r) ‚ü®r, by simp‚ü© r := by simp [Bisimulation];

lemma Model.PointGenerated.modal_equivalent_to_root (M_trans : Transitive M.Frame) : ModalEquivalent (M‚ÇÅ := M‚Üær) (M‚ÇÇ := M) ‚ü®r, by simp‚ü© r
  := modal_equivalent_of_bisimilar (Bisimulation M M_trans r) Bisimulation.rooted


-- TODO: move
section S5

def _root_.Universal {Œ±} (R : Œ± ‚Üí Œ± ‚Üí Prop) : Prop := ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, R x y

lemma _root_.refl_of_universal (h : Universal R) : Reflexive R := by
  intro x; exact @h x x;

lemma _root_.eucl_of_universal (h : Universal R) : Euclidean R := by
  rintro x y z _ _; exact @h z y;

lemma Frame.PointGenerated.rel_universal
  {F : Kripke.Frame} {r : F.World} (F_refl : Reflexive F) (F_eucl : Euclidean F) : Universal (F‚Üær).Rel := by
  have F_symm := symm_of_refl_eucl F_refl F_eucl;
  simp [Frame.PointGenerated];
  rintro ‚ü®x, (rfl | hx)‚ü© ‚ü®y, (rfl | hy)‚ü©;
  . apply F_refl;
  . exact hy;
  . exact F_symm hx;
  . apply F_symm $ F_eucl hx hy;

abbrev UniversalFrameClass : FrameClass := { F | Universal F }

lemma iff_Universal_ReflexiveEuclidean_validOnFrameClass : UniversalFrameClass.{u}# ‚äß p ‚Üî ReflexiveEuclideanFrameClass.{u}# ‚äß p := by
  constructor;
  . intro h F hF V r;
    apply Model.PointGenerated.modal_equivalent_to_root (by apply trans_of_refl_eucl hF.1 hF.2) |>.mp;
    apply @h (F‚Üær) (Frame.PointGenerated.rel_universal hF.1 hF.2) ((‚ü®F, V‚ü©)‚Üær).Valuation;
  . rintro h F F_univ;
    exact @h F (‚ü®refl_of_universal F_univ, eucl_of_universal F_univ‚ü©);

instance S5_complete_universal : Complete (ùêíùüì : DeductionParameter Œ±) UniversalFrameClass# := ‚ü®by
  intro p hF;
  have : ReflexiveEuclideanFrameClass# ‚äß p := iff_Universal_ReflexiveEuclidean_validOnFrameClass.mp hF;
  exact S5_complete.complete this;
‚ü©

end S5



structure Tree extends Kripke.RootedFrame where
  goback : ‚àÄ w ‚â† root, ‚àÉ! x : w‚Üì, w ‚â∫ x.1

structure TransitiveTree extends Kripke.Tree where
  rel_irreflexive : Irreflexive Rel
  rel_transitive : Transitive Rel

structure FiniteTransitiveTree extends TransitiveTree, FiniteFrame where

set_option linter.unusedVariables false in
protected abbrev FiniteTransitiveTree.Dep (Œ± : Type*) := FiniteTransitiveTree
protected abbrev FiniteTransitiveTree.alt (T : FiniteTransitiveTree) {Œ±} : FiniteTransitiveTree.Dep Œ± := T
postfix:max "#" => FiniteTransitiveTree.alt

namespace FiniteTransitiveTree

instance : Semantics (Formula Œ±) (FiniteTransitiveTree.Dep Œ±) := ‚ü®fun T ‚Ü¶ Formula.Kripke.ValidOnFrame T.toFrame‚ü©

end FiniteTransitiveTree


section TreeUnravelling

def Frame.TreeUnravelling (F : Frame) (r : F.World) : Kripke.Frame where
  World := { c : List F.World | [r] <+: c ‚àß c.Chain' F.Rel }
  default := ‚ü®[r], (by simp)‚ü©
  Rel cx cy := ‚àÉ z, cx.1 ++ [z] = cy.1

namespace Frame.TreeUnravelling

variable {F : Frame} {r : F.World}

@[simp]
lemma not_nil {c : (F.TreeUnravelling r).World} : c.1 ‚â† [] := by
  have := c.2.1;
  by_contra;
  simp_all;

lemma irreflexive : Irreflexive (F.TreeUnravelling r).Rel := by
  intro x; simp [TreeUnravelling];

def PMorphism (F : Frame) (r : F) : F.TreeUnravelling r ‚Üí‚Çö F where
  toFun c := c.1.getLast (by simp)
  forth {cx cy} h := by
    obtain ‚ü®z, hz‚ü© := h;
    have ‚ü®_, _, h‚ü© := @List.chain'_append _ F.Rel cx.1 [z] |>.mp (by rw [hz]; exact cy.2.2);
    refine h (cx.1.getLast (by aesop)) ?hx (cy.1.getLast (by aesop)) ?hy;
    . exact List.getLast?_eq_getLast_of_ne_nil (by simp);
    . rw [‚Üê@List.getLast_append_singleton _ z cx.1]; simp_all;
  back {cx y} h := by
    simp_all;
    use ‚ü®cx.1 ++ [y], ?_‚ü©;
    . constructor;
      . simp;
      . use y;
    . constructor;
      . obtain ‚ü®i, hi‚ü© := cx.2.1;
        use (i ++ [y]);
        simp_rw [‚ÜêList.append_assoc, hi];
      . apply List.Chain'.append;
        . exact cx.2.2;
        . simp;
        . intro z hz; simp;
          convert h;
          exact List.mem_getLast?_eq_getLast hz |>.2;

variable (hr : F.isRooted r)

@[simp]
lemma PMorphism.surjective_of_rooted : Function.Surjective (PMorphism F r) := by
  intro x;
  use ‚ü®[r, x], ?_‚ü©
  simp [PMorphism];
  constructor;
  . use [x]; simp;
  . simp; exact hr x;

lemma validOnBaseFrame : (F.TreeUnravelling r)# ‚äß p ‚Üí F# ‚äß p
  := iff_formula_valid_on_frame_surjective_morphism (PMorphism F r) (by simp_all)

end Frame.TreeUnravelling


def Model.TreeUnravelling (M : Kripke.Model Œ±) (r : M.World) : Kripke.Model Œ± where
  Frame := M.Frame.TreeUnravelling r
  Valuation c a := M.Valuation (c.1.getLast (by simp)) a

namespace Model.TreeUnravelling

variable {M : Kripke.Model Œ±} {r : M.World} {p : Formula Œ±}

def PMorphism (M : Kripke.Model Œ±) (r : M.World) : M.TreeUnravelling r ‚Üí‚Çö M :=
  Model.PseudoEpimorphism.mkAtomic (Frame.TreeUnravelling.PMorphism M.Frame r) $ by aesop;

end Model.TreeUnravelling

end TreeUnravelling

-- TODO: move
def Frame.PseudoEpimorphism.TransitiveClosure {F‚ÇÅ F‚ÇÇ : Frame} (f : F‚ÇÅ ‚Üí‚Çö F‚ÇÇ) (F‚ÇÇ_trans : Transitive F‚ÇÇ) : F‚ÇÅ^+ ‚Üí‚Çö F‚ÇÇ where
  toFun := f.toFun
  forth := by
    intro x y hxy; simp at x y;
    induction hxy with
    | single hxy => exact f.forth hxy;
    | @tail z y _ Rzy Rxz =>
      replace Rzy := f.forth Rzy;
      exact F‚ÇÇ_trans Rxz Rzy;
  back := by
    intro x w hxw;
    obtain ‚ü®u, ‚ü®rfl, hxu‚ü©‚ü© := f.back hxw;
    use u;
    constructor;
    . rfl;
    . exact RelTransGen.single hxu;


section TransitiveTreeUnravelling

abbrev Frame.TransitiveTreeUnravelling (F : Frame) (r : F.World) := (F.TreeUnravelling r)^+

namespace Frame.TransitiveTreeUnravelling

variable {F : Frame} {r : F.World} {p : Formula Œ±}

@[simp]
lemma not_nil {c : (F.TransitiveTreeUnravelling r).World} : c.1 ‚â† [] := by
  by_contra;
  have := c.2.1;
  simp_all;

lemma rel_transitive : Transitive (F.TransitiveTreeUnravelling r) := TransitiveClosure.rel_transitive

/-
lemma rel_irreflexive : Irreflexive (F.TransitiveTreeUnravelling r).Rel := by
  simp [TransitiveTreeUnravelling, TreeUnravelling];
  rintro x Rxx;
  cases Rxx with
  | single h => exact TreeUnravelling.irreflexive x h;
  | tail Rxw Rwx =>
    induction Rxw with
    | single => aesop;
    | tail Rxv Rvw ih => sorry;

lemma rel_branching : ‚àÄ x : (F.TransitiveTreeUnravelling r).World, ‚àÄ y z : x‚Üì, y ‚â† z ‚Üí (y.1 ‚â∫ z.1 ‚à® z.1 ‚â∫ y.1) := by sorry;
-/


def PMorphism (F : Frame) (F_trans : Transitive F.Rel) (r : F) : (F.TransitiveTreeUnravelling r) ‚Üí‚Çö F := (Frame.TreeUnravelling.PMorphism F r).TransitiveClosure F_trans

end Frame.TransitiveTreeUnravelling


def Model.TransitiveTreeUnravelling (M : Kripke.Model Œ±) (r : M.World) : Kripke.Model Œ± where
  Frame := M.Frame.TransitiveTreeUnravelling r
  Valuation c a := M.Valuation (c.1.getLast (by simp)) a

namespace Model.TransitiveTreeUnravelling

variable {M : Kripke.Model Œ±} {r : M.World} {p : Formula Œ±}

def PMorphism (M : Kripke.Model Œ±) (M_trans : Transitive M.Frame) (r : M.World) : M.TransitiveTreeUnravelling r ‚Üí‚Çö M :=
  Model.PseudoEpimorphism.mkAtomic (Frame.TransitiveTreeUnravelling.PMorphism M.Frame M_trans r) $ by aesop;

end Model.TransitiveTreeUnravelling


end TransitiveTreeUnravelling



section GLTreeUnravelling

def Frame.GLTreeUnravelling (F : Frame) (r : F.World) : Kripke.Frame where
  World := { c : List F.World | [r] <+: c ‚àß c.Chain' F.Rel }
  default := ‚ü®[r], (by simp)‚ü©
  Rel cx cy := cx.1.length < cy.1.length ‚àß cx.1 <+: cy.1

namespace Frame.GLTreeUnravelling

variable {F : Frame} {r : F.World}

@[simp]
lemma not_nil {c : (F.GLTreeUnravelling r).World} : c.1 ‚â† [] := by
  have := c.2.1;
  by_contra;
  simp_all;

lemma rel_transitive : Transitive (F.GLTreeUnravelling r).Rel := by
  rintro x y z ‚ü®hxz, ‚ü®w, hxwy‚ü©‚ü© ‚ü®hyz, ‚ü®v, hyvz‚ü©‚ü©;
  constructor;
  . omega;
  . use (w ++ v);
    simp_rw [‚ÜêList.append_assoc, hxwy, hyvz];

lemma rel_irreflexive : Irreflexive (F.GLTreeUnravelling r).Rel := by
  simp [Irreflexive, GLTreeUnravelling];

def PMorphism (F : Frame) (F_trans : Transitive F) (r : F.World) : (F.GLTreeUnravelling r) ‚Üí‚Çö F where
  toFun c := c.1.getLast (by simp)
  forth {cx cy} h := by
    simp;
    obtain ‚ü®hl, ‚ü®cz, hz‚ü©‚ü© := h;
    wlog cz_nnil : cz ‚â† []
    case inr => simp_all only [Set.mem_setOf_eq, ne_eq, forall_const, not_not, List.append_nil, lt_self_iff_false];
    have ‚ü®_, cz_chain, h‚ü© := @List.chain'_append _ F.Rel cx.1 cz |>.mp (by rw [hz]; exact cy.2.2);
    have h‚ÇÅ := h (cx.1.getLast (by aesop)) ?hx (cz.head (by assumption)) ?hz;
    case hx => exact List.getLast?_eq_getLast_of_ne_nil (by simp);
    case hz => exact List.head?_eq_head_of_ne_nil _;
    apply F_trans h‚ÇÅ;
    suffices h : F.Rel (cz.head (by assumption)) (cz.getLast (by assumption)) by
      have := List.getLast_append' (l‚ÇÅ := cx.1) (l‚ÇÇ := cz) (by assumption);
      simp_all;
    sorry;
  back {cx y} h := by
    simp_all;
    use ‚ü®cx.1 ++ [y], ?_‚ü©;
    . constructor;
      . simp;
      . constructor;
        . simp;
        . use [y];
    . constructor;
      . obtain ‚ü®i, hi‚ü© := cx.2.1;
        use (i ++ [y]);
        simp_rw [‚ÜêList.append_assoc, hi];
      . apply List.Chain'.append;
        . exact cx.2.2;
        . simp;
        . intro z hz; simp;
          convert h;
          exact List.mem_getLast?_eq_getLast hz |>.2;

end Frame.GLTreeUnravelling


def Model.GLTreeUnravelling (M : Kripke.Model Œ±) (r : M.World) : Kripke.Model Œ± where
  Frame := M.Frame.GLTreeUnravelling r
  Valuation c a := M.Valuation (c.1.getLast (by simp)) a

namespace Model.GLTreeUnravelling

variable (M : Kripke.Model Œ±) (M_trans : Transitive M.Frame) (r : M.World) {p : Formula Œ±}

def PMorphism : (M.GLTreeUnravelling r) ‚Üí‚Çö M :=
  Model.PseudoEpimorphism.mkAtomic (Frame.GLTreeUnravelling.PMorphism M.Frame M_trans r) $ by aesop;

lemma modal_equivalence {w : M.GLTreeUnravelling r} : w ‚Ü≠ (w.1.getLast (by simp)) := by
  have H := @modal_equivalence_of_modal_morphism _ (M.GLTreeUnravelling r) M (PMorphism M M_trans r) w;
  intro p;
  have Hp := @H p;
  constructor;
  . intro hp; exact Hp.mp hp;
  . intro hp; exact Hp.mpr hp;

end Model.GLTreeUnravelling

end GLTreeUnravelling



variable {p : Formula Œ±}

lemma validOnFTT_Aux (h : TransitiveIrreflexiveFrameClass.{u}Íü≥# ‚äß p) : ‚àÄ T : FiniteTransitiveTree.{u}, T# ‚äß p := by
  simp at h;
  intro T;
  apply @h T.toFrame T.toFiniteFrame;
  . exact T.rel_transitive;
  . exact T.rel_irreflexive;
  . tauto;

lemma validOnFTT_root (h : ‚àÄ F : FiniteTransitiveTree.{u}, F# ‚äß p) : ‚àÄ T : FiniteTransitiveTree.{u}, ‚àÄ V, Satisfies ‚ü®T.toFrame, V‚ü© T.root p := by
  intro T V; exact h T V _;

-- set_option pp.proofs true in
lemma validOnFTT_root' : (‚àÄ T : FiniteTransitiveTree.{u}, ‚àÄ V, Satisfies ‚ü®T.toFrame, V‚ü© T.root p) ‚Üí TransitiveIrreflexiveFrameClass.{u}Íü≥# ‚äß p := by
  contrapose; push_neg;
  intro h; simp [ValidOnFrame, ValidOnModel] at h;
  obtain ‚ü®_, F, F_trans, F_irrefl, rfl, V, x, hx‚ü© := h;
  have := @Model.GLTreeUnravelling.modal_equivalence _ ‚ü®F, V‚ü© F_trans x ‚ü®[x], by simp‚ü© p |>.not.mpr hx;
  sorry;

end

end Kripke

end LO.Modal.Standard
