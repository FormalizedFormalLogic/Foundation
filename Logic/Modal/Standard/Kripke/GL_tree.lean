import Logic.Modal.Standard.Kripke.GL
import Logic.Modal.Standard.Kripke.Preservation

def Assymetric (rel : Œ± ‚Üí Œ± ‚Üí Prop) := ‚àÄ ‚¶Éx y‚¶Ñ, (rel x y) ‚Üí ¬¨(rel x y)

lemma irreflexive_of_assymetric (h : Assymetric rel) : Irreflexive rel := by simp_all [Assymetric, Irreflexive];

-- TODO: move
lemma List.last_length_1 {Œ±} {l : List Œ±} (h : l.length = 1) : l = [l.getLast (by aesop)] := by
  match l with
  | [r] => rfl

-- TODO: move
lemma List.interpolant {Œ±} {l‚ÇÅ l‚ÇÇ : List Œ±} (h_length : l‚ÇÅ.length + 1 = l‚ÇÇ.length) (h_prefix : l‚ÇÅ <+: l‚ÇÇ)
  : ‚àÉ z, l‚ÇÅ ++ [z] = l‚ÇÇ := by
    obtain ‚ü®l‚ÇÉ, rfl‚ü© := h_prefix;
    use l‚ÇÉ.getLast (by aesop);
    have : l‚ÇÉ = [l‚ÇÉ.getLast _] := List.last_length_1 (by simp_all);
    rw [‚Üêthis];

namespace LO.Modal.Standard

namespace Kripke

-- open System
open Kripke
open Formula.Kripke

variable {Œ±} [Inhabited Œ±] [DecidableEq Œ±]


def Frame.isStrictRooted (F : Frame) (r : F.World) : Prop := ‚àÄ w ‚â† r, r ‚â∫ w

def Frame.isRooted (F : Frame) (r : F.World) : Prop := ‚àÄ w, r ‚â∫ w

@[simp]
lemma Frame.strictly_rooted_of_rooted {F : Frame} {r : F.World} (h : F.isRooted r) : F.isStrictRooted r := by
  intros w _;
  exact h w;


-- TODO: Ë®ºÊòé„Åó„Åü„Åå„Åä„Åù„Çâ„Åè‰∏çË¶ÅÔºé
section ComplexityLimit

def Frame.ComplexityLimit {F : Kripke.Frame} (w : F.World) (p : Formula Œ±) : Kripke.Frame where
  World := { x | ‚àÉ n ‚â§ p.complexity, w ‚â∫^[n] x }
  default := ‚ü®w, by use 0; simp‚ü©
  Rel x y := x.1 ‚â∫ y.1

def Model.ComplexityLimit {M : Kripke.Model Œ±} (w : M.World) (p : Formula Œ±) : Kripke.Model Œ± where
  Frame := M.Frame.ComplexityLimit w p
  Valuation x a := M.Valuation x.1 a

open Formula.Subformulas

variable {M : Kripke.Model Œ±} {w : M.World} {p q : Formula Œ±} (hq : q ‚àà ùíÆ p) {x : M.World}

lemma iff_satisfy_complexity_limit_modelAux
  (hx : ‚àÉ n ‚â§ p.complexity - q.complexity, w ‚â∫^[n] x)
  : x ‚äß q ‚Üî Satisfies (M.ComplexityLimit w p) ‚ü®x, (by obtain ‚ü®n, _, _‚ü© := hx; use n; exact ‚ü®by omega, by assumption‚ü©)‚ü© q := by
  induction q using Formula.rec' generalizing x p with
  | hbox q ihq =>
    obtain ‚ü®n, hn, hx‚ü© := hx;
    simp [Formula.complexity] at hn;
    have : n + 1 ‚â§ p.complexity - q.complexity := by sorry; -- TODO Ê≠£„Åó„ÅÑ„ÅØ„Åö„Å™„ÅÆ„Å†„Åå`omega`„Åß„ÅØ„Å™„Åú„ÅãÈÄö„Çâ„Å™„ÅÑ
    constructor;
    . rintro h ‚ü®y, hy‚ü© Rxy;
      apply ihq (mem_box (by assumption)) ?_ |>.mp;
      . exact h Rxy;
      . use (n + 1);
        constructor;
        . assumption;
        . apply Frame.RelItr'.forward.mpr;
          use x; constructor; assumption; exact Rxy;
    . rintro h y Rxy;
      apply ihq (mem_box (by assumption)) ?_ |>.mpr;
      . exact h Rxy;
      . use (n + 1);
        constructor;
        . assumption;
        . apply Frame.RelItr'.forward.mpr;
          use x;
  | hneg q ih =>
    obtain ‚ü®n, hn, hx‚ü© := hx;
    simp [Formula.complexity] at hn;
    apply Iff.not;
    apply ih (mem_neg (by assumption));
    use n; constructor; omega; assumption;
  | hand q‚ÇÅ q‚ÇÇ ihq‚ÇÅ ihq‚ÇÇ =>
    obtain ‚ü®n, hn, hx‚ü© := hx;
    simp [Formula.complexity] at hn;
    constructor;
    . rintro ‚ü®hq‚ÇÅ, hq‚ÇÇ‚ü©;
      constructor;
      . apply ihq‚ÇÅ (mem_and (by assumption) |>.1) ?_ |>.mp hq‚ÇÅ;
        use n; constructor; omega; assumption;
      . apply ihq‚ÇÇ (mem_and (by assumption) |>.2) ?_ |>.mp hq‚ÇÇ;
        use n; constructor; omega; assumption;
    . rintro ‚ü®hq‚ÇÅ, hq‚ÇÇ‚ü©;
      constructor;
      . apply ihq‚ÇÅ (mem_and (by assumption) |>.1) ?_ |>.mpr hq‚ÇÅ;
        use n; constructor; omega; assumption;
      . apply ihq‚ÇÇ (mem_and (by assumption) |>.2) ?_ |>.mpr hq‚ÇÇ;
        use n; constructor; omega; assumption;
  | himp q‚ÇÅ q‚ÇÇ ihq‚ÇÅ ihq‚ÇÇ =>
    obtain ‚ü®n, hn, hx‚ü© := hx;
    simp [Formula.complexity] at hn;
    constructor;
    . rintro hq‚ÇÅ hq‚ÇÇ;
      apply ihq‚ÇÇ (mem_imp (by assumption) |>.2) ?_ |>.mp;
      apply hq‚ÇÅ;
      apply ihq‚ÇÅ (mem_imp (by assumption) |>.1) ?_ |>.mpr hq‚ÇÇ;
      use n; constructor; omega; assumption;
      use n; constructor; omega; assumption;
    . rintro hq‚ÇÅ hq‚ÇÇ;
      apply ihq‚ÇÇ (mem_imp (by assumption) |>.2) ?_ |>.mpr;
      apply hq‚ÇÅ;
      apply ihq‚ÇÅ (mem_imp (by assumption) |>.1) ?_ |>.mp hq‚ÇÇ;
      use n; constructor; omega; assumption;
      use n; constructor; omega; assumption;
  | hor q‚ÇÅ q‚ÇÇ ihq‚ÇÅ ihq‚ÇÇ =>
    obtain ‚ü®n, hn, hx‚ü© := hx;
    simp [Formula.complexity] at hn;
    constructor;
    . rintro (hq‚ÇÅ | hq‚ÇÇ);
      . left;  apply ihq‚ÇÅ (mem_or (by assumption) |>.1) ?_ |>.mp hq‚ÇÅ;
        use n; constructor; omega; assumption;
      . right; apply ihq‚ÇÇ (mem_or (by assumption) |>.2) ?_ |>.mp hq‚ÇÇ;
        use n; constructor; omega; assumption;
    . rintro (hq‚ÇÅ | hq‚ÇÇ);
      . left;  apply ihq‚ÇÅ (mem_or (by assumption) |>.1) ?_ |>.mpr hq‚ÇÅ;
        use n; constructor; omega; assumption;
      . right; apply ihq‚ÇÇ (mem_or (by assumption) |>.2) ?_ |>.mpr hq‚ÇÇ;
        use n; constructor; omega; assumption;
  | _ => simp [Satisfies, Model.ComplexityLimit];

abbrev zero (w : M.World) : (M.ComplexityLimit w p).World := ‚ü®w, (by use 0; simp)‚ü©
scoped postfix:max "‚Å∞" => zero

lemma iff_satisfy_complexity_limit_model : w ‚äß p ‚Üî Satisfies (M.ComplexityLimit w p) w‚Å∞ p := by
  apply iff_satisfy_complexity_limit_modelAux (show p ‚àà ùíÆ p by simp);
  use 0; simp;

lemma zero_complexity_limit_model_zero {q‚ÇÅ q‚ÇÇ} (hq‚ÇÅ : p ‚àà ùíÆ q‚ÇÅ) (hq‚ÇÇ : p ‚àà ùíÆ q‚ÇÇ)
  : Satisfies (M.ComplexityLimit w q‚ÇÅ) w‚Å∞ p ‚Üí Satisfies (M.ComplexityLimit w q‚ÇÇ) w‚Å∞ p := by
  intro h;
  apply @iff_satisfy_complexity_limit_modelAux Œ± _ M w q‚ÇÇ p (by assumption) w ?_ |>.mp;
  apply @iff_satisfy_complexity_limit_modelAux Œ± _ M w q‚ÇÅ p (by assumption) w ?_ |>.mpr h;
  use 0; simp;
  use 0; simp;

lemma zero_complexity_limit_model (hq : p ‚àà ùíÆ q) : Satisfies (M.ComplexityLimit w p) w‚Å∞ p ‚Üî Satisfies (M.ComplexityLimit w q) w‚Å∞ p := by
  constructor;
  . apply zero_complexity_limit_model_zero <;> simp_all;
  . apply zero_complexity_limit_model_zero <;> simp_all;

end ComplexityLimit


open Relation (TransGen ReflTransGen)

structure RootedFrame extends Kripke.Frame where
  root : World
  default := root
  def_root : ‚àÄ w ‚â† root, root ‚â∫* w


section

def Frame.Cuttage (F : Kripke.Frame) (r : F.World) : Kripke.RootedFrame where
  World := { w | r ‚â∫* w }
  Rel x y := x.1 ‚â∫ y.1
  root := ‚ü®r, by tauto‚ü©
  def_root := by
    rintro ‚ü®w, hw‚ü© ne_wr;
    simp at hw;
    sorry
    -- rintro x (rfl | ‚ü®Rrz, Rzx‚ü©);
    -- . simp;
    -- . rename_i z;
    --   replace Rzx : Rel ‚ü®z, Rrz‚ü© ‚ü®x, ReflTransGen.tail Rrz Rzx‚ü© := Rzx;
    --   exact ReflTransGen.tail (by sorry) Rzx;
      -- have : self.Rel ‚ü®z, (by sorry)‚ü© ‚ü®x, (by sorry)‚ü© := by sorry;
      -- rename_i z hzx;
infix:100 "‚Üæ" => Frame.Cuttage


def Model.Cuttage (M : Kripke.Model Œ±) (r : M.World) : Kripke.Model Œ± where
  Frame := (M.Frame‚Üær).toFrame
  Valuation w a := M.Valuation w.1 a
infix:100 "‚Üæ" => Model.Cuttage

/-
section

variable {M : Kripke.Model Œ±} {r y : M.World} {p : Formula Œ±}

/-
lemma cuttage_back (Rrx : r ‚â∫ y) : Satisfies (M‚Üæy) ‚ü®y, (by simp)‚ü© p ‚Üí Satisfies (M‚Üær) ‚ü®y, (by aesop)‚ü© p := by
  induction p using Formula.rec' with
  | hbox p ih => sorry;
  | hor p q ihp ihq =>
    rintro (hp | hq);
    . left; exact ihp hp;
    . right; exact ihq hq;
  | himp p q ihp ihq =>
    rintro hpq hp;
    sorry;;
    exact ihq (hp $ ihp hq);
  | hneg p ih =>
    simp_all [Model.Cuttage, Satisfies];
  | _ => simp_all [Model.Cuttage, Satisfies];

lemma cuttage_on_root {M : Kripke.Model Œ±} {r : M.World} {p : Formula Œ±} : r ‚äß p ‚Üî Satisfies (M‚Üær) ‚ü®r, (by simp)‚ü© p := by
  -- simp [Model.PointSubframeGeneration, Model.SubframeGeneration];
  induction p using Formula.rec' generalizing r with
  | hbox p ih =>
    constructor;
    . rintro hr ‚ü®y, (rfl | Rry)‚ü© h;
      . exact ih.mp $ hr h;
      . have : y ‚äß p := hr Rry;
        exact cuttage_back Rry $ ih.mp this;
    . intro h y Rry;
      have := @h ‚ü®y, (by aesop)‚ü© Rry;
      have := cuttage_back Rry this;
  | _ => simp_all [Model.Cuttage, Satisfies];
    -- simp_all [Satisfies];
-/

open Formula.Subformulas

/--
  r : M.World
  h : Satisfies (Model.ComplexityLimit r (‚ñ°p)) r‚Å∞ (‚ñ°p)
  x : (M‚Üær).Frame.World
  Rrx : ‚ü®r, ‚ãØ‚ü© ‚â∫ x
  this‚úù¬≤ : r ‚äß ‚ñ°p
  this‚úù¬π : Satisfies M (‚Üëx) p
  this‚úù : Satisfies (Model.ComplexityLimit (‚Üëx) p) (‚Üëx)‚Å∞ p
  this : Satisfies (M‚Üæ‚Üëx) ‚ü®‚Üëx, ‚ãØ‚ü© p
  ‚ä¢ Satisfies (M‚Üær) x p
-/

lemma forward {r : M.World} {x : (M‚Üær).World} (Rrx : (M‚Üær).Frame.Rel' ‚ü®r, (by simp)‚ü© x) : Satisfies (M‚Üæx.1) ‚ü®x.1, (by simp)‚ü© p ‚Üî Satisfies (M‚Üær) x p := by
  induction p using Formula.rec' generalizing r with
  | hbox p ihp =>
    constructor;
    . rintro h y Rxy;
      sorry;
      -- apply @ihp r |>.mp;
      -- apply @ihp y.1|>.mp;
      -- . sorry;
      -- . have := @h ‚ü®y.1, (by aesop)‚ü© Rxy;
      --   exact @ihp x.1 _ _ this;
    . sorry;
  | _ => sorry;

lemma limit_cuttage : Satisfies (M.ComplexityLimit r p) r‚Å∞ p ‚Üî Satisfies (M‚Üær) ‚ü®r, (by simp)‚ü© p := by
  induction p using Formula.rec' generalizing r with
  | hatom => simp [Model.ComplexityLimit, Model.Cuttage, Satisfies];
  | hverum => simp [Model.ComplexityLimit, Model.Cuttage, Satisfies];
  | hfalsum => simp [Model.ComplexityLimit, Model.Cuttage, Satisfies];
  | hneg p ihp =>
    apply Iff.not;
    constructor;
    . rintro hp; apply ihp.mp; exact zero_complexity_limit_model (mem_neg (by simp)) |>.mpr hp;
    . rintro hp; apply zero_complexity_limit_model (mem_neg (by simp)) |>.mp $ ihp.mpr hp;
  | hand p q ihp ihq =>
    constructor;
    . rintro ‚ü®hp, hq‚ü©;
      constructor;
      . apply ihp.mp; exact zero_complexity_limit_model (mem_and (r := q) (by simp) |>.1) |>.mpr hp;
      . apply ihq.mp; exact zero_complexity_limit_model (mem_and (q := p) (by simp) |>.2) |>.mpr hq;
    . rintro ‚ü®hp, hq‚ü©;
      apply iff_satisfy_complexity_limit_model.mp;
      constructor;
      . exact iff_satisfy_complexity_limit_model.mpr $ ihp.mpr hp;
      . exact iff_satisfy_complexity_limit_model.mpr $ ihq.mpr hq;
  | hor p q ihp ihq =>
    constructor;
    . rintro (hp | hq);
      . left; apply ihp.mp; exact zero_complexity_limit_model (mem_or (r := q) (by simp) |>.1) |>.mpr hp;
      . right; apply ihq.mp; exact zero_complexity_limit_model (mem_or (q := p) (by simp) |>.2) |>.mpr hq;
    . rintro (hp | hq);
      . apply iff_satisfy_complexity_limit_model.mp; left;
        exact iff_satisfy_complexity_limit_model.mpr $ ihp.mpr hp;
      . apply iff_satisfy_complexity_limit_model.mp; right;
        exact iff_satisfy_complexity_limit_model.mpr $ ihq.mpr hq;
  | himp p q ihp ihq =>
    constructor;
    . rintro hpq hp;
      apply ihq.mp;
      apply zero_complexity_limit_model (q := p ‚ü∂ q) (mem_imp (q := p) (by simp) |>.2) |>.mpr;
      apply hpq;
      exact zero_complexity_limit_model (mem_imp (r := q) (by simp) |>.1) |>.mp $ ihp.mpr hp;
    . rintro hpq;
      apply iff_satisfy_complexity_limit_model.mp;
      intro hp;
      apply iff_satisfy_complexity_limit_model.mpr;
      apply ihq.mpr;
      apply hpq;
      apply ihp.mp;
      exact iff_satisfy_complexity_limit_model.mp hp;
  | hbox p ihp =>
    constructor;
    . rintro h x Rrx;
      have : r ‚äß ‚ñ°p := @iff_satisfy_complexity_limit_model Œ± _ M r (‚ñ°p) |>.mpr h;
      have := iff_satisfy_complexity_limit_model.mp $ this Rrx;
      sorry;
      -- exact forward Rrx $ ihp.mp this
    . sorry;
      /-
      rintro h;
      apply iff_satisfy_complexity_limit_model.mp;
      rintro x Rrx;
      apply iff_satisfy_complexity_limit_model.mpr;
      apply ihp.mpr;
      apply forward ;
      have := @h ‚ü®x, (by sorry)‚ü© Rrx;
      have := @ihp r;
      sorry;
      -/


lemma cuttage_on_root‚ÇÇ : r ‚äß p ‚Üî Satisfies (M‚Üær) ‚ü®r, (by simp)‚ü© p := Iff.trans iff_satisfy_complexity_limit_model limit_cuttage

end

end
-/

def Frame.downward {F : Kripke.Frame} (x : F.World) : Type u := { w // w ‚â∫+ x }
postfix:100 "‚Üì" => Frame.downward

structure Tree extends Kripke.RootedFrame where
  branching : ‚àÄ x : World, ‚àÄ y z : x‚Üì, y ‚â† z ‚Üí (y.1 ‚â∫ z.1 ‚à® z.1 ‚â∫ y.1) -- linear order

structure TransitiveTree extends Kripke.Tree where
  rel_irreflexive : Irreflexive Rel
  rel_transitive : Transitive Rel

structure FiniteTransitiveTree extends TransitiveTree, FiniteFrame where

set_option linter.unusedVariables false in
protected abbrev FiniteTransitiveTree.Dep (Œ± : Type u) := FiniteTransitiveTree
protected abbrev FiniteTransitiveTree.alt (T : FiniteTransitiveTree) {Œ±} : FiniteTransitiveTree.Dep Œ± := T
postfix:max "#" => FiniteTransitiveTree.alt

namespace FiniteTransitiveTree

instance : Semantics (Formula Œ±) (FiniteTransitiveTree.Dep Œ±) := ‚ü®fun T ‚Ü¶ Formula.Kripke.ValidOnFrame T.toFrame‚ü©

end FiniteTransitiveTree



section TreeUnravelling

def Frame.TreeUnravelling (F : Frame) (r : F.World) : Kripke.Frame where
  World := { c : List F.World | [r] <+: c ‚àß c.Chain' F.Rel }
  default := ‚ü®[r], (by simp)‚ü©
  Rel cx cy := ‚àÉ z, cx.1 ++ [z] = cy.1

namespace Frame.TreeUnravelling

variable {F : Frame} {r : F.World}

@[simp]
lemma not_nil {c : (F.TreeUnravelling r).World} : c.1 ‚â† [] := by
  have := c.2.1;
  by_contra;
  simp_all;

@[simp]
lemma irreflexive : Irreflexive (F.TreeUnravelling r).Rel := by
  intro x; simp [TreeUnravelling];

def PMorphism (F : Frame) (r : F) : F.TreeUnravelling r ‚Üí‚Çö F where
  toFun c := c.1.getLast (by simp)
  forth {cx cy} h := by
    obtain ‚ü®z, hz‚ü© := h;
    have ‚ü®_, _, h‚ü© := @List.chain'_append _ F.Rel cx.1 [z] |>.mp (by rw [hz]; exact cy.2.2);
    refine h (cx.1.getLast (by aesop)) ?hx (cy.1.getLast (by aesop)) ?hy;
    . exact List.getLast?_eq_getLast_of_ne_nil (by simp);
    . rw [‚Üê@List.getLast_append_singleton _ z cx.1]; simp_all;
  back {cx y} h := by
    simp_all;
    use ‚ü®cx.1 ++ [y], ?_‚ü©;
    . constructor;
      . simp;
      . use y;
    . constructor;
      . obtain ‚ü®i, hi‚ü© := cx.2.1;
        use (i ++ [y]);
        simp_rw [‚ÜêList.append_assoc, hi];
      . apply List.Chain'.append;
        . exact cx.2.2;
        . simp;
        . intro z hz; simp;
          convert h;
          exact List.mem_getLast?_eq_getLast hz |>.2;

variable (hr : F.isRooted r)

@[simp]
lemma PMorphism.surjective_of_rooted : Function.Surjective (PMorphism F r) := by
  intro x;
  use ‚ü®[r, x], ?_‚ü©
  simp [PMorphism];
  constructor;
  . use [x]; simp;
  . simp; exact hr x;

lemma validOnBaseFrame : (F.TreeUnravelling r)# ‚äß p ‚Üí F# ‚äß p
  := iff_formula_valid_on_frame_surjective_morphism (PMorphism F r) (by simp_all)

end Frame.TreeUnravelling


def Model.TreeUnravelling (M : Kripke.Model Œ±) (r : M.World) : Kripke.Model Œ± where
  Frame := M.Frame.TreeUnravelling r
  Valuation c a := M.Valuation (c.1.getLast (by simp)) a

namespace Model.TreeUnravelling

variable {M : Kripke.Model Œ±} {r : M.World} {p : Formula Œ±}

def PMorphism (M : Kripke.Model Œ±) (r : M.World) : M.TreeUnravelling r ‚Üí‚Çö M :=
  Model.PseudoEpimorphism.mkAtomic (Frame.TreeUnravelling.PMorphism M.Frame r) $ by aesop;

end Model.TreeUnravelling

end TreeUnravelling


/-
section TransitiveTreeUnravelling

abbrev Frame.TransitiveTreeUnravelling (F : Frame) (r : F.World) :=
  letI FX := (F‚Üær).TreeUnravelling (‚ü®r, by simp‚ü©) |>.TransitiveClosure
  FX

namespace Frame.TransitiveTreeUnravelling

variable {F : Frame} {r : F.World} {p : Formula Œ±}

@[simp]
lemma not_nil {c : (F.TransitiveTreeUnravelling r).World} : c.1 ‚â† [] := by
  by_contra;
  have := c.2.1;
  simp_all;

@[simp]
lemma transitive : Transitive (F.TransitiveTreeUnravelling r).Rel := by simp

def PMorphism (F : Frame) (r : F) (F_trans : Transitive F): F.TransitiveTreeUnravelling r ‚Üí‚Çö F where
  toFun c := c.1.getLast (by simp)
  forth {cx cy} h := by
    obtain ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := h;
    sorry;
    sorry;
  back {cx y} h := by
    simp_all;
    use ‚ü®(cx.1 ++ [y]), ?_‚ü©;
    . constructor;
      . simp;
      . sorry;
    . simp;
      constructor;
      . obtain ‚ü®i, hi‚ü© := cx.2.1;
        use (i ++ [y]);
        simp_rw [‚ÜêList.append_assoc, hi];;
      . apply List.Chain'.append;
        . exact cx.2.2;
        . simp;
        . intro z hz; simp;
          convert h;
          exact List.mem_getLast?_eq_getLast hz |>.2;

variable (F_trans : Transitive F)

@[simp]
lemma PMorphism.surjective_of_weak_rooted (hr : F.isRooted r) : Function.Surjective (PMorphism F r F_trans) := by
  intro x;
  use ‚ü®[r, x], ?_‚ü©
  simp [PMorphism];
  constructor;
  . use [x]; simp;
  . simpa using @hr x;

lemma validOnBaseFrame_of_weak_rooted (hr : F.isRooted r) : (F.TransitiveTreeUnravelling r)# ‚äß p ‚Üí F# ‚äß p
  := iff_formula_valid_on_frame_surjective_morphism (TransitiveTreeUnravelling.PMorphism F r F_trans) (by simp_all)


@[simp]
lemma PMorphism.surjective_of_reflexive_rooted (hRefl : Reflexive F.Rel) (hr : F.isStrictRooted r) : Function.Surjective (TransitiveTreeUnravelling.PMorphism F r F_trans) := by
  intro x;
  use ‚ü®[r, x], ?_‚ü©;
  simp [PMorphism];
  constructor;
  . use [x]; simp;
  . simp;
    by_cases hx : x = r;
    . subst hx; exact hRefl x;
    . exact hr x hx;

lemma validOnBaseFrame_of_reflexive_rooted (hRefl : Reflexive F.Rel) (hr : F.isStrictRooted r) : (F.TransitiveTreeUnravelling r)# ‚äß p ‚Üí F# ‚äß p
  := iff_formula_valid_on_frame_surjective_morphism (TransitiveTreeUnravelling.PMorphism F r F_trans) (by simp_all)

end Frame.TransitiveTreeUnravelling


def Model.TransitiveTreeUnravelling (M : Kripke.Model Œ±) (r : M.World) : Kripke.Model Œ± where
  Frame := M.Frame.TransitiveTreeUnravelling r
  Valuation c a := M.Valuation (c.1.getLast (by simp)) a

namespace Model.TransitiveTreeUnravelling

def PMorphism (M : Kripke.Model Œ±) (r : M.World) (M_trans : Transitive M.Frame) : (M.TransitiveTreeUnravelling r) ‚Üí‚Çö M :=
  Model.PseudoEpimorphism.mkAtomic (Frame.TransitiveTreeUnravelling.PMorphism M.Frame r M_trans) $ by aesop;

variable {M : Kripke.Model Œ±} {r : M.World} (M_trans : Transitive M.Frame)

lemma modal_equivalence : ((M.TransitiveTreeUnravelling r), w) ‚Ü≠ (M, w.1.getLast (by simp)) := by
    have H := @modal_equivalence_of_modal_morphism _ (M.TransitiveTreeUnravelling r) M (PMorphism M r M_trans) w;
    intro p;
    have Hp := @H p;
    constructor;
    . intro hp;
      exact Hp.mp hp;
    . intro hp;
      exact Hp.mpr hp;

end Model.TransitiveTreeUnravelling

end TransitiveTreeUnravelling
-/


section TreeUnravelling

abbrev Frame.TreeUnravelling‚ÇÇ (F : Frame) (r : F.World) : TransitiveTree :=
  letI Fx := ((F‚Üær).TreeUnravelling (F‚Üær).root).TransitiveClosure;
  {
    World := Fx.World
    Rel := Fx.Rel
    root := Fx.default
    def_root := by
      rintro ‚ü®w, ‚ü®z, rfl‚ü©, hw‚ÇÇ‚ü© enr;
      sorry;
    branching := by
      rintro x y z hne;
      sorry;
    rel_transitive := by simp [Fx];
    rel_irreflexive := by
      simp [Irreflexive];
      intro x Rxx;
      simp [Fx] at Rxx;
      sorry;
  }

abbrev Frame.mkFiniteTransitiveTree (F : TransitiveTree) (_ : Finite F.World) : FiniteTransitiveTree where
  World := F.World
  default := F.default
  def_root := F.def_root
  rel_irreflexive := F.rel_irreflexive
  rel_transitive := F.rel_transitive
  branching := F.branching

abbrev FiniteFrame.TreeUnravelling (F : FiniteFrame) (r : F.World) : FiniteTransitiveTree :=
  Frame.mkFiniteTransitiveTree (F.TreeUnravelling‚ÇÇ r) $ by
    simp [Frame.TreeUnravelling‚ÇÇ];
    sorry;

end TreeUnravelling


variable {p : Formula Œ±}

lemma validOnFTT_Aux (h : TransitiveIrreflexiveFrameClass.{u}Íü≥# ‚äß p) : ‚àÄ T : FiniteTransitiveTree.{u}, T# ‚äß p := by
  simp at h;
  intro T;
  apply @h T.toFrame T.toFiniteFrame;
  . exact T.rel_transitive;
  . exact T.rel_irreflexive;
  . tauto;

lemma validOnFTT_root (h : ‚àÄ F : FiniteTransitiveTree.{u}, F# ‚äß p) : ‚àÄ T : FiniteTransitiveTree.{u}, ‚àÄ V, Satisfies ‚ü®T.toFrame, V‚ü© T.root p := by
  intro T V; exact h T V _;

-- set_option pp.proofs true in
lemma validOnFTT_root' : (‚àÄ T : FiniteTransitiveTree.{u}, ‚àÄ V, Satisfies ‚ü®T.toFrame, V‚ü© T.root p) ‚Üí TransitiveIrreflexiveFrameClass.{u}Íü≥# ‚äß p := by
  contrapose; push_neg;
  intro h; simp [ValidOnFrame, ValidOnModel] at h;
  obtain ‚ü®_, F, F_trans, F_irrefl, rfl, V, x, hx‚ü© := h;
  let T := F.TreeUnravelling x;
  let TV : Valuation T.toFrame Œ± := Œª x a => V (x.1.getLast (by simp)).1 a
  use T, TV;
  apply @modal_equivalence_of_modal_morphism Œ± ‚ü®T.toFrame, TV‚ü© ‚ü®F, V‚ü© ?m T.root p |>.not.mpr ?s;
  . exact {
      toFun := Œª c => c.1.getLast (by simp) |>.1
      atomic := by simp;
      back := by
        simp;
        rintro ‚ü®ws, hw‚ÇÅ, hw‚ÇÇ‚ü© v hwv;
        let v' : (F.toFrame‚Üæx).World := ‚ü®v, ?hv‚ü©;
        use ‚ü®ws ++ [v'], ?hwv‚ü©;
        . constructor;
          . simp;
          . apply Frame.TransitiveClosure.single;
            use v';
        . constructor;
          . obtain ‚ü®i, hi‚ü© := hw‚ÇÅ;
            use (i ++ [v']);
            simp_rw [‚ÜêList.append_assoc, hi];
          . apply List.Chain'.append;
            . exact hw‚ÇÇ;
            . simp;
            . sorry;
        . simp_all;
          sorry;
      forth := by
        -- rintro cx cy ‚ü®z, hz‚ü©;
        -- have := @List.chain'_append _ T.Rel;
        sorry;
        -- obtain ‚ü®z, hz‚ü© := h;
        -- have ‚ü®_, _, h‚ü© := @List.chain'_append _ F.Rel cx [z] |>.mp (by rw [hz]; exact cy.2.2);
        -- refine h (cx.1.getLast (by aesop)) ?hx (cy.1.getLast (by aesop)) ?hy;
        -- . exact List.getLast?_eq_getLast_of_ne_nil (by simp);
        -- . rw [‚Üê@List.getLast_append_singleton _ z cx.1]; simp_all;
    }
  . exact hx;

end

end Kripke

end LO.Modal.Standard
