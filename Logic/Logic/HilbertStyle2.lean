import Logic.Logic.System
import Logic.Logic.Calculus

namespace LO

class Deduction {F : Type u} [LogicSymbol F] (Bew : Finset F ‚Üí F ‚Üí Sort*) where
  axm : ‚àÄ {f}, f ‚àà Œì ‚Üí Bew Œì f
  weakening' : ‚àÄ {T U f}, T ‚äÜ U ‚Üí Bew T f ‚Üí Bew U f

namespace Hilbert

variable {F : Type u} [LogicSymbol F] [DecidableEq F]

section

variable (Bew : Finset F ‚Üí F ‚Üí Sort*)

/--
  Minimal Propositional Logic.
-/
class Minimal extends Deduction Bew where
  neg_def      {p : F}                    : ~p = p ‚ü∂ ‚ä•
  modus_ponens {Œì : Finset F} {p q : F}   : (Bew Œì (p ‚ü∂ q)) ‚Üí (Bew Œì p) ‚Üí (Bew Œì q)
  verum        (Œì : Finset F)             : Bew Œì ‚ä§
  imply‚ÇÅ       (Œì : Finset F) (p q : F)   : Bew Œì (p ‚ü∂ (q ‚ü∂ p))
  imply‚ÇÇ       (Œì : Finset F) (p q r : F) : Bew Œì ((p ‚ü∂ q ‚ü∂ r) ‚ü∂ (p ‚ü∂ q) ‚ü∂ p ‚ü∂ r)
  conj‚ÇÅ        (Œì : Finset F) (p q : F)   : Bew Œì (p ‚ãè q ‚ü∂ p)
  conj‚ÇÇ        (Œì : Finset F) (p q : F)   : Bew Œì (p ‚ãè q ‚ü∂ q)
  conj‚ÇÉ        (Œì : Finset F) (p q : F)   : Bew Œì (p ‚ü∂ q ‚ü∂ p ‚ãè q)
  disj‚ÇÅ        (Œì : Finset F) (p q : F)   : Bew Œì (p ‚ü∂ p ‚ãé q)
  disj‚ÇÇ        (Œì : Finset F) (p q : F)   : Bew Œì (q ‚ü∂ p ‚ãé q)
  disj‚ÇÉ        (Œì : Finset F) (p q r : F) : Bew Œì ((p ‚ü∂ r) ‚ü∂ (q ‚ü∂ r) ‚ü∂ (p ‚ãé q) ‚ü∂ r)

/-- Supplymental -/
class HasDT where
  dt {Œì : Finset F} {p q : F} : (Bew (insert p Œì) q) ‚Üí (Bew Œì (p ‚ü∂ q))

class HasEFQ where
  efq (Œì : Finset F) (p : F) : Bew Œì (‚ä• ‚ü∂ p)

class HasWeakLEM where
  wlem (Œì : Finset F) (p : F) : Bew Œì (~p ‚ãé ~~p)

class HasLEM where
  lem (Œì : Finset F) (p : F) : Bew Œì (p ‚ãé ~p)

class HasDNE where
  dne (Œì : Finset F) (p : F) : Bew Œì (~~p ‚ü∂ p)

class HasDummett where
  dummett (Œì : Finset F) (p q : F) : Bew Œì ((p ‚ü∂ q) ‚ãé (q ‚ü∂ p))

class HasPeirce where
  peirce (Œì : Finset F) (p q : F) : Bew Œì (((p ‚ü∂ q) ‚ü∂ p) ‚ü∂ p)

/--
  Intuitionistic Propositional Logic.

  Modal companion of `ùêíùüí`
-/
class Intuitionistic extends Minimal Bew, HasEFQ Bew where

/--
  Propositional Logic for Weak Law of Excluded Middle.

  Modal companion of `ùêíùüí.ùüê`
-/
class WeakLEM extends Intuitionistic Bew, HasWeakLEM Bew where


/--
  G√∂del-Dummett Propositional Logic.

  Modal companion of `ùêíùüí.ùüë`
-/
class GD extends Intuitionistic Bew, HasDummett Bew where

/--
  Classical Propositional Logic.

  Modal companion of `ùêíùüì`
-/
class Classical extends Minimal Bew, HasDNE Bew

end

open Deduction Minimal HasDT Intuitionistic Classical

infixl:90 " ‚®Ä " => modus_ponens

variable {Bew : Finset F ‚Üí F ‚Üí Sort*} (Œì : Finset F) (p q r : F)

section Minimal

variable [hM : Minimal Bew] [HasDT Bew]

/-
lemma imply‚ÇÅ : Bew Œì (p ‚ü∂ (q ‚ü∂ p)) := by
  repeat apply dtr;
  apply axm;
  simp;

lemma imply‚ÇÇ : Bew Œì ((p ‚ü∂ q ‚ü∂ r) ‚ü∂ (p ‚ü∂ q) ‚ü∂ p ‚ü∂ r) := by
  repeat apply dtr;
  have h‚ÇÅ : Bew (insert p (insert (p ‚ü∂ q) (insert (p ‚ü∂ q ‚ü∂ r) Œì))) p := axm (by simp);
  have h‚ÇÇ : Bew (insert p (insert (p ‚ü∂ q) (insert (p ‚ü∂ q ‚ü∂ r) Œì))) (p ‚ü∂ q) := axm (by simp);
  have h‚ÇÉ : Bew (insert p (insert (p ‚ü∂ q) (insert (p ‚ü∂ q ‚ü∂ r) Œì))) (p ‚ü∂ q ‚ü∂ r) := axm (by simp);
  exact (h‚ÇÉ ‚®Ä h‚ÇÅ) ‚®Ä (h‚ÇÇ ‚®Ä h‚ÇÅ);
-/

lemma dtl (d : Bew Œì (p ‚ü∂ q)) : Bew (insert p Œì) q := (weakening' (by simp) d) ‚®Ä (axm (by simp))

@[simp]
lemma imp_id : Bew Œì (p ‚ü∂ p) := (imply‚ÇÇ Œì p (p ‚ü∂ p) p) ‚®Ä (imply‚ÇÅ _ _ _) ‚®Ä (imply‚ÇÅ _ _ _)

lemma dni : Bew Œì (p ‚ü∂ ~~p) := by
  have h‚ÇÅ : Bew (insert (p ‚ü∂ ‚ä•) (insert p Œì)) (p ‚ü∂ ‚ä•) := axm (by simp);
  have h‚ÇÇ : Bew (insert (p ‚ü∂ ‚ä•) (insert p Œì)) p := axm (by simp);
  repeat rw [hM.neg_def];
  exact dt $ dt $ h‚ÇÅ ‚®Ä h‚ÇÇ;

end Minimal


section Classical

variable [c : Classical Bew] [HasDT Bew]

instance : HasEFQ Bew where
  efq Œì p := by
    have h‚ÇÅ : Bew (insert ‚ä• Œì) ‚ä• := axm (by simp);
    have h‚ÇÇ := c.imply‚ÇÅ (insert ‚ä• Œì) ‚ä• (p ‚ü∂ ‚ä•);
    have h‚ÇÉ := h‚ÇÇ ‚®Ä h‚ÇÅ;
    have h‚ÇÑ := c.dne (insert ‚ä• Œì) p; simp [c.neg_def] at h‚ÇÑ;
    have h‚ÇÖ := h‚ÇÑ ‚®Ä h‚ÇÉ;
    exact dt h‚ÇÖ;

instance : Intuitionistic Bew where

instance : HasLEM Bew where
  lem Œì p := by sorry;

end Classical

end Hilbert

end LO
