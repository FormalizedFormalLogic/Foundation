import Logic.Logic.Semantics
import Logic.Logic.System
import Logic.Vorspiel.BinaryRelations

universe u v
-- set_option autoImplicit false

namespace LO.Kripke

structure Frame where
  World : Type u
  Rel : Rel World World
  [World_nonempty : Nonempty World]

instance : CoeSort Frame (Type u) := ‚ü®Frame.World‚ü©
instance : CoeFun Frame (Œª F => F.World ‚Üí F.World ‚Üí Prop) := ‚ü®Frame.Rel‚ü©

instance {F : Frame} : Nonempty F.World := F.World_nonempty

abbrev Frame.Rel' {F : Frame} (x y : F.World) := F.Rel x y
scoped infix:45 " ‚â∫ " => Frame.Rel'

noncomputable abbrev Frame.default {F : Frame} : F.World := Classical.choice F.World_nonempty
notation "Ôπ´" => Frame.default


set_option linter.unusedVariables false in
abbrev Frame.Dep (Œ± : Type v) := Frame.{u}

abbrev Frame.alt (F : Frame.{u}) (Œ± : Type v) : Frame.Dep Œ± := F
notation F:max "#" Œ±:max => Frame.alt F Œ±


structure FiniteFrame extends Frame where
  [World_finite : Finite World]

instance {F : FiniteFrame} : Finite (F.World) := F.World_finite
instance : Coe (FiniteFrame) (Frame) := ‚ü®Œª F ‚Ü¶ F.toFrame‚ü©


open Relation (ReflTransGen TransGen)


abbrev Frame.RelReflTransGen {F : Frame} : _root_.Rel F.World F.World:= ReflTransGen (¬∑ ‚â∫ ¬∑)
scoped infix:45 " ‚â∫^* " => Frame.RelReflTransGen

namespace Frame.RelReflTransGen

variable {F : Frame}

@[simp] lemma single {x y : F.World} (hxy : x ‚â∫ y) : x ‚â∫^* y := ReflTransGen.single hxy

@[simp] lemma reflexive : Reflexive F.RelReflTransGen := Relation.reflexive_reflTransGen

@[simp] lemma refl {x : F.World} : x ‚â∫^* x := reflexive x

@[simp] lemma transitive : Transitive F.RelReflTransGen := Relation.transitive_reflTransGen

@[simp] lemma symmetric : Symmetric F.Rel ‚Üí Symmetric F.RelReflTransGen := ReflTransGen.symmetric

end Frame.RelReflTransGen


abbrev Frame.TransitiveReflexiveClosure (F : Frame) : Frame where
  World := F.World
  Rel := (¬∑ ‚â∫^* ¬∑)
postfix:max "^*" => Frame.TransitiveReflexiveClosure

namespace Frame.TransitiveReflexiveClosure

variable {F : Frame}

lemma single {x y : F.World} (hxy : x ‚â∫ y) : F^*.Rel x y := ReflTransGen.single hxy

lemma rel_reflexive : Reflexive F^*.Rel := by intro x; exact ReflTransGen.refl;

lemma rel_transitive : Transitive F^*.Rel := by simp;

lemma rel_symmetric : Symmetric F.Rel ‚Üí Symmetric F^* := ReflTransGen.symmetric

end Frame.TransitiveReflexiveClosure



abbrev Frame.RelTransGen {F : Frame} : _root_.Rel F.World F.World := TransGen (¬∑ ‚â∫ ¬∑)
scoped infix:45 " ‚â∫^+ " => Frame.RelTransGen

namespace Frame.RelTransGen

variable {F : Frame}

@[simp] lemma single {x y : F.World} (hxy : x ‚â∫ y) : x ‚â∫^+ y := TransGen.single hxy

@[simp]
lemma transitive : Transitive F.RelTransGen := Œª _ _ _ => TransGen.trans

@[simp]
lemma symmetric (hSymm : Symmetric F.Rel) : Symmetric F.RelTransGen := by
  intro x y rxy;
  induction rxy with
  | single h => exact TransGen.single $ hSymm h;
  | tail _ hyz ih => exact TransGen.trans (TransGen.single $ hSymm hyz) ih

end Frame.RelTransGen


abbrev Frame.TransitiveClosure (F : Frame) : Frame where
  World := F.World
  Rel := (¬∑ ‚â∫^+ ¬∑)
scoped postfix:max "^+" => Frame.TransitiveClosure

namespace Frame.TransitiveClosure

variable {F : Frame}

lemma single {x y : F.World} (hxy : x ‚â∫ y) : F^+ x y := TransGen.single hxy

lemma rel_transitive : Transitive F^+ := by simp;

lemma rel_symmetric (hSymm : Symmetric F.Rel) : Symmetric F.TransitiveClosure := by simp_all

end Frame.TransitiveClosure


abbrev FrameProperty := Frame ‚Üí Prop


abbrev FrameClass := Set (Frame)

set_option linter.unusedVariables false in
abbrev FrameClass.Dep (Œ± : Type v) := FrameClass.{u}

abbrev FrameClass.alt (ùîΩ : FrameClass) (Œ±) : FrameClass.Dep Œ± := ùîΩ
notation ùîΩ:max "#" Œ±:max => FrameClass.alt ùîΩ Œ±

/-
abbrev FiniteFrameClass := Set (FiniteFrame)

@[simp] def FiniteFrameClass.toFrameClass (ùîΩ : FiniteFrameClass) : FrameClass := { F | ‚àÉ F', F' ‚àà ùîΩ ‚àß F'.toFrame = F }
instance : Coe (FiniteFrameClass) (FrameClass) := ‚ü®FiniteFrameClass.toFrameClass‚ü©

@[simp] def FrameClass.toFiniteFrameClass (ùîΩ : FrameClass) : FiniteFrameClass := { F | F.toFrame ‚àà ùîΩ }
instance : Coe (FrameClass) (FiniteFrameClass) := ‚ü®FrameClass.toFiniteFrameClass‚ü©

@[simp] abbrev FrameClass.restrictFinite (ùîΩ : FrameClass) : FrameClass := FiniteFrameClass.toFrameClass ‚ÜëùîΩ
postfix:max "Íü≥" => FrameClass.restrictFinite

lemma FrameClass.iff_mem_restrictFinite {ùîΩ : FrameClass} {F : Frame} (h : F ‚àà ùîΩ) (F_finite : Finite F.World) : F ‚àà ùîΩÍü≥ := by
  simp;
  use { toFrame := F, World_finite := F_finite };
-/

-- set_option pp.universes true in
/-
abbrev FrameClassOfSystem {F : Type u} [System F S] (ùì¢ : S) (Œ± : Type u) [Semantics F (Frame.Dep Œ±)] : FrameClass.Dep Œ± := { F | F ‚äß* System.theory ùì¢ }
notation "ùîΩ(" ùì¢ " of " Œ± ")" => FrameClassOfSystem ùì¢ Œ±
-/

abbrev FrameClassOfFrameProperty (P : FrameProperty) : FrameClass := { F | P F }
notation "ùîΩ(" P ")" => FrameClassOfFrameProperty P


section

/-- FrameClass for `ùêàùêßùê≠` or `ùêíùüí` -/
abbrev ReflexiveTransitiveFrameClass := ùîΩ((Œª F => Reflexive F ‚àß Transitive F))

/-- FrameClass for `ùêÇùê•` -/
abbrev ReflexiveTransitiveExtensiveFrameClass := ùîΩ((Œª F => Reflexive F ‚àß Transitive F ‚àß Extensive F))

/-- FrameClass for `ùêäùêÇ` or `ùêíùüí.ùüê` -/
abbrev ReflexiveTransitiveConfluentFrameClass := ùîΩ((Œª F => Reflexive F ‚àß Transitive F ‚àß Confluent F))

/-- FrameClass for `ùêãùêÇ` or `ùêíùüí.ùüë` -/
abbrev ReflexiveTransitiveConnectedFrameClass := ùîΩ((Œª F => Reflexive F ‚àß Transitive F ‚àß Connected F))

end


class FrameClass.Characteraizable (ùîΩ : FrameClass) (P : outParam FrameProperty) where
  characterize : ‚àÄ {F}, P F ‚Üí F ‚àà ùîΩ
  nonempty : ‚àÉ F, P F


abbrev Valuation (F : Frame) (Œ± : Type*) := F.World ‚Üí Œ± ‚Üí Prop

abbrev Valuation.atomic_hereditary (V : Valuation F Œ±) : Prop := ‚àÄ {w‚ÇÅ w‚ÇÇ : F.World}, (w‚ÇÅ ‚â∫ w‚ÇÇ) ‚Üí ‚àÄ {a}, (V w‚ÇÅ a) ‚Üí (V w‚ÇÇ a)


structure Model (Œ±) where
  Frame : Frame
  Valuation : Valuation Frame Œ±

abbrev Model.World (M : Model Œ±) := M.Frame.World
instance : CoeSort (Model Œ±) (Type u) := ‚ü®Model.World‚ü©


section Classical

abbrev ClassicalFrame : Kripke.Frame where
  World := Unit
  Rel _ _ := True


namespace ClassicalFrame

lemma transitive : Transitive ClassicalFrame := by simp [Transitive];

lemma reflexive : Reflexive ClassicalFrame := by simp [Reflexive];

lemma euclidean : Euclidean ClassicalFrame := by simp [Euclidean];

lemma extensive : Extensive ClassicalFrame := by simp [Extensive];

lemma universal : Universal ClassicalFrame := by simp [Universal];

end ClassicalFrame


abbrev ClassicalValuation (Œ± : Type*) := Œ± ‚Üí Prop

abbrev ClassicalModel (V : ClassicalValuation Œ±) : Kripke.Model Œ± where
  Frame := ClassicalFrame
  Valuation _ a := V a

end Classical


end LO.Kripke
