import Logic.Logic.System

namespace LO

namespace System

variable (F : Type u) [LogicSymbol F] [System F]

class Intuitionistic where
  modus_ponens {T : Set F} {p q : F}   : T ‚ä¢! p ‚ü∂ q ‚Üí T ‚ä¢! p ‚Üí T ‚ä¢! q
  verum       (T : Set F)             : T ‚ä¢! ‚ä§
  falsum      (T : Set F) (p : F)     : T ‚ä¢! ‚ä• ‚ü∂ p
  imply‚ÇÅ      (T : Set F) (p q : F)   : T ‚ä¢! p ‚ü∂ q ‚ü∂ p
  imply‚ÇÇ      (T : Set F) (p q r : F) : T ‚ä¢! (p ‚ü∂ q ‚ü∂ r) ‚ü∂ (p ‚ü∂ q) ‚ü∂ p ‚ü∂ r
  conj‚ÇÅ       (T : Set F) (p q : F)   : T ‚ä¢! p ‚ãè q ‚ü∂ p
  conj‚ÇÇ       (T : Set F) (p q : F)   : T ‚ä¢! p ‚ãè q ‚ü∂ q
  conj‚ÇÉ       (T : Set F) (p q : F)   : T ‚ä¢! p ‚ü∂ q ‚ü∂ p ‚ãè q
  disj‚ÇÅ       (T : Set F) (p q : F)   : T ‚ä¢! p ‚ü∂ p ‚ãé q
  disj‚ÇÇ       (T : Set F) (p q : F)   : T ‚ä¢! q ‚ü∂ p ‚ãé q
  disj‚ÇÉ       (T : Set F) (p q r : F) : T ‚ä¢! (p ‚ü∂ r) ‚ü∂ (q ‚ü∂ r) ‚ü∂ p ‚ãé q ‚ü∂ r
  neg‚ÇÅ        (T : Set F) (p q : F)   : T ‚ä¢! (p ‚ü∂ q) ‚ü∂ (p ‚ü∂ ~q) ‚ü∂ ~p
  neg‚ÇÇ        (T : Set F) (p q : F)   : T ‚ä¢! p ‚ü∂ ~p ‚ü∂ q

class Deduction where
  deduction {T : Set F} {p q : F} : T ‚ä¢! p ‚ü∂ q ‚Üî T ‚à™ {p} ‚ä¢! q

variable {F}
variable {Struc : Type w ‚Üí Type v} [ùì¢ : Semantics F Struc]

namespace Intuitionistic

variable [Intuitionistic F] {T : Set F}

scoped infixl:90 " ‚®Ä " => modus_ponens

@[simp] lemma imp_id (p : F) : T ‚ä¢! p ‚ü∂ p := (imply‚ÇÇ T p (p ‚ü∂ p) p) ‚®Ä (imply‚ÇÅ T p (p ‚ü∂ p)) ‚®Ä (imply‚ÇÅ T p p)

@[simp] lemma hyp_right {p : F} (h : T ‚ä¢! p) (q) : T ‚ä¢! q ‚ü∂ p := imply‚ÇÅ T p q ‚®Ä h

lemma imp_trans {p q r : F} (hp : T ‚ä¢! p ‚ü∂ q) (hq : T ‚ä¢! q ‚ü∂ r) : T ‚ä¢! p ‚ü∂ r :=
  imply‚ÇÇ T p q r ‚®Ä hyp_right hq p ‚®Ä hp

lemma and_split {p q : F} (hp : T ‚ä¢! p) (hq : T ‚ä¢! q) : T ‚ä¢! p ‚ãè q := (conj‚ÇÉ T p q) ‚®Ä hp ‚®Ä hq

lemma and_left {p q : F} (h : T ‚ä¢! p ‚ãè q) : T ‚ä¢! p := conj‚ÇÅ T p q ‚®Ä h

lemma and_right {p q : F} (h : T ‚ä¢! p ‚ãè q) : T ‚ä¢! q := conj‚ÇÇ T p q ‚®Ä h

lemma and_symm {p q : F} (h : T ‚ä¢! p ‚ãè q) : T ‚ä¢! q ‚ãè p := and_split (and_right h) (and_left h)

lemma or_left {p q : F} (h : T ‚ä¢! p) : T ‚ä¢! p ‚ãé q := disj‚ÇÅ T p q ‚®Ä h

lemma or_right {p q : F} (h : T ‚ä¢! q) : T ‚ä¢! p ‚ãé q := disj‚ÇÇ T p q ‚®Ä h

lemma or_symm {p q : F} (h : T ‚ä¢! p ‚ãé q) : T ‚ä¢! q ‚ãé p := (disj‚ÇÉ T _ _ _) ‚®Ä (disj‚ÇÇ _ _ _) ‚®Ä (disj‚ÇÅ _ _ _) ‚®Ä h

lemma iff_refl (p : F) : T ‚ä¢! p ‚ü∑ p := and_split (imp_id p) (imp_id p)

lemma iff_symm {p q : F} (h : T ‚ä¢! p ‚ü∑ q) : T ‚ä¢! q ‚ü∑ p := and_split (and_right h) (and_left h)

lemma iff_trans {p q r : F} (hp : T ‚ä¢! p ‚ü∑ q) (hq : T ‚ä¢! q ‚ü∑ r) : T ‚ä¢! p ‚ü∑ r :=
  and_split (imp_trans (and_left hp) (and_left hq)) (imp_trans (and_right hq) (and_right hp))

lemma iff_mp {p q : F} (h : T ‚ä¢! p ‚ü∑ q) : T ‚ä¢! p ‚ü∂ q := and_left h

lemma iff_mpr {p q : F} (h : T ‚ä¢! p ‚ü∑ q) : T ‚ä¢! q ‚ü∂ p := and_right h

lemma iff_unprov {p q : F} (h‚ÇÅ : T ‚ä¢! p ‚ü∑ q) (h‚ÇÇ : T ‚ä¨! p) : T ‚ä¨! q := by
  by_contra hC;
  suffices : T ‚ä¢! p; aesop;
  exact (iff_mpr h‚ÇÅ) ‚®Ä (by simpa using hC);

lemma unprov_imp_left_iff (h‚ÇÅ : T ‚ä¨! œÉ ‚ü∂ œÄ) (h‚ÇÇ : T ‚ä¢! œÉ ‚ü∑ œÅ): (T ‚ä¨! œÅ ‚ü∂ œÄ) := by
  by_contra HC;
  suffices : T ‚ä¢! œÉ ‚ü∂ œÄ; simp_all only [not_isEmpty_of_nonempty];
  exact imp_trans (iff_mp h‚ÇÇ) (by simpa using HC);

lemma unprov_imp_right_iff (h‚ÇÅ : T ‚ä¨! œÉ ‚ü∂ œÄ) (h‚ÇÇ : T ‚ä¢! œÄ ‚ü∑ œÅ): (T ‚ä¨! œÉ ‚ü∂ œÅ) := by
  by_contra HC;
  suffices : T ‚ä¢! œÉ ‚ü∂ œÄ; simp_all only [not_isEmpty_of_nonempty];
  exact imp_trans (by simpa using HC) (iff_mpr h‚ÇÇ);

class BotDef (F : Type u) [LogicSymbol F] where
  bot_def : (‚ä• : F) = ~(‚ä§ : F)
open BotDef

variable [BotDef F]

lemma no_contradiction {p : F} (h‚ÇÅ : T ‚ä¢! p) (h‚ÇÇ : T ‚ä¢! ~p) : T ‚ä¢! ‚ä• := by
  have hl := imply‚ÇÅ T p ‚ä§ ‚®Ä h‚ÇÅ;
  have hr := imply‚ÇÅ T (~p) ‚ä§ ‚®Ä h‚ÇÇ;
  simpa [bot_def] using (neg‚ÇÅ T ‚ä§ p) ‚®Ä hl ‚®Ä hr;

lemma neg_imply_bot' {p : F} (h : T ‚ä¢! ~p) : T ‚ä¢! ~~p ‚ü∂ ‚ä• := by
  exact neg‚ÇÇ T (~p) ‚ä• ‚®Ä h;

lemma efq (p : F) : T ‚ä¢! ‚ä• ‚ü∂ p := by
  simpa [bot_def] using neg‚ÇÇ T ‚ä§ p ‚®Ä verum T;

class DoubleNeg (F : Type u) [LogicSymbol F] where
  double_neg : ‚àÄ (p : F), ~~p = p
open DoubleNeg

variable [DoubleNeg F]

lemma neg_imply_bot (p : F) (h : T ‚ä¢! ~p) : (T ‚ä¢! p ‚ü∂ ‚ä•) := by
  simpa [double_neg] using (neg‚ÇÇ T (~p) ‚ä• ‚®Ä h);

-- TODO: DoubleNeg„Çí‰ªÆÂÆö„Åô„ÇãÂøÖË¶Å„ÅØÁ¢∫„ÅãÁÑ°„ÅÑÔºàÁõ¥Ë¶≥‰∏ªÁæ©Ë´ñÁêÜ„ÅßÁ§∫„Åõ„ÇãÔºâ„ÅØ„Åö
lemma negneg_intro (p : F) : T ‚ä¢! p ‚ü∂ ~~p := by simp [double_neg];

lemma negneg_elim (p : F) : T ‚ä¢! p ‚ü∂ ~~p := by simp [double_neg];

class ImpDef (F : Type u) [LogicSymbol F] where
  imp_def {p q : F} : (p ‚ü∂ q) = ~p ‚ãé q

variable [ImpDef F]

lemma imp_contra‚ÇÄ {p q} (h : T ‚ä¢! p ‚ü∂ q) : (T ‚ä¢! ~q ‚ü∂ ~p) := by
  simp_all [ImpDef.imp_def, DoubleNeg.double_neg, or_symm];

lemma imp_contra‚ÇÅ {p q} (h : T ‚ä¢! p ‚ü∂ ~q) : (T ‚ä¢! q ‚ü∂ ~p) := by simpa [double_neg] using (imp_contra‚ÇÄ h);

lemma imp_contra‚ÇÇ {p q} (h : T ‚ä¢! ~p ‚ü∂ q) : (T ‚ä¢! ~q ‚ü∂ p) := by simpa [double_neg] using (imp_contra‚ÇÄ h);

lemma imp_contra‚ÇÉ {p q} (h : T ‚ä¢! ~p ‚ü∂ ~q) : (T ‚ä¢! q ‚ü∂ p) := by simpa [double_neg] using (imp_contra‚ÇÄ h);

lemma iff_intro : (T ‚ä¢! œÉ ‚ü∂ œÄ) ‚Üí (T ‚ä¢! œÄ ‚ü∂ œÉ) ‚Üí (T ‚ä¢! œÉ ‚ü∑ œÄ) := Œª H‚ÇÅ H‚ÇÇ => conj‚ÇÉ _ _ _ ‚®Ä H‚ÇÅ ‚®Ä H‚ÇÇ

lemma iff_contra : (T ‚ä¢! œÉ ‚ü∑ œÄ) ‚Üí (T ‚ä¢! ~œÉ ‚ü∑ ~œÄ) := Œª H => iff_intro (imp_contra‚ÇÄ $ iff_mpr H) (imp_contra‚ÇÄ $ iff_mp H)

lemma iff_contra' : (T ‚ä¢! œÉ ‚ü∑ œÄ) ‚Üí (T ‚ä¢! ~œÄ ‚ü∑ ~œÉ) := Œª H => iff_symm $ iff_contra H

end Intuitionistic

section complete

variable [Complete F]

instance : Intuitionistic F where
  modus_ponens := fun {T p q} b‚ÇÅ b‚ÇÇ =>
    Complete.consequence_iff_provable.mp (fun M _ s hM => by
      rcases b‚ÇÅ with ‚ü®b‚ÇÅ‚ü©; rcases b‚ÇÇ with ‚ü®b‚ÇÇ‚ü©
      have : s ‚äß‚Çõ p ‚Üí s ‚äß‚Çõ q := by simpa using Sound.models_of_proof hM b‚ÇÅ
      exact this (Sound.models_of_proof hM b‚ÇÇ))
  verum  := fun T => Complete.consequence_iff_provable.mp (fun M _ _ _ => by simp)
  falsum := fun T p => Complete.consequence_iff_provable.mp (fun M _ _ _ => by simp)
  imply‚ÇÅ := fun T p q => Complete.consequence_iff_provable.mp (fun _ _ _ _ => by simp; exact fun a _ => a)
  imply‚ÇÇ := fun T p q r => Complete.consequence_iff_provable.mp (fun _ _ _ _ => by simp; exact fun a b c => a c (b c))
  conj‚ÇÅ  := fun T p q => Complete.consequence_iff_provable.mp (fun _ _ _ _ => by simp; exact fun a _ => a)
  conj‚ÇÇ  := fun T p q => Complete.consequence_iff_provable.mp (fun _ _ _ _ => by simp)
  conj‚ÇÉ  := fun T p q => Complete.consequence_iff_provable.mp (fun _ _ _ _ => by simp; exact fun a b => ‚ü®a, b‚ü©)
  disj‚ÇÅ  := fun T p q => Complete.consequence_iff_provable.mp (fun _ _ _ _ => by simpa using Or.inl)
  disj‚ÇÇ  := fun T p q => Complete.consequence_iff_provable.mp (fun _ _ _ _ => by simpa using Or.inr)
  disj‚ÇÉ  := fun T p q r => Complete.consequence_iff_provable.mp (fun _ _ _ _ => by simpa using Or.rec)
  neg‚ÇÅ   := fun T p q => Complete.consequence_iff_provable.mp (fun _ _ _ _ => by simp; exact fun a b c => (b c) (a c))
  neg‚ÇÇ   := fun T p q => Complete.consequence_iff_provable.mp (fun _ _ _ _ => by simp; exact fun a b => (b a).elim)

instance : Deduction F where
  deduction := fun {T p q} =>
    ‚ü® fun b => Complete.consequence_iff_provable.mp (fun M _ s hM => by
        rcases b with ‚ü®b‚ü©
        have hM : s ‚äß‚Çõ p ‚àß s ‚äß‚Çõ* T := by simpa using hM
        have : s ‚äß‚Çõ p ‚Üí s ‚äß‚Çõ q := by simpa using Sound.models_of_proof hM.2 b
        exact this hM.1),
      fun b =>
      Complete.consequence_iff_provable.mp (fun M _ s hM => by
        rcases b with ‚ü®b‚ü©
        simp; intro hp; exact Sound.models_of_proof (s := s) (by simp[*]) b) ‚ü©

end complete

end System

end LO
