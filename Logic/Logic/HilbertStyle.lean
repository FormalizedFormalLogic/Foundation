import Logic.Logic.System

namespace LO

namespace System
variable {F : Type u} [LogicSymbol F] [ùìë : System F]

class Intuitionistic (F : Type u) [LogicSymbol F] [System F] where
  modus_ponens {T : Set F} {p q : F}   : T ‚ä¢! p ‚ü∂ q ‚Üí T ‚ä¢! p ‚Üí T ‚ä¢! q
  verum       (T : Set F)             : T ‚ä¢! ‚ä§
  imply‚ÇÅ      (T : Set F) (p q : F)   : T ‚ä¢! p ‚ü∂ q ‚ü∂ p
  imply‚ÇÇ      (T : Set F) (p q r : F) : T ‚ä¢! (p ‚ü∂ q ‚ü∂ r) ‚ü∂ (p ‚ü∂ q) ‚ü∂ p ‚ü∂ r
  conj‚ÇÅ       (T : Set F) (p q : F)   : T ‚ä¢! p ‚ãè q ‚ü∂ p
  conj‚ÇÇ       (T : Set F) (p q : F)   : T ‚ä¢! p ‚ãè q ‚ü∂ q
  conj‚ÇÉ       (T : Set F) (p q : F)   : T ‚ä¢! p ‚ü∂ q ‚ü∂ p ‚ãè q
  disj‚ÇÅ       (T : Set F) (p q : F)   : T ‚ä¢! p ‚ü∂ p ‚ãé q
  disj‚ÇÇ       (T : Set F) (p q : F)   : T ‚ä¢! q ‚ü∂ p ‚ãé q
  disj‚ÇÉ       (T : Set F) (p q r : F) : T ‚ä¢! (p ‚ü∂ r) ‚ü∂ (q ‚ü∂ r) ‚ü∂ p ‚ãé q ‚ü∂ r
  neg‚ÇÅ        (T : Set F) (p q : F)   : T ‚ä¢! (p ‚ü∂ q) ‚ü∂ (p ‚ü∂ ~q) ‚ü∂ ~p
  neg‚ÇÇ        (T : Set F) (p q : F)   : T ‚ä¢! p ‚ü∂ ~p ‚ü∂ q

variable {Œ± : Type*} [ùì¢ : Semantics F Œ±]

instance [LO.Complete F] : Intuitionistic F where
  modus_ponens := fun {T p q} b‚ÇÅ b‚ÇÇ =>
    Complete.consequence_iff_provable.mp (fun a hM => by
      rcases b‚ÇÅ with ‚ü®b‚ÇÅ‚ü©; rcases b‚ÇÇ with ‚ü®b‚ÇÇ‚ü©
      have : a ‚äß p ‚Üí a ‚äß q := by simpa using Sound.models_of_proof hM b‚ÇÅ
      exact this (Sound.models_of_proof hM b‚ÇÇ))
  verum  := fun T => Complete.consequence_iff_provable.mp (fun _ _ => by simp)
  imply‚ÇÅ := fun T p q => Complete.consequence_iff_provable.mp (fun _ _ => by simp; exact fun a _ => a)
  imply‚ÇÇ := fun T p q r => Complete.consequence_iff_provable.mp (fun _ _ => by simp; exact fun a b c => a c (b c))
  conj‚ÇÅ  := fun T p q => Complete.consequence_iff_provable.mp (fun _ _ => by simp; exact fun a _ => a)
  conj‚ÇÇ  := fun T p q => Complete.consequence_iff_provable.mp (fun _ _ => by simp)
  conj‚ÇÉ  := fun T p q => Complete.consequence_iff_provable.mp (fun _ _ => by simp; exact fun a b => ‚ü®a, b‚ü©)
  disj‚ÇÅ  := fun T p q => Complete.consequence_iff_provable.mp (fun _ _ => by simpa using Or.inl)
  disj‚ÇÇ  := fun T p q => Complete.consequence_iff_provable.mp (fun _ _ => by simpa using Or.inr)
  disj‚ÇÉ  := fun T p q r => Complete.consequence_iff_provable.mp (fun _ _ => by simpa using Or.rec)
  neg‚ÇÅ   := fun T p q => Complete.consequence_iff_provable.mp (fun _ _ => by simp; exact fun a b c => (b c) (a c))
  neg‚ÇÇ   := fun T p q => Complete.consequence_iff_provable.mp (fun _ _ => by simp; exact fun a b => (b a).elim)

namespace Intuitionistic

variable [Intuitionistic F] {T : Set F}

scoped infixl:90 " ‚®Ä " => modus_ponens

@[simp] lemma imp_id (p : F) : T ‚ä¢! p ‚ü∂ p := (imply‚ÇÇ T p (p ‚ü∂ p) p) ‚®Ä (imply‚ÇÅ T p (p ‚ü∂ p)) ‚®Ä (imply‚ÇÅ T p p)

@[simp] lemma hyp_right {p : F} (h : T ‚ä¢! p) (q) : T ‚ä¢! q ‚ü∂ p := imply‚ÇÅ T p q ‚®Ä h

lemma imp_trans {p q r : F} (hp : T ‚ä¢! p ‚ü∂ q) (hq : T ‚ä¢! q ‚ü∂ r) : T ‚ä¢! p ‚ü∂ r :=
  imply‚ÇÇ T p q r ‚®Ä hyp_right hq p ‚®Ä hp

lemma and_split {p q : F} (hp : T ‚ä¢! p) (hq : T ‚ä¢! q) : T ‚ä¢! p ‚ãè q := (conj‚ÇÉ T p q) ‚®Ä hp ‚®Ä hq

lemma and_left {p q : F} (h : T ‚ä¢! p ‚ãè q) : T ‚ä¢! p := conj‚ÇÅ T p q ‚®Ä h

lemma and_right {p q : F} (h : T ‚ä¢! p ‚ãè q) : T ‚ä¢! q := conj‚ÇÇ T p q ‚®Ä h

lemma iff_refl (p : F) : T ‚ä¢! p ‚ü∑ p := and_split (imp_id p) (imp_id p)

lemma iff_symm {p q : F} (h : T ‚ä¢! p ‚ü∑ q) : T ‚ä¢! q ‚ü∑ p := and_split (and_right h) (and_left h)

lemma iff_trans {p q r : F} (hp : T ‚ä¢! p ‚ü∑ q) (hq : T ‚ä¢! q ‚ü∑ r) : T ‚ä¢! p ‚ü∑ r :=
  and_split (imp_trans (and_left hp) (and_left hq)) (imp_trans (and_right hq) (and_right hp))

end Intuitionistic

end System

end LO
