import Logic.Logic.Semantics

namespace LO

variable {F : Type u} [LogicSymbol F]

/- Deduction System of F -/

class System (F : Type u) [LogicSymbol F] where
  Bew : Set F ‚Üí F ‚Üí Type u
  axm : ‚àÄ {f}, f ‚àà T ‚Üí Bew T f
  weakening' : ‚àÄ {T U f}, T ‚äÜ U ‚Üí Bew T f ‚Üí Bew U f

namespace System
variable [ùìë : System F]

instance : HasTurnstile F (Type u) := ‚ü®ùìë.Bew‚ü©

def BewTheory (T U : Set F) : Type u := {f : F} ‚Üí f ‚àà U ‚Üí T ‚ä¢ f

infix:45 " ‚ä¢* " => System.BewTheory

def BewTheoryEmpty (T : Set F) : T ‚ä¢* ‚àÖ := fun h => by contradiction

def BewTheory.ofSubset {T U : Set F} (h : U ‚äÜ T) : T ‚ä¢* U := fun hf => axm (h hf)

def BewTheory.refl (T : Set F) : T ‚ä¢* T := axm

def Consistent (T : Set F) : Prop := IsEmpty (T ‚ä¢ ‚ä•)

def weakening {T U : Set F} {f : F} (b : T ‚ä¢ f) (ss : T ‚äÜ U) : U ‚ä¢ f := weakening' ss b

lemma Consistent.of_subset {T U : Set F} (h : Consistent U) (ss : T ‚äÜ U) : Consistent T := ‚ü®fun b => h.false (weakening b ss)‚ü©

lemma inconsistent_of_proof {T : Set F} (b : T ‚ä¢ ‚ä•) : ¬¨Consistent T := by simp[Consistent]; exact ‚ü®b‚ü©

abbrev Provable (T : Set F) (f : F) : Prop := Nonempty (T ‚ä¢ f)

infix:45 " ‚ä¢! " => System.Provable

noncomputable def Provable.toProof {T : Set F} {f : F} (h : T ‚ä¢! f) : T ‚ä¢ f := Classical.choice h

abbrev Unprovable (T : Set F) (f : F) : Prop := IsEmpty (T ‚ä¢ f)

infix:45 " ‚ä¨ " => System.Unprovable

lemma unprovable_iff_not_provable {T : Set F} {f : F} : T ‚ä¨ f ‚Üî ¬¨T ‚ä¢! f := by simp[System.Unprovable]

protected def Complete (T : Set F) : Prop := ‚àÄ f, (T ‚ä¢! f) ‚à® (T ‚ä¢! ~f)

def Independent (T : Set F) (f : F) : Prop := T ‚ä¨ f ‚àß T ‚ä¨ ~f

lemma incomplete_iff_exists_independent {T : Set F} :
    ¬¨System.Complete T ‚Üî ‚àÉ f, Independent T f := by simp[System.Complete, not_or, Independent]

def theory (T : Set F) : Set F := {p | T ‚ä¢! p}

class Subtheory (T U : Set F) where
  sub : {f : F} ‚Üí T ‚ä¢ f ‚Üí U ‚ä¢ f

class Equivalent (T U : Set F) where
  ofLeft : {f : F} ‚Üí T ‚ä¢ f ‚Üí U ‚ä¢ f
  ofRight : {f : F} ‚Üí U ‚ä¢ f ‚Üí T ‚ä¢ f

namespace Subtheory

variable (T U T‚ÇÅ T‚ÇÇ T‚ÇÉ : Set F)

@[refl] instance : Subtheory T T := ‚ü®id‚ü©

@[trans] protected def trans [Subtheory T‚ÇÅ T‚ÇÇ] [Subtheory T‚ÇÇ T‚ÇÉ] : Subtheory T‚ÇÅ T‚ÇÉ :=
  ‚ü®fun {f} b => sub (sub b : T‚ÇÇ ‚ä¢ f)‚ü©

def ofSubset (h : T ‚äÜ U) : Subtheory T U := ‚ü®fun b => weakening b h‚ü©

end Subtheory

namespace Equivalent

variable (T U T‚ÇÅ T‚ÇÇ T‚ÇÉ : Set F)

@[refl] instance : Equivalent T T := ‚ü®id, id‚ü©

@[symm] instance [Equivalent T U] : Equivalent U T := ‚ü®ofRight, ofLeft‚ü©

@[trans] protected def trans [Equivalent T‚ÇÅ T‚ÇÇ] [Equivalent T‚ÇÇ T‚ÇÉ] : Equivalent T‚ÇÅ T‚ÇÉ :=
  ‚ü®fun {f} b => ofLeft (ofLeft b : T‚ÇÇ ‚ä¢ f), fun {f} b => ofRight (ofRight b : T‚ÇÇ ‚ä¢ f)‚ü©

end Equivalent

end System

def System.hom [System F] {G : Type u} [LogicSymbol G] (F : G ‚ÜíL F) : System G where
  Bew := fun T g => F '' T ‚ä¢ F g
  axm := fun h => System.axm (Set.mem_image_of_mem F h)
  weakening' := fun h => by simp; exact System.weakening' (Set.image_subset F h)

variable (F)
variable [LogicSymbol F] [ùìë : System F] {Struc : Type w ‚Üí Type v} [ùì¢ : Semantics F Struc]

class Sound where
  sound : ‚àÄ {T : Set F} {p : F}, T ‚ä¢ p ‚Üí T ‚ä® p

class SoundOn (M : Type w) (s : Struc M) (H : Set F) where
  sound : ‚àÄ {T : Set F} {p : F}, p ‚àà H ‚Üí T ‚ä¢ p ‚Üí s ‚äß‚Çõ p

class Complete extends Sound F where
  complete : ‚àÄ {T : Set F} {p : F}, T ‚ä® p ‚Üí T ‚ä¢ p

variable {F}

namespace Sound

variable [Sound F]
variable {M : Type w} [Inhabited M] {s : Struc M}

lemma sound' {T : Set F} {f : F} : T ‚ä¢! f ‚Üí T ‚ä® f := by rintro ‚ü®b‚ü©; exact sound b

lemma not_provable_of_countermodel {T : Set F} {p : F}
  (hT : s ‚äß‚Çõ* T) (hp : ¬¨s ‚äß‚Çõ p) : IsEmpty (T ‚ä¢ p) :=
  ‚ü®fun b => by have : s ‚äß‚Çõ p := Sound.sound b M s hT; contradiction‚ü©

lemma consistent_of_model {T : Set F}
  (hT : s ‚äß‚Çõ* T) : System.Consistent T :=
  not_provable_of_countermodel (p := ‚ä•) hT (by simp)

lemma consistent_of_satisfiable {T : Set F} : Semantics.Satisfiable‚Çõ T ‚Üí System.Consistent T := by
  rintro ‚ü®M, _, s, h‚ü©; exact consistent_of_model h

lemma models_of_proof {T : Set F} {f} (h : s ‚äß‚Çõ* T) (b : T ‚ä¢ f) : s ‚äß‚Çõ f :=
  Sound.sound b M s h

lemma modelsTheory_of_proofTheory {T U : Set F} (h : s ‚äß‚Çõ* T) (b : T ‚ä¢* U) : s ‚äß‚Çõ* U :=
  fun _ hf => models_of_proof h (b hf)

end Sound

namespace Complete

variable [Complete F]

lemma satisfiable‚Çõ_iff_consistent {T : Set F} : Semantics.Satisfiable‚Çõ T ‚Üî System.Consistent T :=
  ‚ü®Sound.consistent_of_satisfiable,
   by contrapose; intro h
      have : T ‚ä® ‚ä•
      { intro M i s hM; have : Semantics.Satisfiable‚Çõ T := ‚ü®M, i, s, hM‚ü©; contradiction }
      have : T ‚ä¢ ‚ä• := complete this
      exact System.inconsistent_of_proof this‚ü©

lemma not_satisfiable_iff_inconsistent {T : Set F} : ¬¨Semantics.Satisfiable‚Çõ T ‚Üî T ‚ä¢! ‚ä• := by
  simp[satisfiable‚Çõ_iff_consistent, System.Consistent]

lemma consequence_iff_provable {T : Set F} {f : F} : T ‚ä® f ‚Üî T ‚ä¢! f :=
‚ü®fun h => ‚ü®complete h‚ü©, by rintro ‚ü®b‚ü©; exact Sound.sound b‚ü©

end Complete

namespace System

variable [LO.Complete F]

def ofSemanticsSubtheory {T‚ÇÅ T‚ÇÇ : Set F} (h : Semantics.Subtheory T‚ÇÅ T‚ÇÇ) : System.Subtheory T‚ÇÅ T‚ÇÇ :=
  ‚ü®fun hf => Complete.complete (h (Sound.sound hf))‚ü©

end System

namespace Semantics

variable [LO.Complete F]

lemma ofSystemSubtheory (T‚ÇÅ T‚ÇÇ : Set F) [System.Subtheory T‚ÇÅ T‚ÇÇ] : Semantics.Subtheory T‚ÇÅ T‚ÇÇ :=
  fun hf => (Sound.sound $ System.Subtheory.sub $ Complete.complete hf)

end Semantics

class OneSided (F : Type*) [LogicSymbol F] where
  Derivation : List F ‚Üí Type*
  verum (Œî : List F) : Derivation (‚ä§ :: Œî)
  and {p q : F} {Œî : List F} : Derivation (p :: Œî) ‚Üí Derivation (q :: Œî) ‚Üí Derivation (p ‚ãè q :: Œî)
  or {p q : F} {Œî : List F} : Derivation (p :: q :: Œî) ‚Üí Derivation (p ‚ãé q :: Œî)
  wk {Œî Œì : List F} : Derivation Œî ‚Üí Œî ‚äÜ Œì ‚Üí Derivation Œì
  em {p} {Œî : List F} (hp : ~p ‚àà Œî) : Derivation (p :: Œî)

scoped prefix:45 "‚ä¢·¥∏ " => OneSided.Derivation

class LawfulOneSided (F : Type*) [LogicSymbol F] [System F] extends OneSided F where
  toProofEmpty {p : F} : ‚ä¢·¥∏ [p] ‚Üí ‚àÖ ‚ä¢ p

namespace LawfulOneSided

variable {F : Type*} [LogicSymbol F] [System F] [LawfulOneSided F]

def toProof {p : F} (b : ‚ä¢·¥∏ [p]) (T : Set F) : T ‚ä¢ p :=
  System.weakening (toProofEmpty b) (Set.empty_subset T)

end LawfulOneSided

class TwoSided (F : Type*) where
  Derivation : List F ‚Üí List F ‚Üí Type*

infix: 45 " ‚ä¢·¥≥ " => TwoSided.Derivation

class Gentzen (F : Type u) [LogicSymbol F] extends TwoSided F where
  verum (Œì Œî : List F)                : Œì ‚ä¢·¥≥ ‚ä§ :: Œî
  falsum (Œì Œî : List F)               : ‚ä• :: Œì ‚ä¢·¥≥ Œî
  negLeft {p : F} {Œì Œî : List F}      : Œì ‚ä¢·¥≥ p :: Œî ‚Üí ~p :: Œì ‚ä¢·¥≥ Œî
  negRight {p : F} {Œì Œî : List F}     : p :: Œì ‚ä¢·¥≥ Œî ‚Üí Œì ‚ä¢·¥≥ ~p :: Œî
  andLeft {p q : F} {Œì Œî : List F}    : p :: q :: Œì ‚ä¢·¥≥ Œî ‚Üí p ‚ãè q :: Œì ‚ä¢·¥≥ Œî
  andRight {p q : F} {Œì Œî : List F}   : Œì ‚ä¢·¥≥ p :: Œî ‚Üí Œì ‚ä¢·¥≥ q :: Œî ‚Üí Œì ‚ä¢·¥≥ p ‚ãè q :: Œî
  orLeft {p q : F} {Œì Œî : List F}     : p :: Œì ‚ä¢·¥≥ Œî ‚Üí q :: Œì ‚ä¢·¥≥ Œî ‚Üí p ‚ãé q :: Œì ‚ä¢·¥≥ Œî
  orRight {p q : F} {Œì Œî : List F}    : Œì ‚ä¢·¥≥ p :: q :: Œî ‚Üí Œì ‚ä¢·¥≥ p ‚ãé q :: Œî
  implyLeft {p q : F} {Œì Œî : List F}  : Œì ‚ä¢·¥≥ p :: Œî ‚Üí q :: Œì ‚ä¢·¥≥ Œî ‚Üí (p ‚ü∂ q) :: Œì ‚ä¢·¥≥ Œî
  implyRight {p q : F} {Œì Œî : List F} : p :: Œì ‚ä¢·¥≥ q :: Œî ‚Üí Œì ‚ä¢·¥≥ (p ‚ü∂ q) :: Œî
  wk {Œì Œì' Œî Œî' : List F} : Œì ‚ä¢·¥≥ Œî ‚Üí Œì ‚äÜ Œì' ‚Üí Œî ‚äÜ Œî' ‚Üí Œì' ‚ä¢·¥≥ Œî'
  em {p} {Œì Œî : List F} (hŒì : p ‚àà Œì) (hŒî : p ‚àà Œî) : Œì ‚ä¢·¥≥ Œî

class LawfulGentzen (F : Type u) [LogicSymbol F] [System F] extends Gentzen F where
  toProof‚ÇÅ {Œì} {T : Set F} {p : F} : Œì ‚ä¢·¥≥ [p] ‚Üí (‚àÄ q ‚àà Œì, T ‚ä¢ q) ‚Üí T ‚ä¢ p

namespace LawfulGentzen

variable {F : Type*} [LogicSymbol F] [System F] [LawfulGentzen F]

def toProofOfNil {p : F} (b : [] ‚ä¢·¥≥ [p]) (T : Set F) : T ‚ä¢ p :=
  toProof‚ÇÅ b (by intro q h; exact False.elim ((List.mem_nil_iff q).mp h))

lemma toProof‚ÇÅ! {Œì} {T : Set F} {p : F} (b : Œì ‚ä¢·¥≥ [p]) (H : ‚àÄ q ‚àà Œì, T ‚ä¢! q) : T ‚ä¢! p :=
  ‚ü®toProof‚ÇÅ b (fun q hq => (H q hq).toProof)‚ü©

end LawfulGentzen

end LO
